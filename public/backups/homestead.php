/*
Navicat MySQL Data Transfer

Source Server         : local
Source Server Version : 50629
Source Host           : localhost:3306
Source Database       : homestead

Target Server Type    : MYSQL
Target Server Version : 50629
File Encoding         : 65001

Date: 2016-07-21 18:05:29
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for admin_password_resets
-- ----------------------------
DROP TABLE IF EXISTS `admin_password_resets`;
CREATE TABLE `admin_password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  KEY `admin_password_resets_email_index` (`email`),
  KEY `admin_password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of admin_password_resets
-- ----------------------------

-- ----------------------------
-- Table structure for admin_user_role
-- ----------------------------
DROP TABLE IF EXISTS `admin_user_role`;
CREATE TABLE `admin_user_role` (
  `admin_user_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`admin_user_id`,`role_id`),
  KEY `admin_user_roles_role_id_foreign` (`role_id`),
  CONSTRAINT `admin_user_roles_admin_user_id_foreign` FOREIGN KEY (`admin_user_id`) REFERENCES `admin_users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `admin_user_roles_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of admin_user_role
-- ----------------------------
INSERT INTO `admin_user_role` VALUES ('1', '10');
INSERT INTO `admin_user_role` VALUES ('15', '12');

-- ----------------------------
-- Table structure for admin_users
-- ----------------------------
DROP TABLE IF EXISTS `admin_users`;
CREATE TABLE `admin_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `is_super` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否超级管理员',
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `admin_users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of admin_users
-- ----------------------------
INSERT INTO `admin_users` VALUES ('1', 'admin', 'admin@admin.com', '$2y$10$GBKiY/ngDVpe1iHwlTem3e0fbNrnv1sRLGcj4wT1isK0gbzY4oQoC', '1', 'wNfI3B0uPSkIeolB1mR3EHT3icVaEMD9TXAEqfCpIDmagvImVvqilILjAFSP', '2016-07-07 14:46:45', '2016-07-07 06:46:45');
INSERT INTO `admin_users` VALUES ('15', 'anigm1', 'anigm@qq.com', '$2y$10$puBJn7U3HS5uRs0e/aUkUOuYBtGSweSPo4GE94.FV6OnTqSb6Fsnu', '0', 'yZjN3h6nJrcrrxtmWHwLeXg7pweTyZznf0KRTQ4JMBjnRd3r2dheRONjNWBE', '2016-03-11 16:52:14', '2016-03-11 08:52:14');

-- ----------------------------
-- Table structure for article_tag
-- ----------------------------
DROP TABLE IF EXISTS `article_tag`;
CREATE TABLE `article_tag` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `tag_id` int(10) NOT NULL COMMENT '标签ID',
  `article_id` int(10) NOT NULL COMMENT '文章ID',
  PRIMARY KEY (`id`),
  KEY `tag_id` (`tag_id`),
  KEY `article_id` (`article_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='文章和标签映射表';

-- ----------------------------
-- Records of article_tag
-- ----------------------------

-- ----------------------------
-- Table structure for articles
-- ----------------------------
DROP TABLE IF EXISTS `articles`;
CREATE TABLE `articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(80) COLLATE utf8_unicode_ci NOT NULL COMMENT '标题',
  `thumbnail` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '缩略图',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `slug` varchar(60) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '网址缩略名',
  `user_id` int(12) DEFAULT NULL COMMENT '文章编辑用户id',
  `category_id` int(10) NOT NULL COMMENT '文章分类id',
  `deleted_at` datetime DEFAULT NULL COMMENT '被软删除时间',
  `created_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `updated_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '修改更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `title` (`title`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='内容数据（文章/单页）表';

-- ----------------------------
-- Records of articles
-- ----------------------------
INSERT INTO `articles` VALUES ('1', '1', null, '1', null, '1', '0', null, '2016-07-12 16:54:41', '2016-07-12 16:54:41');

-- ----------------------------
-- Table structure for blogs
-- ----------------------------
DROP TABLE IF EXISTS `blogs`;
CREATE TABLE `blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `description` text,
  `datetime` datetime DEFAULT NULL,
  `created_at` varchar(255) DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `deleted_at` datetime DEFAULT NULL,
  `tag` varchar(255) DEFAULT NULL,
  `thumb` varchar(255) DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogs
-- ----------------------------
INSERT INTO `blogs` VALUES ('31', 'distinct在sql中的应用', '/uploads/2016-03-18/e8b07be570e7eae18390c77c76a242af56e116a2.jpg', '<p>&nbsp; 在采集的一个站点里面汇集了较多的数据，大概采集了有几十万，同一行业站点的数据几乎都采集了，当然标题是没有改掉的，还是原标题，这是为了方便筛选重复数据的，这几十万的数据里面汇集了较大比重的重复数据，本来想要把这些数据删除掉，但夏日博客苦于没找到好的方法，最后还是想到了 sql 中 distinct 参数，这个参数已经N久没有用过了，其作用就是将重复的数据给过滤掉不显示，看来用在这个采集站点里是最为合适不过了，下面重点的去了解一下 distinct 在 sql 中的应用吧。</p>\r\n\r\n<p>distinct作用:</p>\r\n\r\n<p>在数据表里，往往会重复许多值，比如输入两个字段的&ldquo;夏日博客&rdquo;，如果我们只想要输出一个&ldquo;夏日博客&rdquo;的时候，就可以用到 distinct 了，利用 distinct 可以只显示出来一个&ldquo;夏日博客&rdquo;。</p>\r\n\r\n<p>distinct语法:</p>\r\n\r\n<p>因为是需要输出值的，所以需要用到 SELECT，语法如下:</p>\r\n\r\n<p>SELECT&nbsp;DISTINCT&nbsp;列名称&nbsp;FROM&nbsp;表名称&nbsp;&nbsp;</p>\r\n\r\n<p>distinct实例一:</p>\r\n\r\n<p>为了更直观的看到 distinct 的作用效果，我们来进行一下使用 distinct 之前和之后都是怎样的效果，比如我们有如下 Orders 表:</p>\r\n\r\n<p>如果不使用 distinct 来进行读取，则 SQL 为 &ldquo;SELECT Company FROM Orders&rdquo; 语句，哪么读取出来的结果就为如下形式：</p>\r\n\r\n<p>我们可以看出，重复值 W3School 被两次显示出来了，如果内容是重复的，则只显示一次就可以了，下面再来看一下使用 distinct 之后输出的值是怎样的，先来看一下使用 distinct 之后的 SQL 吧，如下:</p>\r\n\r\n<p>SELECT&nbsp;DISTINCT&nbsp;Company&nbsp;FROM&nbsp;Orders&nbsp;&nbsp;</p>\r\n\r\n<p>运行之后的结果形式为:</p>\r\n\r\n<p>现在 W3School 只被显示了一次。</p>\r\n\r\n<p>distinct实例二:</p>\r\n\r\n<p>再浅显的一个小实例，如果我们有如下的 表A：</p>\r\n\r\n<p>在 sql 中使用 distinct 来去除重复的数据，运行后的效果如下:</p>\r\n\r\n<p>distinct实例三:</p>\r\n\r\n<p>还是接着 distinct实例二，我们再稍微将 sql 语句更改一下，不仅去除表 name 里面的重复值，且连 id 的值一同去除掉，SQL语句如下:</p>\r\n\r\n<p>select&nbsp;distinct&nbsp;name,&nbsp;id&nbsp;from&nbsp;A&nbsp;&nbsp;</p>\r\n\r\n<p>执行后的效果如下所示:</p>\r\n\r\n<p>我们可以看到执行后的效果里面已经将 name 字段和 id 字段里面重复的值都已经去掉了。</p>\r\n', '2016-03-18 17:09:25', '1458292241', '0000-00-00 00:00:00', null, 'sql', 'http://localhost:8000/uploads/img/2016-03-18/56ebc5e884ef0_00o.jpg', '1');
INSERT INTO `blogs` VALUES ('32', 'smarty模板中调用fckeditor编辑器方法', '/uploads/2016-03-18/2f151826fa1e55141c9e75f4c6a62fc4736d7fa8.jpg', '<p>fckeditor编辑大有很多种调用方法,最常用的是提供了php,asp,asp.net这几种我们在程序中调用了,同时它也支持js调用方法,下面我们来看js调用fckeditor编辑器的方法,代码如下:</p>\r\n\r\n<p>&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;fckeditor/fckeditor.js&quot;&gt;&lt;/script&gt;&nbsp;&nbsp;&nbsp;<br />\r\n&lt;form&nbsp;method=&quot;POST&quot;&gt;&nbsp;&nbsp;&nbsp;<br />\r\n&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;&nbsp;&nbsp;&nbsp;<br />\r\nvar&nbsp;oFCKeditor&nbsp;=&nbsp;new&nbsp;FCKeditor(&nbsp;&#39;content&#39;&nbsp;)&nbsp;;&nbsp;&nbsp;&nbsp;<br />\r\noFCKeditor.BasePath&nbsp;=&nbsp;&quot;fckeditor/&quot;&nbsp;;&nbsp;&nbsp;&nbsp;<br />\r\noFCKeditor.Height&nbsp;=&nbsp;300&nbsp;;&nbsp;&nbsp;&nbsp;<br />\r\noFCKeditor.Value&nbsp;=&nbsp;&#39;{&nbsp;$content&nbsp;}&#39;&nbsp;;&nbsp;&nbsp;&nbsp;<br />\r\noFCKeditor.Create()&nbsp;;&nbsp;&nbsp;&nbsp;<br />\r\n&lt;/script&gt;&nbsp;&nbsp;&nbsp;<br />\r\n&lt;/form&gt; &nbsp;</p>\r\n', '2016-03-18 17:15:05', '1458292546', '0000-00-00 00:00:00', null, 'smarty,fckeditor', 'http://localhost:8000/uploads/img/2016-03-18/56ebc72e90cf9_26o.jpg', '1');
INSERT INTO `blogs` VALUES ('33', 'php购物车完整类代码', '/uploads/2016-03-18/b09d1a9f2f0da9f5bcd35e04f4535af7e72ec79d.jpg', '<p>记得13年的时候记得写过一个php小型的增删改查电商系统，里面其中就有商品的购物结算等系统，这几天一直在研究 ecshop 系统，当然也是跟电商打交道了，对了，之前写的系统是&nbsp;夏日php电子商务系统 v0.2，这个系统一直没有更新，貌似现在也不兼容最新版了，当时只是为了帮助新手朋友学习php购物车类库的。</p>\r\n\r\n<p>今天偶然遇到一个顾客想要一个简单的 php 购物车系统，不需要 ecshop 哪么强大复杂的，突然一下子不知道该怎么弄了，所以找到以前写的系统来参考一下，不过基本上还是用不上，从网上找了一个完整的 php 购物车类直接搞定了，这个 php购物车类实现了商品的添加，修改，删除，显示列表，以及各种计算的方法，采用了单一类的原理，稳定且容易扩展，好了，下面我们就来看看这个php购物车类吧。</p>\r\n\r\n<p>php购物车类实例代码:</p>\r\n\r\n<p>/*******************************&nbsp;<br />\r\n*&nbsp;author:www.xiariboke.com&nbsp;<br />\r\n*&nbsp;date:2016&nbsp;年&nbsp;01&nbsp;月&nbsp;05&nbsp;日&nbsp;<br />\r\n*******************************/&nbsp;&nbsp;<br />\r\nclass&nbsp;Cart{&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;protected&nbsp;$ins;&nbsp;//实例变量&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$item=array();&nbsp;//放商品容器&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//禁止外部调用&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;protected&nbsp;function&nbsp;__construct(){}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//禁止克隆&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;protected&nbsp;function&nbsp;__clone(){}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//类内部实例化&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;protected&nbsp;function&nbsp;getIns(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$ins&nbsp;instanceof&nbsp;self)){self::$ins=new&nbsp;self();}return&nbsp;self::$ins;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//为了能使商品跨页面保存，把对象放入session里，这里为了防止冲突，设置了一个session后缀参数&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;getCat($sesSuffix=&#39;phpernote&#39;){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!isset($_SESSION[&#39;cat&#39;.$sesSuffix])||!($_SESSION[&#39;cat&#39;.$sesSuffix]&nbsp;instanceof&nbsp;self)){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&#39;cat&#39;.$sesSuffix]=self::getIns();&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$_SESSION[&#39;cat&#39;.$sesSuffix];&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//入列时的检验，是否在$item里存在&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;inItem($goods_id){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;getTypes()==0){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里检验商品是否相同是通过goods_id来检测，并未通过商品名称name来检测，具体情况可做修改&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(array_key_exists($goods_id,$this-&gt;item))){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$this-&gt;item[$goods_id][&#39;num&#39;];&nbsp;//返回此商品个数&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//添加一个商品&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;goods_id&nbsp;唯一id&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;name&nbsp;名称&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;num&nbsp;数量&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;price&nbsp;单价&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;addItem($goods_id,$name,$num,$price){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;inItem($goods_id)!=false){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id][&#39;num&#39;]+=$num;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id]=array();&nbsp;//一个商品为一个数组&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id][&#39;num&#39;]=$num;&nbsp;//这一个商品的购买数量&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id][&#39;name&#39;]=$name;&nbsp;//商品名字&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id][&#39;price&#39;]=floatval($price);&nbsp;//商品单价&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//减少一个商品&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;reduceItem($goods_id,$num){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;inItem($goods_id)==false){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($num&gt;$this-&gt;getNum($goods_id)){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unset($this-&gt;item[$goods_id]);&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item[$goods_id][&#39;num&#39;]-=$num;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//去掉一个商品&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;delItem($goods_id){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;inItem($goods_id)){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unset($this-&gt;item[$goods_id]);&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//返回购买商品列表&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;itemList(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$this-&gt;item;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//一共有多少种商品&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getTypes(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;count($this-&gt;item);&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//获得一种商品的总个数&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getNum($goods_id){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$this-&gt;item[$goods_id][&#39;num&#39;];&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;查询购物车中有多少个商品&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getNumber(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$num=0;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;getTypes()==0){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach($this-&gt;item&nbsp;as&nbsp;$k=&gt;$v){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$num+=$v[&#39;num&#39;];&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$num;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//计算总价格&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getPrice(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$price=0;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($this-&gt;getTypes()==0){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach($this-&gt;item&nbsp;as&nbsp;$k=&gt;$v){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$price+=floatval($v[&#39;num&#39;]*$v[&#39;price&#39;]);&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$price;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;//清空购物车&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;emptyItem(){&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;item=array();&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />\r\n}&nbsp;&nbsp;</p>\r\n\r\n<p>php购物车类实例调用代码:</p>\r\n\r\n<p>&lt;?php&nbsp;&nbsp;<br />\r\nheader(&quot;Content-type:text/html;charset=utf-8&quot;);&nbsp;&nbsp;<br />\r\nsession_start();&nbsp;&nbsp;<br />\r\n$cart&nbsp;=&nbsp;Cart::getCat(&#39;_test&#39;);&nbsp;&nbsp;<br />\r\n//cart经过一次实例化之后，任意页面都可以通过$_SESSION[&#39;cat_test&#39;]调用cart类的相关方法&nbsp;&nbsp;<br />\r\n$_SESSION[&#39;cat_test&#39;]-&gt;addItem(&#39;1&#39;,&#39;苹果&#39;,&#39;1&#39;,&#39;8.03&#39;);&nbsp;&nbsp;<br />\r\n$cart-&gt;addItem(&#39;2&#39;,&#39;香蕉&#39;,&#39;3&#39;,&#39;6.5&#39;);&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;&lt;pre&gt;&#39;;&nbsp;&nbsp;<br />\r\nprint_r($_SESSION);&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;获取购物车商品名称：&#39;.$_SESSION[&#39;cat_test&#39;]-&gt;item[1][&#39;name&#39;],&#39;;&#39;,$_SESSION[&#39;cat_test&#39;]-&gt;item[2][&#39;name&#39;];&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;&lt;br&nbsp;/&gt;&#39;;&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;购物车中共有商品总数：&#39;,$cart-&gt;getNumber();&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;&lt;br&nbsp;/&gt;&#39;;&nbsp;&nbsp;<br />\r\necho&nbsp;&#39;购物车中商品总价：&#39;,$_SESSION[&#39;cat_test&#39;]-&gt;getPrice();&nbsp;&nbsp;<br />\r\n//session_destroy();&nbsp;&nbsp;<br />\r\n//$_SESSION[&#39;cat_test&#39;]-&gt;emptyItem();&nbsp;&nbsp;<br />\r\n?&gt;&nbsp;&nbsp;</p>\r\n\r\n<p>这种php购物车类网上有许多，可以根据自己的需求进行二次开发，拿去测试吧，挺好玩的。</p>\r\n', '2016-03-18 17:16:26', '1458292626', '0000-00-00 00:00:00', null, 'php,购物车,代码', 'http://localhost:8000/uploads/img/2016-03-18/56ebc78ef0652_02o.jpg', '2');
INSERT INTO `blogs` VALUES ('34', 'PHP asb函数参数详解', '/uploads/2016-03-18/cd6433db218018ce30ef9f1801933deadcfae527.jpg', '<p>在网页程序应用中，时间显示是不可缺少的，几乎每一个应用程序中都要用到时间，比如发布系统中，要记录信息的发布时间，投票系统中，要记录用户的投票时间，这些都是需要用时间函数将时间给记录下来，然后录入到数据库中进行保存，在 php 中，提供了 date 时间函数，我们可以利用这个函数进行各种时间的组合，以满足我们应用程序的需求。</p>\r\n\r\n<p>time()在PHP中是得到一个数字,这个数字表示从1970-01-01到现在共走了多少秒,很奇怪吧 不过这样方便计算,</p>\r\n\r\n<p>要找出前一天的时间就是 time()-60*60*24;</p>\r\n\r\n<p>要找出前一年的时间就是 time()*60*60*24*365</p>\r\n\r\n<p>那么如何把这个数字换成日期格式呢,就要用到date函数了</p>\r\n\r\n<p>$t=time();&nbsp;&nbsp;&nbsp;<br />\r\necho&nbsp;date(&quot;Y-m-d&nbsp;H:i:s&quot;,$t);&nbsp;&nbsp;</p>\r\n\r\n<p>第一个参数的格式分别表示:</p>\r\n\r\n<p>a - &quot;am&quot; 或是 &quot;pm&quot;</p>\r\n\r\n<p>A - &quot;AM&quot; 或是 &quot;PM&quot;</p>\r\n\r\n<p>d - 几日，二位数字，若不足二位则前面补零; 如: &quot;01&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>D - 星期几，三个英文字母; 如: &quot;Fri&quot;</p>\r\n\r\n<p>F - 月份，英文全名; 如: &quot;January&quot;</p>\r\n\r\n<p>h - 12 小时制的小时; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>H - 24 小时制的小时; 如: &quot;00&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>g - 12 小时制的小时，不足二位不补零; 如: &quot;1&quot; 至 12&quot;</p>\r\n\r\n<p>G - 24 小时制的小时，不足二位不补零; 如: &quot;0&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>i - 分钟; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>j - 几日，二位数字，若不足二位不补零; 如: &quot;1&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>l - 星期几，英文全名; 如: &quot;Friday&quot;</p>\r\n\r\n<p>m - 月份，二位数字，若不足二位则在前面补零; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>n - 月份，二位数字，若不足二位则不补零; 如: &quot;1&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>M - 月份，三个英文字母; 如: &quot;Jan&quot;</p>\r\n\r\n<p>s - 秒; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>S - 字尾加英文序数，二个英文字母; 如: &quot;th&quot;，&quot;nd&quot;</p>\r\n\r\n<p>t - 指定月份的天数; 如: &quot;28&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>U - 总秒数</p>\r\n\r\n<p>w - 数字型的星期几，如: &quot;0&quot; (星期日) 至 &quot;6&quot; (星期六)</p>\r\n\r\n<p>Y - 年，四位数字; 如: &quot;1999&quot;</p>\r\n\r\n<p>y - 年，二位数字; 如: &quot;99&quot;</p>\r\n\r\n<p>z - 一年中的第几天; 如: &quot;0&quot; 至 &quot;365&quot;</p>\r\n\r\n<p>其它不在上列的字符则直接列出该字符 .</p>\r\n', '2016-03-18 17:17:30', '1458292668', '0000-00-00 00:00:00', null, 'php', 'http://localhost:8000/uploads/img/2016-03-18/56ebc7b193dc6_37o.jpg', '2');
INSERT INTO `blogs` VALUES ('36', 'PHP ssdate函数参数详解', '/uploads/2016-03-18/f2a0205582dc95754e3529e719023b595181f77b.jpg', '<p>在网页程序应用中，时间显示是不可缺少的，几乎每一个应用程序中都要用到时间，比如发布系统中，要记录信息的发布时间，投票系统中，要记录用户的投票时间，这些都是需要用时间函数将时间给记录下来，然后录入到数据库中进行保存，在 php 中，提供了 date 时间函数，我们可以利用这个函数进行各种时间的组合，以满足我们应用程序的需求。</p>\r\n\r\n<p>time()在PHP中是得到一个数字,这个数字表示从1970-01-01到现在共走了多少秒,很奇怪吧 不过这样方便计算,</p>\r\n\r\n<p>要找出前一天的时间就是 time()-60*60*24;</p>\r\n\r\n<p>要找出前一年的时间就是 time()*60*60*24*365</p>\r\n\r\n<p>那么如何把这个数字换成日期格式呢,就要用到date函数了</p>\r\n\r\n<p>$t=time();&nbsp;&nbsp;&nbsp;<br />\r\necho&nbsp;date(&quot;Y-m-d&nbsp;H:i:s&quot;,$t);&nbsp;&nbsp;</p>\r\n\r\n<p>第一个参数的格式分别表示:</p>\r\n\r\n<p>a - &quot;am&quot; 或是 &quot;pm&quot;</p>\r\n\r\n<p>A - &quot;AM&quot; 或是 &quot;PM&quot;</p>\r\n\r\n<p>d - 几日，二位数字，若不足二位则前面补零; 如: &quot;01&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>D - 星期几，三个英文字母; 如: &quot;Fri&quot;</p>\r\n\r\n<p>F - 月份，英文全名; 如: &quot;January&quot;</p>\r\n\r\n<p>h - 12 小时制的小时; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>H - 24 小时制的小时; 如: &quot;00&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>g - 12 小时制的小时，不足二位不补零; 如: &quot;1&quot; 至 12&quot;</p>\r\n\r\n<p>G - 24 小时制的小时，不足二位不补零; 如: &quot;0&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>i - 分钟; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>j - 几日，二位数字，若不足二位不补零; 如: &quot;1&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>l - 星期几，英文全名; 如: &quot;Friday&quot;</p>\r\n\r\n<p>m - 月份，二位数字，若不足二位则在前面补零; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>n - 月份，二位数字，若不足二位则不补零; 如: &quot;1&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>M - 月份，三个英文字母; 如: &quot;Jan&quot;</p>\r\n\r\n<p>s - 秒; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>S - 字尾加英文序数，二个英文字母; 如: &quot;th&quot;，&quot;nd&quot;</p>\r\n\r\n<p>t - 指定月份的天数; 如: &quot;28&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>U - 总秒数</p>\r\n\r\n<p>w - 数字型的星期几，如: &quot;0&quot; (星期日) 至 &quot;6&quot; (星期六)</p>\r\n\r\n<p>Y - 年，四位数字; 如: &quot;1999&quot;</p>\r\n\r\n<p>y - 年，二位数字; 如: &quot;99&quot;</p>\r\n\r\n<p>z - 一年中的第几天; 如: &quot;0&quot; 至 &quot;365&quot;</p>\r\n\r\n<p>其它不在上列的字符则直接列出该字符 .</p>\r\n', '2016-03-18 17:17:32', '1458292709', '0000-00-00 00:00:00', null, 'php', 'http://localhost:8000/uploads/img/2016-03-18/56ebc7b193dc6_37o.jpg', '1');
INSERT INTO `blogs` VALUES ('37', 'PHP date函数参数详解', '/uploads/2016-03-18/71c40b6e577766758f9507ecfdad48ef3fb82df7.jpg', '<p>在网页程序应用中，时间显示是不可缺少的，几乎每一个应用程序中都要用到时间，比如发布系统中，要记录信息的发布时间，投票系统中，要记录用户的投票时间，这些都是需要用时间函数将时间给记录下来，然后录入到数据库中进行保存，在 php 中，提供了 date 时间函数，我们可以利用这个函数进行各种时间的组合，以满足我们应用程序的需求。</p>\r\n\r\n<p>time()在PHP中是得到一个数字,这个数字表示从1970-01-01到现在共走了多少秒,很奇怪吧 不过这样方便计算,</p>\r\n\r\n<p>要找出前一天的时间就是 time()-60*60*24;</p>\r\n\r\n<p>要找出前一年的时间就是 time()*60*60*24*365</p>\r\n\r\n<p>那么如何把这个数字换成日期格式呢,就要用到date函数了</p>\r\n\r\n<p>$t=time();&nbsp;&nbsp;&nbsp;<br />\r\necho&nbsp;date(&quot;Y-m-d&nbsp;H:i:s&quot;,$t);&nbsp;&nbsp;</p>\r\n\r\n<p>第一个参数的格式分别表示:</p>\r\n\r\n<p>a - &quot;am&quot; 或是 &quot;pm&quot;</p>\r\n\r\n<p>A - &quot;AM&quot; 或是 &quot;PM&quot;</p>\r\n\r\n<p>d - 几日，二位数字，若不足二位则前面补零; 如: &quot;01&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>D - 星期几，三个英文字母; 如: &quot;Fri&quot;</p>\r\n\r\n<p>F - 月份，英文全名; 如: &quot;January&quot;</p>\r\n\r\n<p>h - 12 小时制的小时; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>H - 24 小时制的小时; 如: &quot;00&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>g - 12 小时制的小时，不足二位不补零; 如: &quot;1&quot; 至 12&quot;</p>\r\n\r\n<p>G - 24 小时制的小时，不足二位不补零; 如: &quot;0&quot; 至 &quot;23&quot;</p>\r\n\r\n<p>i - 分钟; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>j - 几日，二位数字，若不足二位不补零; 如: &quot;1&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>l - 星期几，英文全名; 如: &quot;Friday&quot;</p>\r\n\r\n<p>m - 月份，二位数字，若不足二位则在前面补零; 如: &quot;01&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>n - 月份，二位数字，若不足二位则不补零; 如: &quot;1&quot; 至 &quot;12&quot;</p>\r\n\r\n<p>M - 月份，三个英文字母; 如: &quot;Jan&quot;</p>\r\n\r\n<p>s - 秒; 如: &quot;00&quot; 至 &quot;59&quot;</p>\r\n\r\n<p>S - 字尾加英文序数，二个英文字母; 如: &quot;th&quot;，&quot;nd&quot;</p>\r\n\r\n<p>t - 指定月份的天数; 如: &quot;28&quot; 至 &quot;31&quot;</p>\r\n\r\n<p>U - 总秒数</p>\r\n\r\n<p>w - 数字型的星期几，如: &quot;0&quot; (星期日) 至 &quot;6&quot; (星期六)</p>\r\n\r\n<p>Y - 年，四位数字; 如: &quot;1999&quot;</p>\r\n\r\n<p>y - 年，二位数字; 如: &quot;99&quot;</p>\r\n\r\n<p>z - 一年中的第几天; 如: &quot;0&quot; 至 &quot;365&quot;</p>\r\n\r\n<p>其它不在上列的字符则直接列出该字符 .</p>\r\n', '2016-03-18 17:19:03', '1458292759', '0000-00-00 00:00:00', null, 'php', 'http://localhost:8000/uploads/img/2016-03-18/56ebc8147292d_16o.jpg', '2');
INSERT INTO `blogs` VALUES ('38', '1', '/uploads/2016-07-08/43ad3badf7a5cb40b4a1065b66bc793aa05e0838.jpg', 'aa', '2016-07-08 17:15:08', '2016-07-08 17:15:18', '2016-07-08 17:15:18', null, '1', '', '2');

-- ----------------------------
-- Table structure for categories
-- ----------------------------
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `pid` int(10) DEFAULT '0' COMMENT '父级ID',
  `name` varchar(80) COLLATE utf8_unicode_ci NOT NULL COMMENT '分类名称',
  `slug` varchar(60) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '网址缩略名',
  `sort` int(6) unsigned DEFAULT '0' COMMENT '分类排序,数字越大排名靠前',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='分类表';

-- ----------------------------
-- Records of categories
-- ----------------------------
INSERT INTO `categories` VALUES ('1', '0', '自己', '自己', '0');
INSERT INTO `categories` VALUES ('2', '1', '系统', '系统', '0');
INSERT INTO `categories` VALUES ('3', '2', 'linux', 'linux', '0');
INSERT INTO `categories` VALUES ('5', '1', 'code', 'code', '0');
INSERT INTO `categories` VALUES ('6', '5', 'php', 'php', '0');
INSERT INTO `categories` VALUES ('7', '6', 'laravel', 'laravel', '0');

-- ----------------------------
-- Table structure for columns
-- ----------------------------
DROP TABLE IF EXISTS `columns`;
CREATE TABLE `columns` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `_lft` int(10) unsigned NOT NULL,
  `_rgt` int(10) unsigned NOT NULL,
  `parent_id` int(10) unsigned DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `categories__lft__rgt_parent_id_index` (`_lft`,`_rgt`,`parent_id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of columns
-- ----------------------------
INSERT INTO `columns` VALUES ('1', 'A', '1', '6', null, '2016-03-18 02:40:21', '2016-03-18 02:40:21');
INSERT INTO `columns` VALUES ('2', 'A1', '2', '5', '1', '2016-03-18 02:40:29', '2016-03-18 02:40:39');
INSERT INTO `columns` VALUES ('3', 'AA1', '3', '4', '2', '2016-03-18 02:40:51', '2016-03-18 02:40:51');
INSERT INTO `columns` VALUES ('4', 'B', '7', '10', null, '2016-03-18 02:40:58', '2016-03-18 02:40:58');
INSERT INTO `columns` VALUES ('5', 'B1', '8', '9', '4', '2016-03-18 02:41:08', '2016-03-18 02:41:08');

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) DEFAULT '0',
  `content` varchar(255) DEFAULT NULL,
  `list_id` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `deleted_at` datetime DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES ('6', '0', '说的还傻瓜', '23', '2016-07-14 17:25:33', '2016-07-14 17:25:33', null, 'a', '160294913@qq.com');
INSERT INTO `comments` VALUES ('7', '0', '手动阀', '23', '2016-07-14 17:26:33', '2016-07-14 17:26:33', null, '的过来', '160294913@qq.com');
INSERT INTO `comments` VALUES ('8', '0', '大家好啊', '23', '2016-07-14 17:27:02', '2016-07-14 17:27:02', null, '俊良', '160294913@qq.com');
INSERT INTO `comments` VALUES ('9', '0', '中国上的会生活  ,随碟附送', '23', '2016-07-14 17:28:34', '2016-07-14 17:28:34', null, '大海', '15026857547');
INSERT INTO `comments` VALUES ('10', '0', '阿斯蒂芬,师德红线都是', '23', '2016-07-21 10:14:30', '2016-07-21 10:14:30', null, '规格书', 'xanigm@gmail.com');
INSERT INTO `comments` VALUES ('11', '6', '区二七,速度回许昌', '23', '2016-07-21 10:15:15', '2016-07-21 10:15:15', null, '狗续侯冠', 'admin@admin.com');
INSERT INTO `comments` VALUES ('12', '0', '沃尔沃热情', '23', '2016-07-21 10:24:06', '2016-07-21 10:24:06', null, '电话', 'admin@admin.com');
INSERT INTO `comments` VALUES ('13', '11', 'sdfsdf', '23', '2016-07-21 10:49:43', '2016-07-21 10:49:43', null, 'aa', 'admin@admin.com');
INSERT INTO `comments` VALUES ('14', '6', '胜多负少,上的方式的共和国', '23', '2016-07-21 10:51:23', '2016-07-21 10:51:23', null, '俊良', 'admin@admin.com');
INSERT INTO `comments` VALUES ('15', '14', '你好 你好', '23', '2016-07-21 11:53:33', '2016-07-21 11:53:33', null, '德华', '160294913@qq.com');
INSERT INTO `comments` VALUES ('16', '14', '你说个球', '23', '2016-07-21 11:54:22', '2016-07-21 11:54:22', null, '张额', '160294913@qq.com');
INSERT INTO `comments` VALUES ('17', '0', '这个挺好', '11', '2016-07-21 11:54:58', '2016-07-21 11:54:58', null, '俊良', 'xanigm@gmail.com');
INSERT INTO `comments` VALUES ('18', '0', '今天星期五', '999', '2016-07-21 12:03:42', '2016-07-21 12:03:42', null, '乐山大佛', '160294913@qq.com');
INSERT INTO `comments` VALUES ('19', '0', 'sdfsd', '999', '2016-07-21 12:05:04', '2016-07-21 12:05:04', null, 'aa', 'admin@admin.com');
INSERT INTO `comments` VALUES ('20', '0', 'sdfsdf', '999', '2016-07-21 12:06:35', '2016-07-21 12:06:35', null, 's', 'admin@admin.com');
INSERT INTO `comments` VALUES ('21', '0', '11222', '999', '2016-07-21 12:08:09', '2016-07-21 12:08:09', null, '俊良', 'xanigm@gmail.com');

-- ----------------------------
-- Table structure for images
-- ----------------------------
DROP TABLE IF EXISTS `images`;
CREATE TABLE `images` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `original_name` varchar(255) NOT NULL,
  `filename` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of images
-- ----------------------------
INSERT INTO `images` VALUES ('8', '1.jpg', '1', '2016-03-11 05:20:09', '2016-03-11 05:20:09');
INSERT INTO `images` VALUES ('4', '1.jpg', '1', '2016-03-11 03:41:12', '2016-03-11 03:41:12');
INSERT INTO `images` VALUES ('5', '1.jpg', '1', '2016-03-11 03:55:58', '2016-03-11 03:55:58');
INSERT INTO `images` VALUES ('6', '1.jpg', '1', '2016-03-11 05:15:52', '2016-03-11 05:15:52');
INSERT INTO `images` VALUES ('7', '1.jpg', '1-2edac', '2016-03-11 05:15:57', '2016-03-11 05:15:57');
INSERT INTO `images` VALUES ('10', '1.jpg', '1-0bb82', '2016-03-11 05:20:57', '2016-03-11 05:20:57');
INSERT INTO `images` VALUES ('11', '1.jpg', '1-70484', '2016-03-11 05:21:24', '2016-03-11 05:21:24');
INSERT INTO `images` VALUES ('12', '1.jpg', '1-23fda', '2016-03-11 05:21:39', '2016-03-11 05:21:39');
INSERT INTO `images` VALUES ('13', '1.jpg', '1-9c935', '2016-03-11 05:22:19', '2016-03-11 05:22:19');
INSERT INTO `images` VALUES ('14', '1.jpg', '1-8b4d7', '2016-03-11 05:23:17', '2016-03-11 05:23:17');
INSERT INTO `images` VALUES ('24', '4.jpg', '4', '2016-07-12 17:11:39', '2016-07-12 17:11:39');

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of links
-- ----------------------------
INSERT INTO `links` VALUES ('50', '163', '2016-03-24 02:37:30', '2016-07-13 14:22:18', null, 'http://www.163.com', null);
INSERT INTO `links` VALUES ('51', '1', '2016-03-24 02:51:28', '2016-03-24 02:56:34', '2016-03-24 02:56:34', '1', 'uploads/2016-03-24/60ae83f1c1a77cd1c4abf49f2e747e114a1f1520.png');
INSERT INTO `links` VALUES ('52', '百度', '2016-07-06 07:11:12', '2016-07-13 14:22:04', null, 'http://www.baidu.com', null);

-- ----------------------------
-- Table structure for migrations
-- ----------------------------
DROP TABLE IF EXISTS `migrations`;
CREATE TABLE `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of migrations
-- ----------------------------
INSERT INTO `migrations` VALUES ('2014_10_12_000000_create_users_table', '1');
INSERT INTO `migrations` VALUES ('2014_10_12_100000_create_password_resets_table', '1');
INSERT INTO `migrations` VALUES ('2016_01_18_071439_create_admin_users', '1');
INSERT INTO `migrations` VALUES ('2016_01_18_071720_create_admin_password_resets_table', '1');
INSERT INTO `migrations` VALUES ('2016_01_23_031442_entrust_base', '1');
INSERT INTO `migrations` VALUES ('2016_01_23_031518_entrust_pivot_admin_user_role', '1');

-- ----------------------------
-- Table structure for note_tag
-- ----------------------------
DROP TABLE IF EXISTS `note_tag`;
CREATE TABLE `note_tag` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `tag_id` int(10) NOT NULL COMMENT '标签ID',
  `note_id` int(10) NOT NULL COMMENT '文章ID',
  PRIMARY KEY (`id`),
  KEY `tag_id` (`tag_id`),
  KEY `article_id` (`note_id`)
) ENGINE=MyISAM AUTO_INCREMENT=115 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='文章和标签映射表';

-- ----------------------------
-- Records of note_tag
-- ----------------------------
INSERT INTO `note_tag` VALUES ('1', '5', '1');
INSERT INTO `note_tag` VALUES ('2', '8', '1');
INSERT INTO `note_tag` VALUES ('3', '9', '1');
INSERT INTO `note_tag` VALUES ('4', '5', '2');
INSERT INTO `note_tag` VALUES ('5', '21', '2');
INSERT INTO `note_tag` VALUES ('6', '22', '2');
INSERT INTO `note_tag` VALUES ('7', '8', '3');
INSERT INTO `note_tag` VALUES ('8', '9', '3');
INSERT INTO `note_tag` VALUES ('9', '18', '3');
INSERT INTO `note_tag` VALUES ('10', '5', '4');
INSERT INTO `note_tag` VALUES ('11', '21', '4');
INSERT INTO `note_tag` VALUES ('12', '22', '4');
INSERT INTO `note_tag` VALUES ('13', '23', '4');
INSERT INTO `note_tag` VALUES ('14', '5', '5');
INSERT INTO `note_tag` VALUES ('15', '21', '5');
INSERT INTO `note_tag` VALUES ('16', '22', '5');
INSERT INTO `note_tag` VALUES ('17', '5', '6');
INSERT INTO `note_tag` VALUES ('18', '21', '6');
INSERT INTO `note_tag` VALUES ('19', '22', '6');
INSERT INTO `note_tag` VALUES ('20', '24', '6');
INSERT INTO `note_tag` VALUES ('21', '5', '7');
INSERT INTO `note_tag` VALUES ('22', '10', '7');
INSERT INTO `note_tag` VALUES ('23', '21', '7');
INSERT INTO `note_tag` VALUES ('24', '22', '7');
INSERT INTO `note_tag` VALUES ('25', '5', '8');
INSERT INTO `note_tag` VALUES ('26', '21', '8');
INSERT INTO `note_tag` VALUES ('27', '22', '8');
INSERT INTO `note_tag` VALUES ('28', '5', '9');
INSERT INTO `note_tag` VALUES ('29', '21', '9');
INSERT INTO `note_tag` VALUES ('30', '22', '9');
INSERT INTO `note_tag` VALUES ('31', '25', '9');
INSERT INTO `note_tag` VALUES ('32', '5', '10');
INSERT INTO `note_tag` VALUES ('33', '26', '10');
INSERT INTO `note_tag` VALUES ('34', '27', '10');
INSERT INTO `note_tag` VALUES ('35', '5', '11');
INSERT INTO `note_tag` VALUES ('36', '21', '11');
INSERT INTO `note_tag` VALUES ('37', '22', '11');
INSERT INTO `note_tag` VALUES ('38', '24', '11');
INSERT INTO `note_tag` VALUES ('39', '28', '11');
INSERT INTO `note_tag` VALUES ('40', '29', '11');
INSERT INTO `note_tag` VALUES ('41', '1', '12');
INSERT INTO `note_tag` VALUES ('42', '5', '12');
INSERT INTO `note_tag` VALUES ('43', '10', '12');
INSERT INTO `note_tag` VALUES ('44', '5', '13');
INSERT INTO `note_tag` VALUES ('45', '21', '13');
INSERT INTO `note_tag` VALUES ('46', '22', '13');
INSERT INTO `note_tag` VALUES ('47', '26', '13');
INSERT INTO `note_tag` VALUES ('48', '5', '14');
INSERT INTO `note_tag` VALUES ('49', '21', '14');
INSERT INTO `note_tag` VALUES ('50', '22', '14');
INSERT INTO `note_tag` VALUES ('51', '5', '15');
INSERT INTO `note_tag` VALUES ('52', '21', '15');
INSERT INTO `note_tag` VALUES ('53', '22', '15');
INSERT INTO `note_tag` VALUES ('54', '24', '15');
INSERT INTO `note_tag` VALUES ('55', '26', '15');
INSERT INTO `note_tag` VALUES ('56', '5', '16');
INSERT INTO `note_tag` VALUES ('57', '21', '16');
INSERT INTO `note_tag` VALUES ('58', '22', '16');
INSERT INTO `note_tag` VALUES ('59', '5', '17');
INSERT INTO `note_tag` VALUES ('60', '21', '17');
INSERT INTO `note_tag` VALUES ('61', '22', '17');
INSERT INTO `note_tag` VALUES ('62', '23', '17');
INSERT INTO `note_tag` VALUES ('63', '24', '17');
INSERT INTO `note_tag` VALUES ('64', '25', '17');
INSERT INTO `note_tag` VALUES ('65', '5', '18');
INSERT INTO `note_tag` VALUES ('66', '30', '18');
INSERT INTO `note_tag` VALUES ('67', '5', '19');
INSERT INTO `note_tag` VALUES ('68', '21', '19');
INSERT INTO `note_tag` VALUES ('69', '22', '19');
INSERT INTO `note_tag` VALUES ('70', '31', '19');
INSERT INTO `note_tag` VALUES ('71', '5', '20');
INSERT INTO `note_tag` VALUES ('72', '21', '20');
INSERT INTO `note_tag` VALUES ('73', '22', '20');
INSERT INTO `note_tag` VALUES ('74', '24', '20');
INSERT INTO `note_tag` VALUES ('75', '5', '21');
INSERT INTO `note_tag` VALUES ('76', '21', '21');
INSERT INTO `note_tag` VALUES ('77', '22', '21');
INSERT INTO `note_tag` VALUES ('78', '5', '22');
INSERT INTO `note_tag` VALUES ('79', '21', '22');
INSERT INTO `note_tag` VALUES ('80', '22', '22');
INSERT INTO `note_tag` VALUES ('81', '5', '23');
INSERT INTO `note_tag` VALUES ('82', '21', '23');
INSERT INTO `note_tag` VALUES ('83', '22', '23');
INSERT INTO `note_tag` VALUES ('84', '23', '23');
INSERT INTO `note_tag` VALUES ('85', '35', '23');
INSERT INTO `note_tag` VALUES ('86', '5', '24');
INSERT INTO `note_tag` VALUES ('87', '21', '24');
INSERT INTO `note_tag` VALUES ('88', '22', '24');
INSERT INTO `note_tag` VALUES ('89', '10', '25');
INSERT INTO `note_tag` VALUES ('90', '5', '26');
INSERT INTO `note_tag` VALUES ('91', '21', '26');
INSERT INTO `note_tag` VALUES ('92', '22', '26');
INSERT INTO `note_tag` VALUES ('93', '5', '27');
INSERT INTO `note_tag` VALUES ('94', '21', '27');
INSERT INTO `note_tag` VALUES ('95', '22', '27');
INSERT INTO `note_tag` VALUES ('96', '5', '30');
INSERT INTO `note_tag` VALUES ('97', '36', '30');
INSERT INTO `note_tag` VALUES ('98', '5', '31');
INSERT INTO `note_tag` VALUES ('99', '37', '31');
INSERT INTO `note_tag` VALUES ('100', '5', '32');
INSERT INTO `note_tag` VALUES ('101', '12', '32');
INSERT INTO `note_tag` VALUES ('102', '38', '32');
INSERT INTO `note_tag` VALUES ('103', '5', '33');
INSERT INTO `note_tag` VALUES ('104', '21', '33');
INSERT INTO `note_tag` VALUES ('105', '22', '33');
INSERT INTO `note_tag` VALUES ('106', '27', '33');
INSERT INTO `note_tag` VALUES ('107', '5', '34');
INSERT INTO `note_tag` VALUES ('108', '21', '34');
INSERT INTO `note_tag` VALUES ('109', '22', '34');
INSERT INTO `note_tag` VALUES ('110', '24', '34');
INSERT INTO `note_tag` VALUES ('111', '5', '35');
INSERT INTO `note_tag` VALUES ('112', '36', '35');
INSERT INTO `note_tag` VALUES ('113', '5', '36');
INSERT INTO `note_tag` VALUES ('114', '36', '36');

-- ----------------------------
-- Table structure for notes
-- ----------------------------
DROP TABLE IF EXISTS `notes`;
CREATE TABLE `notes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(80) COLLATE utf8_unicode_ci NOT NULL COMMENT '标题',
  `thumbnail` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '缩略图',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `slug` varchar(60) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '网址缩略名',
  `summary` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `user_id` int(12) DEFAULT NULL COMMENT '文章编辑用户id',
  `category_id` int(10) NOT NULL COMMENT '文章分类id',
  `deleted_at` datetime DEFAULT NULL COMMENT '被软删除时间',
  `created_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `updated_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '修改更新时间',
  `images` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `title` (`title`)
) ENGINE=MyISAM AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='内容数据（文章/单页）表';

-- ----------------------------
-- Records of notes
-- ----------------------------
INSERT INTO `notes` VALUES ('1', 'ubuntu php环境 fileinfo扩展安装', null, '<pre>\r\n<code class=\"language-perl\">//打开php安装包找到fileinfo组件\r\ncd /root/lnmp/php/ext/fileinfo\r\n//执行 phpize\r\n/usr/local/php/bin/phpize\r\n//编译\r\n./configure –with-php-config=/usr/local/php/bin/php-config\r\n//安装\r\nmake &amp;&amp; make install\r\n//修改php配置文件\r\nvim /usr/local/php/etc/php.ini\r\n//修改php.ini配置\r\nextension = fileinfo.so\r\n//然后重启</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '3', null, '2016-07-06 07:06:35', '2016-07-06 07:06:35', null);
INSERT INTO `notes` VALUES ('2', 'PHP数组转成XML', null, '<pre>\r\n<code class=\"language-php\">\r\nclass ArrayToXML\r\n{\r\n    /**\r\n     * The main function for converting to an XML document.\r\n     * Pass in a multi dimensional array and this recrusively loops through and builds up an XML document.\r\n     *\r\n     * @param array $data\r\n     * @param string $rootNodeName - what you want the root node to be - defaultsto data.\r\n     * @param SimpleXMLElement $xml - should only be used recursively\r\n     * @return string XML\r\n     */\r\n    public static function toXml($data, $rootNodeName = \'data\', $xml = null)\r\n    {\r\n        // turn off compatibility mode as simple xml throws a wobbly if you don\'t.\r\n        if (ini_get(\'zend.ze1_compatibility_mode\') == 1) \r\n        {\r\n            ini_set(\'zend.ze1_compatibility_mode\', 0);\r\n        }\r\n        if ($xml == null) \r\n        {\r\n            $xml = simplexml_load_string(\"<?xml version=\'1.0\' encoding=\'utf-8\'?-->&lt;$rootNodeName /&gt;&quot;);\r\n        }\r\n        // loop through the data passed in.\r\n        foreach ($data as $key =&gt; $value) \r\n        {\r\n            // no numeric keys in our xml please!\r\n            if (is_numeric($key)) \r\n            {\r\n                // make string key...\r\n                $key = &quot;unknownNode_&quot; . (string)$key;\r\n            }\r\n            // replace anything not alpha numeric\r\n            $key = preg_replace(&#39;/[^a-z]/i&#39;, &#39;&#39;, $key);\r\n            // if there is another array found recrusively call this function\r\n            if (is_array($value)) \r\n            {\r\n                $node = $xml-&gt;addChild($key);\r\n                // recrusive call.\r\n                ArrayToXML::toXml($value, $rootNodeName, $node);\r\n            } \r\n            else \r\n            {\r\n                // add single node.\r\n                $value = htmlentities($value);\r\n                $xml-&gt;addChild($key, $value);\r\n            }\r\n        }\r\n        // pass back as string. or simple xml object if you want!\r\n        return $xml-&gt;asXML();\r\n    }\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-06 08:26:43', '2016-07-07 02:58:29', null);
INSERT INTO `notes` VALUES ('3', 'ubuntu lnmp laravel nginx 配置', null, '<pre>\r\n<code class=\"language-apache\">server\r\n{\r\n    //laravel  public目录\r\n    root /home/wwwroot/cms/public;\r\n	location /\r\n    {\r\n        try_files $uri $uri/ /index.php?$query_string;\r\n	}\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '3', null, '2016-07-06 08:35:13', '2016-07-06 08:35:13', null);
INSERT INTO `notes` VALUES ('4', 'php 创建文件 写入json格式', null, '<pre>\r\n<code class=\"language-php\">\r\n$json_string = file_get_contents(\'json/index_bean.json\');\r\n$data = json_decode($json_string, true);\r\nif($data)\r\n{\r\n    var_dump($data);\r\n}\r\nelse\r\n{\r\n    $data=array(\r\n        \'1\'=--&gt;\'2016-06-28\',\r\n        \'2\'=&gt;\'2016-06-29\',\r\n        \'3\'=&gt;\'2016-06-30\',\r\n        \'4\'=&gt;\'2016-07-01\',\r\n        \'5\'=&gt;\'2016-07-02\',\r\n        \'6\'=&gt;\'2016-07-03\',\r\n        \'7\'=&gt;\'2016-07-04\',\r\n        \'8\'=&gt;\'2016-07-05\',\r\n        \'9\'=&gt;\'2016-07-06\',\r\n    );\r\n    file_put_contents(\'json/index_bean.json\',json_encode($data));\r\n    $json_string = file_get_contents(\'json/index_bean.json\');\r\n    $data = json_decode($json_string, true);\r\n    if($data)\r\n    {\r\n        var_dump($data);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-06 08:51:28', '2016-07-08 17:54:00', null);
INSERT INTO `notes` VALUES ('5', 'php 中文名字转拼音', null, '<pre>\r\n<code class=\"language-php\">\r\nclass name2py\r\n{\r\n    //复姓   参考: http://baike.baidu.com/subview/13724/9433028.htm\r\n    public static $_compoundSurname = array(\'百里\',\'北堂\',\'北野\',\'辟闾\',\'淳于\',\'成公\',\'陈生\',\'成功\',\'端木\',\'东方\',\'东郭\',\'东野\',\'东门\',\'第二\',\'第五\',\r\n        \'大狐\',\'段干\',\'段阳\',\'公孙\',\'公冶\',\'公羊\',\'公良\',\'公西\',\'公孟\',\'高堂\',\'高阳\',\'公析\',\'公肩\',\'公坚\',\'郭公\',\'谷梁\',\'毌将\',\'皇甫\',\'黄龙\',\'夹谷\',\'九方\',\r\n        \'丌官\',\'梁丘\',\'闾丘\',\'洛阳\',\'陵尹\',\'冷富\',\'梁丘\',\'龙丘\',\'令狐\',\'南宫\',\'南郭\',\'女娲南伯\',\'南容\',\'欧阳\',\'欧侯\',\'濮阳\',\'青阳\',\'漆雕\',\'亓官\',\'渠丘\',\'壤驷\',\r\n        \'上官\',\'少室\',\'少叔\',\'司徒\',\'司马\',\'司空\',\'司寇\',\'士孙\',\'申屠\',\'申徒\',\'申鲜\',\'夙沙\',\'叔先\',\'叔仲\',\'侍其\',\'澹台\',\'太史\',\'太叔\',\'太公\',\'屠岸\',\'唐古\',\r\n        \'闻人\',\'巫马\',\'微生\',\'王孙\',\'吾丘\',\'无庸\',\'夏侯\',\'西门\',\'信平\',\'鲜于\',\'轩辕\',\'相里\',\'新垣\',\'乐正\',\'尉迟\',\'羊舌\',\'羊角\',\'延陵\',\'於陵\',\'伊祁\',\'诸葛\',\'颛孙\',\r\n        \'仲孙\',\'仲长\',\'钟离\',\'宗政\',\'主父\',\'中叔\',\'左人\',\'左丘\',\'宰父\',\'长儿\',\'长孙\',\'万俟\');\r\n    //多音字的姓氏\r\n    public static $_polyphone = array(\'chong\'=-->&#39;重&#39;,&#39;ou&#39;=&gt;&#39;区&#39;,&#39;qiu&#39;=&gt;&#39;仇&#39;,&#39;bi&#39;=&gt;&#39;秘&#39;,&#39;xian&#39;=&gt;&#39;冼&#39;,&#39;xie&#39;=&gt;&#39;解&#39;,&#39;she&#39;=&gt;&#39;折&#39;,&#39;shan&#39;=&gt;&#39;单&#39;,\r\n        &#39;piao&#39;=&gt;&#39;朴&#39;,&#39;zha&#39;=&gt;&#39;翟&#39;,&#39;zha&#39;=&gt;&#39;查&#39;,&#39;zeng&#39;=&gt;&#39;曾&#39;,&#39;miao&#39;=&gt;&#39;缪&#39;,&#39;ge&#39;=&gt;&#39;盖&#39;,&#39;po&#39;=&gt;&#39;繁&#39;,&#39;yao&#39;=&gt;&#39;幺&#39;,&#39;mo qi&#39;=&gt;&#39;万俟&#39;,&#39;yu chi&#39;=&gt;&#39;尉迟&#39;,\r\n        &#39;zhang sun&#39;=&gt;&#39;长孙&#39;,&#39;tan tai&#39;=&gt;&#39;澹台&#39;);\r\n    public function pinyin($fullname)\r\n    {\r\n        $subject = &#39;Any-Latin; Latin-ASCII; NFD; [:Nonspacing Mark:] Remove; NFC;&#39;;\r\n        $nameLength = mb_strlen($fullname,&#39;utf-8&#39;);\r\n        $lastName = &#39;&#39;; //姓氏\r\n        $firstName = &#39;&#39;; //名字\r\n        //《姓名登记条例(初稿)》规定: 姓名用字应当在2个汉字以上、6个汉字以下\r\n        if($nameLength &gt; 2)\r\n        {\r\n            $preTwoWords = mb_substr($fullname, 0, 2, &#39;utf-8&#39;);//取命名的前两个字,看是否在复姓数组中\r\n            if( in_array( $preTwoWords, name2py::$_compoundSurname ) )\r\n            {\r\n                $lastname = $preTwoWords;\r\n                $firstname = mb_substr($fullname, 2, 4, &#39;utf-8&#39;);\r\n            }\r\n            else\r\n            {\r\n                $lastname = mb_substr($fullname, 0, 1, &#39;utf-8&#39;);\r\n                $firstname = mb_substr($fullname, 1, 5, &#39;utf-8&#39;);\r\n            }\r\n        }\r\n        else if($nameLength == 2)\r\n        {\r\n            //全名只有两个字时,以前一个为姓,后一下为名\r\n            $lastname = mb_substr($fullname ,0, 1, &#39;utf-8&#39;);\r\n            $firstname = mb_substr($fullname, 1, 5, &#39;utf-8&#39;);\r\n        }\r\n        else\r\n        {\r\n            return array();\r\n        }\r\n        // PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0\r\n        $result = array_search( $lastname, name2py::$_polyphone );\r\n        if( $result )\r\n        {\r\n            $lastname2py = $result;\r\n        }\r\n        else\r\n        {\r\n            $lastname2py = transliterator_transliterate( $subject, $lastname );\r\n        }\r\n        $firstName2py = transliterator_transliterate( $subject, $firstname );\r\n        $accountName = preg_replace( &quot;/\\s/&quot;,&quot;&quot;,$firstName2py.&#39;.&#39;.$lastname2py );\r\n        return array(&#39;lastname&#39;=&gt; $lastname2py, &#39;firstname&#39;=&gt; $firstName2py, &#39;accountName&#39; =&gt; $accountName);\r\n    }\r\n    //判断是否为汉字\r\n    private function isChinese($char)\r\n    {\r\n        if( preg_match(&#39;/^[\\x{4e00}-\\x{9fa5}]+$/u&#39;,$char) )\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}</code></pre>', null, null, '1', '6', null, '2016-07-07 02:13:19', '2016-02-07 02:58:02', null);
INSERT INTO `notes` VALUES ('6', 'php 输出xls的头信息', null, '<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * 注：使用此函数前后都不应有任何数据输出\r\n * @param $data Array 下载的数据\r\n * @param $file_name String 下载的文件名\r\n */\r\nfunction outputXlsHeader($data,$file_name = \'export\')\r\n{\r\n    header(\'Content-Type: text/xls\');\r\n    header ( \"Content-type:application/vnd.ms-excel;charset=utf-8\" );\r\n    $str = mb_convert_encoding($file_name, \'gbk\', \'utf-8\');\r\n    header(\'Content-Disposition: attachment;filename=\"\' .$str . \'.xls\"\');\r\n    header(\'Cache-Control:must-revalidate,post-check=0,pre-check=0\');\r\n    header(\'Expires:0\');\r\n    header(\'Pragma:public\');\r\n    $table_data = \'\';\r\n    foreach ($data as $line)\r\n    {\r\n        $table_data .= \'\';\r\n        foreach ($line as $key =&gt; &amp;$item)\r\n        {\r\n            $item = mb_convert_encoding($item, \'gbk\', \'utf-8\');\r\n            $table_data .= \'\' . $item . \'\';\r\n        }\r\n        $table_data .= \'\';\r\n    }\r\n    $table_data .=\'\';\r\n    echo $table_data;\r\n    die();\r\n}\r\n</code></pre>\r\n', null, null, '1', '6', null, '2016-07-07 02:15:57', '2016-07-07 02:57:11', null);
INSERT INTO `notes` VALUES ('7', 'php 生成mysql数据字典', null, '<pre>\r\n<code class=\"language-php\">&lt;?php\r\nheader(\"Content-type: text/html; charset=utf-8\");\r\n// 配置数据库\r\n$dbserver = \"localhost\";\r\n$dbusername = \"root\";\r\n$dbpassword = \"root\";\r\n$database = \"houser\";\r\n// 其他配置\r\n$title = \'数据字典\';\r\n$mysql_conn = @mysql_connect(\"$dbserver\", \"$dbusername\", \"$dbpassword\") or die (\"Mysql connect is error.\");\r\nmysql_select_db($database, $mysql_conn);\r\nmysql_query(\'SET NAMES utf8\', $mysql_conn);\r\n$table_result = mysql_query(\'show tables\', $mysql_conn);\r\n// 取得所有的表名\r\nwhile ($row = mysql_fetch_array($table_result))\r\n{\r\n    $tables [] [\'TABLE_NAME\'] = $row [0];\r\n}\r\n// 循环取得所有表的备注及表中列消息\r\nforeach ($tables as $k =&gt; $v)\r\n{\r\n    $sql = \'SELECT * FROM \';\r\n    $sql .= \'INFORMATION_SCHEMA.TABLES \';\r\n    $sql .= \'WHERE \';\r\n    $sql .= \"table_name = \'{$v[\'TABLE_NAME\']}\'  AND table_schema = \'{$database}\'\";\r\n    $table_result = mysql_query($sql, $mysql_conn);\r\n    while ($t = mysql_fetch_array($table_result))\r\n    {\r\n        $tables [$k] [\'TABLE_COMMENT\'] = $t [\'TABLE_COMMENT\'];\r\n    }\r\n    $sql = \'SELECT * FROM \';\r\n    $sql .= \'INFORMATION_SCHEMA.COLUMNS \';\r\n    $sql .= \'WHERE \';\r\n    $sql .= \"table_name = \'{$v[\'TABLE_NAME\']}\' AND table_schema = \'{$database}\'\";\r\n    $fields = array();\r\n    $field_result = mysql_query($sql, $mysql_conn);\r\n    while ($t = mysql_fetch_array($field_result))\r\n    {\r\n        $fields [] = $t;\r\n    }\r\n    $tables [$k] [\'COLUMN\'] = $fields;\r\n}\r\nmysql_close($mysql_conn);\r\n$html = \'\';\r\n// 循环所有表\r\nforeach ($tables as $k =&gt; $v)\r\n{\r\n    //$html .= \'&lt;p&gt;&lt;h2&gt;\'. $v[\'TABLE_COMMENT\'] . \'&amp;nbsp;&lt;/h2&gt;\';\r\n    $html .= \'&lt;table  border=\"1\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\"&gt;\';\r\n    $html .= \'&lt;caption&gt;\' . $v [\'TABLE_NAME\'] . \'  \' . $v [\'TABLE_COMMENT\'] . \'&lt;/caption&gt;\';\r\n    $html .= \'&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;字段名&lt;/th&gt;&lt;th&gt;数据类型&lt;/th&gt;&lt;th&gt;默认值&lt;/th&gt;\r\n    &lt;th&gt;允许非空&lt;/th&gt;\r\n    &lt;th&gt;自动递增&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;\';\r\n    $html .= \'\';\r\n    foreach ($v [\'COLUMN\'] as $f)\r\n    {\r\n        $html .= \'&lt;tr&gt;&lt;td class=\"c1\"&gt;\' . $f [\'COLUMN_NAME\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c2\"&gt;\' . $f [\'COLUMN_TYPE\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c3\"&gt;&amp;nbsp;\' . $f [\'COLUMN_DEFAULT\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c4\"&gt;&amp;nbsp;\' . $f [\'IS_NULLABLE\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c5\"&gt;\' . ($f [\'EXTRA\'] == \'auto_increment\' ? \'是\' : \'&amp;nbsp;\') . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c6\"&gt;&amp;nbsp;\' . $f [\'COLUMN_COMMENT\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;/tr&gt;\';\r\n    }\r\n    $html .= \'&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;\';\r\n}\r\n// 输出\r\necho \'&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\r\n&lt;title&gt;\' . $title . \'&lt;/title&gt;\r\n&lt;style&gt;\r\nbody,td,th {font-family:\"微软雅黑\"; font-size:12px;}\r\ntable{border-collapse:collapse;border:1px solid #CCC;background:#6089D4;}\r\ntable caption{text-align:left; background-color:#fff; line-height:2em; font-size:14px; font-weight:bold; }\r\ntable th{text-align:left; font-weight:bold;height:26px; line-height:25px; font-size:16px; border:3px solid #fff; color:#ffffff; padding:5px;}\r\ntable td{height:25px; font-size:12px; border:3px solid #fff; background-color:#f0f0f0; padding:5px;}\r\n.c1{ width: 150px;}\r\n.c2{ width: 130px;}\r\n.c3{ width: 70px;}\r\n.c4{ width: 80px;}\r\n.c5{ width: 80px;}\r\n.c6{ width: 300px;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\';\r\necho \'&lt;h1 style=\"text-align:center;\"&gt;\' . $title . \'&lt;/h1&gt;\';\r\necho $html;\r\necho \'&lt;/body&gt;&lt;/html&gt;\';\r\n?&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 02:18:07', '2016-04-07 02:18:07', null);
INSERT INTO `notes` VALUES ('8', 'php 取得汉字首字母', null, '<pre>\r\n<code class=\"language-php\">\r\n//取得汉字首字母\r\n/**\r\n * 修复二分法查找方法\r\n * 汉字拼音首字母工具类\r\n *  注： 英文的字串：不变返回(包括数字)    eg .abc123 =--&gt; abc123\r\n *      中文字符串：返回拼音首字符        eg. 测试字符串 =&gt; CSZFC\r\n *      中英混合串: 返回拼音首字符和英文   eg. 我i我j =&gt; WIWJ\r\n *  //使用方法：\r\n *  $py = new str2PY();\r\n *  $result = $py-&gt;getInitials(\'需要生成首字母的字符串\');\r\n */\r\nclass str2PY\r\n{\r\n    private $_pinyins = array(\r\n        176161 =&gt; \'A\',\r\n        176197 =&gt; \'B\',\r\n        178193 =&gt; \'C\',\r\n        180238 =&gt; \'D\',\r\n        182234 =&gt; \'E\',\r\n        183162 =&gt; \'F\',\r\n        184193 =&gt; \'G\',\r\n        185254 =&gt; \'H\',\r\n        187247 =&gt; \'J\',\r\n        191166 =&gt; \'K\',\r\n        192172 =&gt; \'L\',\r\n        194232 =&gt; \'M\',\r\n        196195 =&gt; \'N\',\r\n        197182 =&gt; \'O\',\r\n        197190 =&gt; \'P\',\r\n        198218 =&gt; \'Q\',\r\n        200187 =&gt; \'R\',\r\n        200246 =&gt; \'S\',\r\n        203250 =&gt; \'T\',\r\n        205218 =&gt; \'W\',\r\n        206244 =&gt; \'X\',\r\n        209185 =&gt; \'Y\',\r\n        212209 =&gt; \'Z\',\r\n    );\r\n    private $_charset = null;\r\n    /**\r\n     * 构造函数, 指定需要的编码 default: utf-8\r\n     * 支持utf-8, gb2312\r\n     *\r\n     * @param unknown_type $charset\r\n     */\r\n    public function __construct($charset = \'utf-8\')\r\n    {\r\n        $this-&gt;_charset = $charset;\r\n    }\r\n    /**\r\n     * 中文字符串 substr\r\n     *\r\n     * @param string $str\r\n     * @param int $start\r\n     * @param int $len\r\n     * @return string\r\n     */\r\n    private function _msubstr($str, $start, $len)\r\n    {\r\n        $start = $start * 2;\r\n        $len = $len * 2;\r\n        $strlen = strlen($str);\r\n        $result = \'\';\r\n        for ($i = 0; $i &lt; $strlen; $i++)\r\n        {\r\n            if ($i &gt;= $start &amp;&amp; $i &lt; ($start + $len))\r\n            {\r\n                if (ord(substr($str, $i, 1)) &gt; 129) $result .= substr($str, $i, 2);\r\n                else $result .= substr($str, $i, 1);\r\n            }\r\n            if (ord(substr($str, $i, 1)) &gt; 129) $i++;\r\n        }\r\n        return $result;\r\n    }\r\n    /**\r\n     * 字符串切分为数组 (汉字或者一个字符为单位)\r\n     *\r\n     * @param string $str\r\n     * @return array\r\n     */\r\n    private function _cutWord($str)\r\n    {\r\n        $words = array();\r\n        while ($str != \"\")\r\n        {\r\n            if ($this-&gt;_isAscii($str))\r\n            {\r\n                /*非中文*/\r\n                $words[] = $str[0];\r\n                $str = substr($str, strlen($str[0]));\r\n            }\r\n            else\r\n            {\r\n                $word = $this-&gt;_msubstr($str, 0, 1);\r\n                $words[] = $word;\r\n                $str = substr($str, strlen($word));\r\n            }\r\n        }\r\n        return $words;\r\n    }\r\n    /**\r\n     * 判断字符是否是ascii字符\r\n     *\r\n     * @param string $char\r\n     * @return bool\r\n     */\r\n    private function _isAscii($char)\r\n    {\r\n        return (ord(substr($char, 0, 1)) &lt; 160);\r\n    }\r\n    /**\r\n     * 判断字符串前3个字符是否是ascii字符\r\n     *\r\n     * @param string $str\r\n     * @return bool\r\n     */\r\n    private function _isAsciis($str)\r\n    {\r\n        $len = strlen($str) &gt;= 3 ? 3 : 2;\r\n        $chars = array();\r\n        for ($i = 1; $i &lt; $len - 1; $i++)\r\n        {\r\n            $chars[] = $this-&gt;_isAscii($str[$i]) ? \'yes\' : \'no\';\r\n        }\r\n        $result = array_count_values($chars);\r\n        if (empty($result[\'no\']))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取中文字串的拼音首字符\r\n     *\r\n     * @param string $str\r\n     * @return string\r\n     */\r\n    public function getInitials($str)\r\n    {\r\n        if (empty($str)) return \'\';\r\n        if ($this-&gt;_isAscii($str[0]) &amp;&amp; $this-&gt;_isAsciis($str))\r\n        {\r\n            return $str;\r\n        }\r\n        $result = array();\r\n        if ($this-&gt;_charset == \'utf-8\')\r\n        {\r\n            $str = iconv(\'utf-8\', \'gb2312\', $str);\r\n        }\r\n        $words = $this-&gt;_cutWord($str);\r\n        foreach ($words as $word)\r\n        {\r\n            if ($this-&gt;_isAscii($word))\r\n            {\r\n                /*非中文*/\r\n                $result[] = $word;\r\n                continue;\r\n            }\r\n            $code = ord(substr($word, 0, 1)) * 1000 + ord(substr($word, 1, 1));\r\n            /*获取拼音首字母A--Z*/\r\n            if (($i = $this-&gt;_search($code)) != -1)\r\n            {\r\n                $result[] = $this-&gt;_pinyins[$i];\r\n            }\r\n        }\r\n        return strtoupper(implode(\'\', $result));\r\n    }\r\n    private function _getChar($ascii)\r\n    {\r\n        if ($ascii &gt;= 48 &amp;&amp; $ascii &lt;= 57)\r\n        {\r\n            return chr($ascii);  /*数字*/\r\n        }\r\n        elseif ($ascii &gt;= 65 &amp;&amp; $ascii &lt;= 90)\r\n        {\r\n            return chr($ascii);   /* A--Z*/\r\n        }\r\n        elseif ($ascii &gt;= 97 &amp;&amp; $ascii &lt;= 122)\r\n        {\r\n            return chr($ascii - 32); /* a--z*/\r\n        }\r\n        else\r\n        {\r\n            return \'-\'; /*其他*/\r\n        }\r\n    }\r\n    /**\r\n     * 查找需要的汉字内码(gb2312) 对应的拼音字符( 二分法 )\r\n     *\r\n     * @param int $code\r\n     * @return int\r\n     */\r\n    private function _search($code)\r\n    {\r\n        $data = array_keys($this-&gt;_pinyins);\r\n        $lower = 0;\r\n        $upper = sizeof($data) - 1;\r\n        $middle = (int)round(($lower + $upper) / 2);\r\n        if ($code &lt; $data[0]) return -1;\r\n        for (; ;)\r\n        {\r\n            if ($lower &gt; $upper)\r\n            {\r\n                return $data[$lower - 1];\r\n            }\r\n            $tmp = (int)round(($lower + $upper) / 2);\r\n            if (!isset($data[$tmp]))\r\n            {\r\n                return $data[$middle];\r\n            }\r\n            else\r\n            {\r\n                $middle = $tmp;\r\n            }\r\n            if ($data[$middle] &lt; $code)\r\n            {\r\n                $lower = (int)$middle + 1;\r\n            }\r\n            else if ($data[$middle] == $code)\r\n            {\r\n                return $data[$middle];\r\n            }\r\n            else\r\n            {\r\n                $upper = (int)$middle - 1;\r\n            }\r\n        }\r\n    }\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-07 02:20:58', '2016-07-07 02:57:33', null);
INSERT INTO `notes` VALUES ('9', 'php 随机生成中国人姓名的类', null, '<pre>\r\n<code class=\"language-php\">Class rndChinaName\r\n{\r\n    private $arrXing, $numbXing;\r\n    private $arrMing, $numbMing;\r\n    function rndChinaName()\r\n    {\r\n        $this-&gt;getXingList();\r\n        $this-&gt;getMingList();\r\n\r\n    }\r\n    /* 获取姓列表 */\r\n    private function getXingList()\r\n    {\r\n        $this-&gt;arrXing = array(\r\n            \'赵\', \'钱\', \'孙\', \'李\', \'周\', \'吴\', \'郑\', \'王\', \'冯\', \'陈\', \'褚\', \'卫\', \'蒋\',\r\n            \'沈\', \'韩\', \'杨\', \'朱\', \'秦\', \'尤\', \'许\', \'何\', \'吕\', \'施\', \'张\', \'孔\', \'曹\', \'严\', \'华\', \'金\', \'魏\',\r\n            \'陶\', \'姜\', \'戚\', \'谢\', \'邹\', \'喻\', \'柏\', \'水\', \'窦\', \'章\', \'云\', \'苏\', \'潘\', \'葛\', \'奚\', \'范\', \'彭\',\r\n            \'郎\', \'鲁\', \'韦\', \'昌\', \'马\', \'苗\', \'凤\', \'花\', \'方\', \'任\', \'袁\', \'柳\', \'鲍\', \'史\', \'唐\', \'费\', \'薛\',\r\n            \'雷\', \'贺\', \'倪\', \'汤\', \'滕\', \'殷\', \'罗\', \'毕\', \'郝\', \'安\', \'常\', \'傅\', \'卞\', \'齐\', \'元\', \'顾\', \'孟\',\r\n            \'平\', \'黄\', \'穆\', \'萧\', \'尹\', \'姚\', \'邵\', \'湛\', \'汪\', \'祁\', \'毛\', \'狄\', \'米\', \'伏\', \'成\', \'戴\', \'谈\',\r\n            \'宋\', \'茅\', \'庞\', \'熊\', \'纪\', \'舒\', \'屈\', \'项\', \'祝\', \'董\', \'梁\', \'杜\', \'阮\', \'蓝\', \'闵\', \'季\', \'贾\',\r\n            \'路\', \'娄\', \'江\', \'童\', \'颜\', \'郭\', \'梅\', \'盛\', \'林\', \'钟\', \'徐\', \'邱\', \'骆\', \'高\', \'夏\', \'蔡\', \'田\',\r\n            \'樊\', \'胡\', \'凌\', \'霍\', \'虞\', \'万\', \'支\', \'柯\', \'管\', \'卢\', \'莫\', \'柯\', \'房\', \'裘\', \'缪\', \'解\', \'应\',\r\n            \'宗\', \'丁\', \'宣\', \'邓\', \'单\', \'杭\', \'洪\', \'包\', \'诸\', \'左\', \'石\', \'崔\', \'吉\', \'龚\', \'程\', \'嵇\', \'邢\',\r\n            \'裴\', \'陆\', \'荣\', \'翁\', \'荀\', \'于\', \'惠\', \'甄\', \'曲\', \'封\', \'储\', \'仲\', \'伊\', \'宁\', \'仇\', \'甘\', \'武\',\r\n            \'符\', \'刘\', \'景\', \'詹\', \'龙\', \'叶\', \'幸\', \'司\', \'黎\', \'溥\', \'印\', \'怀\', \'蒲\', \'邰\', \'从\', \'索\', \'赖\',\r\n            \'卓\', \'屠\', \'池\', \'乔\', \'胥\', \'闻\', \'莘\', \'党\', \'翟\', \'谭\', \'贡\', \'劳\', \'逄\', \'姬\', \'申\', \'扶\', \'堵\',\r\n            \'冉\', \'宰\', \'雍\', \'桑\', \'寿\', \'通\', \'燕\', \'浦\', \'尚\', \'农\', \'温\', \'别\', \'庄\', \'晏\', \'柴\', \'瞿\', \'阎\',\r\n            \'连\', \'习\', \'容\', \'向\', \'古\', \'易\', \'廖\', \'庾\', \'终\', \'步\', \'都\', \'耿\', \'满\', \'弘\', \'匡\', \'国\', \'文\',\r\n            \'寇\', \'广\', \'禄\', \'阙\', \'东\', \'欧\', \'利\', \'师\', \'巩\', \'聂\', \'关\', \'荆\', \'司马\', \'上官\', \'欧阳\', \'夏侯\',\r\n            \'诸葛\', \'闻人\', \'东方\', \'赫连\', \'皇甫\', \'尉迟\', \'公羊\', \'澹台\', \'公冶\', \'宗政\', \'濮阳\', \'淳于\', \'单于\',\r\n            \'太叔\', \'申屠\', \'公孙\', \'仲孙\', \'轩辕\', \'令狐\', \'徐离\', \'宇文\', \'长孙\', \'慕容\', \'司徒\', \'司空\');\r\n        //姓总数\r\n        $this-&gt;numbXing = count($this-&gt;arrXing);\r\n    }\r\n    /* 获取名列表 */\r\n    private function getMingList()\r\n    {\r\n        $this-&gt;arrMing = array(\r\n            \'伟\', \'刚\', \'勇\', \'毅\', \'俊\', \'峰\', \'强\', \'军\', \'平\', \'保\', \'东\', \'文\', \'辉\', \'力\', \'明\', \'永\', \'健\', \'世\', \'广\', \'志\', \'义\',\r\n            \'兴\', \'良\', \'海\', \'山\', \'仁\', \'波\', \'宁\', \'贵\', \'福\', \'生\', \'龙\', \'元\', \'全\', \'国\', \'胜\', \'学\', \'祥\', \'才\', \'发\', \'武\', \'新\',\r\n            \'利\', \'清\', \'飞\', \'彬\', \'富\', \'顺\', \'信\', \'子\', \'杰\', \'涛\', \'昌\', \'成\', \'康\', \'星\', \'光\', \'天\', \'达\', \'安\', \'岩\', \'中\', \'茂\',\r\n            \'进\', \'林\', \'有\', \'坚\', \'和\', \'彪\', \'博\', \'诚\', \'先\', \'敬\', \'震\', \'振\', \'壮\', \'会\', \'思\', \'群\', \'豪\', \'心\', \'邦\', \'承\', \'乐\',\r\n            \'绍\', \'功\', \'松\', \'善\', \'厚\', \'庆\', \'磊\', \'民\', \'友\', \'裕\', \'河\', \'哲\', \'江\', \'超\', \'浩\', \'亮\', \'政\', \'谦\', \'亨\', \'奇\', \'固\',\r\n            \'之\', \'轮\', \'翰\', \'朗\', \'伯\', \'宏\', \'言\', \'若\', \'鸣\', \'朋\', \'斌\', \'梁\', \'栋\', \'维\', \'启\', \'克\', \'伦\', \'翔\', \'旭\', \'鹏\', \'泽\',\r\n            \'晨\', \'辰\', \'士\', \'以\', \'建\', \'家\', \'致\', \'树\', \'炎\', \'德\', \'行\', \'时\', \'泰\', \'盛\', \'雄\', \'琛\', \'钧\', \'冠\', \'策\', \'腾\', \'楠\',\r\n            \'榕\', \'风\', \'航\', \'弘\', \'秀\', \'娟\', \'英\', \'华\', \'慧\', \'巧\', \'美\', \'娜\', \'静\', \'淑\', \'惠\', \'珠\', \'翠\', \'雅\', \'芝\', \'玉\', \'萍\',\r\n            \'红\', \'娥\', \'玲\', \'芬\', \'芳\', \'燕\', \'彩\', \'春\', \'菊\', \'兰\', \'凤\', \'洁\', \'梅\', \'琳\', \'素\', \'云\', \'莲\', \'真\', \'环\', \'雪\', \'荣\',\r\n            \'爱\', \'妹\', \'霞\', \'香\', \'月\', \'莺\', \'媛\', \'艳\', \'瑞\', \'凡\', \'佳\', \'嘉\', \'琼\', \'勤\', \'珍\', \'贞\', \'莉\', \'桂\', \'娣\', \'叶\', \'璧\',\r\n            \'璐\', \'娅\', \'琦\', \'晶\', \'妍\', \'茜\', \'秋\', \'珊\', \'莎\', \'锦\', \'黛\', \'青\', \'倩\', \'婷\', \'姣\', \'婉\', \'娴\', \'瑾\', \'颖\', \'露\', \'瑶\',\r\n            \'怡\', \'婵\', \'雁\', \'蓓\', \'纨\', \'仪\', \'荷\', \'丹\', \'蓉\', \'眉\', \'君\', \'琴\', \'蕊\', \'薇\', \'菁\', \'梦\', \'岚\', \'苑\', \'婕\', \'馨\', \'瑗\',\r\n            \'琰\', \'韵\', \'融\', \'园\', \'艺\', \'咏\', \'卿\', \'聪\', \'澜\', \'纯\', \'毓\', \'悦\', \'昭\', \'冰\', \'爽\', \'琬\', \'茗\', \'羽\', \'希\', \'欣\', \'飘\',\r\n            \'育\', \'滢\', \'馥\', \'筠\', \'柔\', \'竹\', \'霭\', \'凝\', \'晓\', \'欢\', \'霄\', \'枫\', \'芸\', \'菲\', \'寒\', \'伊\', \'亚\', \'宜\', \'可\', \'姬\', \'舒\',\r\n            \'影\', \'荔\', \'枝\', \'丽\', \'阳\', \'妮\', \'宝\', \'贝\', \'初\', \'程\', \'梵\', \'罡\', \'恒\', \'鸿\', \'桦\', \'骅\', \'剑\', \'娇\', \'纪\', \'宽\', \'苛\',\r\n            \'灵\', \'玛\', \'媚\', \'琪\', \'晴\', \'容\', \'睿\', \'烁\', \'堂\', \'唯\', \'威\', \'韦\', \'雯\', \'苇\', \'萱\', \'阅\', \'彦\', \'宇\', \'雨\', \'洋\', \'忠\',\r\n            \'宗\', \'曼\', \'紫\', \'逸\', \'贤\', \'蝶\', \'菡\', \'绿\', \'蓝\', \'儿\', \'翠\', \'烟\', \'小\');\r\n        //名总数\r\n        $this-&gt;numbMing = count($this-&gt;arrMing);\r\n    }\r\n    // 获取姓\r\n    private function getXing()\r\n    {\r\n        return $this-&gt;arrXing[mt_rand(0, $this-&gt;numbXing)];\r\n    }\r\n    // 获取名字\r\n    private function getMing()\r\n    {\r\n        return $this-&gt;arrMing[mt_rand(0, $this-&gt;numbMing)];\r\n    }\r\n    // 获取名字\r\n    public function getName($type = 0)\r\n    {\r\n        $name = \'\';\r\n        switch ($type)\r\n        {\r\n            //2字\r\n            case 1:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing();\r\n                break;\r\n            //随机2、3个字\r\n            case 2:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing();\r\n                if (mt_rand(0, 100) &gt; 50) $name .= $this-&gt;getMing();\r\n                break;\r\n            //只取姓\r\n            case 3:\r\n                $name = $this-&gt;getXing();\r\n                break;\r\n            //只取名\r\n            case 4:\r\n                $name = $this-&gt;getMing();\r\n                break;\r\n            case 0:\r\n            //默认情况 1姓+2名\r\n            default:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing() . $this-&gt;getMing();\r\n        }\r\n        return $name;\r\n    }\r\n}\r\n//调用类，随机生成名字\r\n// index.php\r\nheader(\'Content-type: text/html; charset=utf-8\');\r\n// 引入文件\r\nrequire(\'rndChinaName.class.php\');\r\n$name_obj = new rndChinaName(); \r\n$name = $name_obj-&gt;getName(2);\r\necho $name;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:03:20', '2013-07-07 03:03:20', null);
INSERT INTO `notes` VALUES ('10', 'php 标准4 位验证码的实现', null, '<p>1.展示</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;form&gt;\r\n    验证码：&lt;input type=\"text\" name=\"vcode\"&gt;\r\n    &lt;script type=\"text/javascript\"&gt;\r\n        //生成一个四位数\r\n        var num1 = Math.round(Math.random()*10000000+10000);\r\n        var num = num1.toString().substr(0,4);\r\n        document.write(\"&lt;img name=\'c\' src=\'vcode.php?code=\"+num+\"\'&gt;\");\r\n        //验证码作为图片从vcode.php文件返回\r\n        function recode()\r\n        {\r\n            //看不清换一张验证码的实现函数\r\n            var num1 = Math.round(Math.random()*10000000+10000);\r\n            var num = num1.toString().substr(0,4);\r\n            document.c.src = \"vcode.php?code=\"+num;\r\n        }\r\n    &lt;/script&gt;\r\n    &lt;a href=\"javascript:recode()\" style=\"text-decoration:none;\"&gt;看不清？换一张&lt;/a&gt;\r\n&lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>2.类库</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">//用header()函数发送HTTP头信息给浏览器，告诉输出的图片类型为png\r\nheader(\"Content-type:image/png\");\r\n//创建画布\r\n$im=imagecreate(60,20);\r\n//imageallocate()用于指定分配颜色，而imagefill()用于设置画布背景颜色\r\nimagefill($im,0,0,imagecolorallocate($im,200,200,200));\r\n//从index.php接收数字\r\n$code=$_GET[\'code\'];\r\nfor($i=0;$i&lt;4;$i++)\r\n{\r\n    $color=imagecolorallocate($im,rand(0,100),rand(0,100),rand(0,100));\r\n    //绘制文字\r\n    imagestring($im, rand(3,5),60*$i/4+rand(3,6), rand(0,6), $code[$i], $color);\r\n}\r\nfor($j=0;$j&lt;200;$j++)\r\n{\r\n    //绘制200个不规则像素点\r\n    imagesetpixel($im,rand(0,60),rand(0,20),imagecolorallocate($im,rand(0,255),rand(0,255),rand(0,255)));\r\n}\r\n//输出图像\r\nimagepng($im);\r\n//销毁图像资源\r\nimagedestroy($im);</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:11:52', '2016-07-07 03:11:52', null);
INSERT INTO `notes` VALUES ('11', 'php 高效导出excel csv', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 导出excel(csv)\r\n * @data 导出数据\r\n * @headlist 第一行,列名\r\n * @fileName 输出Excel文件名\r\n */\r\npublic function csv_export($data = array(), $headlist = array(), $fileName)\r\n{\r\n    header(\'Content-Type: application/vnd.ms-excel\');\r\n    header(\'Content-Disposition: attachment;filename=\"\' . $fileName . \'.csv\"\');\r\n    header(\'Cache-Control: max-age=0\');\r\n    //打开PHP文件句柄,php://output 表示直接输出到浏览器\r\n    $fp = fopen(\'php://output\', \'a\');\r\n    //输出Excel列名信息\r\n    foreach ($headlist as $key =&gt; $value)\r\n    {\r\n        //CSV的Excel支持GBK编码，一定要转换，否则乱码\r\n        $headlist[$key] = iconv(\'utf-8\', \'gbk\', $value);\r\n    }\r\n    //将数据通过fputcsv写到文件句柄\r\n    fputcsv($fp, $headlist);\r\n    //计数器\r\n    $num = 0;\r\n    //每隔$limit行，刷新一下输出buffer，不要太大，也不要太小\r\n    $limit = 100000;\r\n    //逐行取出数据，不浪费内存\r\n    $count = count($data);\r\n    for ($i = 0; $i &lt; $count; $i++)\r\n    {\r\n        $num++;\r\n        //刷新一下输出buffer，防止由于数据过多造成问题\r\n        if ($limit == $num)\r\n        {\r\n            ob_flush();\r\n            flush();\r\n            $num = 0;\r\n        }\r\n        $row = $data[$i];\r\n        foreach ($row as $key =&gt; $value)\r\n        {\r\n            $row[$key] = iconv(\'utf-8\', \'gbk\', $value);\r\n        }\r\n        fputcsv($fp, $row);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:33:19', '2015-07-07 03:33:19', null);
INSERT INTO `notes` VALUES ('12', 'php mysql jquery 实现的“顶”和“踩”投票功能', null, '<pre>\r\n<code class=\"language-html\">CREATE TABLE IF NOT EXISTS `votes` ( \r\n  `id` int(10) NOT NULL AUTO_INCREMENT, \r\n  `likes` int(10) NOT NULL DEFAULT \'0\', \r\n  `unlikes` int(10) NOT NULL DEFAULT \'0\', \r\n  PRIMARY KEY (`id`) \r\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8; \r\n  \r\n  \r\nINSERT INTO `votes` (`id`, `likes`, `unlikes`) VALUES \r\n(1, 30, 10); \r\n  \r\nCREATE TABLE IF NOT EXISTS `votes_ip` ( \r\n  `id` int(10) NOT NULL, \r\n  `vid` int(10) NOT NULL, \r\n  `ip` varchar(40) NOT NULL \r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8; \r\n \r\n-------------div--------------------------------------\r\n \r\n&lt;div class=\"digg\"&gt;  \r\n    &lt;div id=\"dig_up\" class=\"digup\"&gt; \r\n        &lt;span id=\"num_up\"&gt;&lt;/span&gt; \r\n        &lt;p&gt;很好，很强大！&lt;/p&gt; \r\n        &lt;div id=\"bar_up\" class=\"bar\"&gt;&lt;span&gt;&lt;/span&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt; \r\n    &lt;/div&gt; \r\n       &lt;div id=\"dig_down\" class=\"digdown\"&gt; \r\n        &lt;span id=\"num_down\"&gt;&lt;/span&gt; \r\n        &lt;p&gt;太差劲了！&lt;/p&gt; \r\n        &lt;div id=\"bar_down\" class=\"bar\"&gt;&lt;span&gt;&lt;/span&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt; \r\n    &lt;/div&gt; \r\n    &lt;div id=\"msg\"&gt;&lt;/div&gt; \r\n&lt;/div&gt; \r\n \r\n \r\n \r\n-------------css--------------------------\r\n.digg{width:420px; height:120px; margin:80px auto 20px auto; position:relative} \r\n#dig_up,#dig_down{width:200px; height:48px; margin:10px; position:relative;  \r\nborder:1px solid #d3d3d3; padding-left:42px; cursor:pointer} \r\n.digup{background:url(diggs.png) no-repeat 4px 2px;} \r\n.digup_on{background:url(diggs.png) no-repeat 4px -49px;} \r\n.digdown{background:url(diggs.png) no-repeat 4px -102px;} \r\n.digdown_on{background:url(diggs.png) no-repeat 4px -154px;} \r\n#num_up,#num_down{position:absolute; right:6px; top:18px; font-size:20px;} \r\n#dig_up p{height:24px; line-height:24px; color:#360} \r\n#dig_down p{height:24px; line-height:24px; color:#f30} \r\n.bar{width:100px; height:12px; line-height:12px; border:1px solid #f0f0f0;  \r\nposition:relative; text-align:center} \r\n.bar span{display:block; height:12px; } \r\n.bar i{position:absolute; top:0; left:104px;} \r\n#bar_up span{background:#360} \r\n#bar_down span{background:#f60} \r\n#msg{position:absolute; right:20px; top:40px; font-size:18px; color:#f00} \r\n \r\n \r\n \r\n-------jquery-------------------------\r\n \r\n$(function(){ \r\n    //鼠标滑向和离开投票按钮时，变换背景样式 \r\n    $(\"#dig_up\").hover(function(){ \r\n        $(this).addClass(\"digup_on\"); \r\n    },function(){ \r\n        $(this).removeClass(\"digup_on\"); \r\n    }); \r\n    $(\"#dig_down\").hover(function(){ \r\n        $(this).addClass(\"digdown_on\"); \r\n    },function(){ \r\n        $(this).removeClass(\"digdown_on\"); \r\n    }); \r\n      \r\n    //初始化数据 \r\n    getdata(\"do.php\",1); \r\n      \r\n    //单击“顶”时 \r\n    $(\"#dig_up\").click(function(){ \r\n        getdata(\"do.php?action=like\",1); \r\n    }); \r\n    //单击“踩”时 \r\n    $(\"#dig_down\").click(function(){ \r\n        getdata(\"do.php?action=unlike\",1); \r\n    }); \r\n}); \r\n \r\n \r\n \r\n---------------------------------------\r\nfunction getdata(url,sid){ \r\n    $.getJSON(url,{id:sid},function(data){ \r\n        if(data.success==1){//投票成功 \r\n            $(\"#num_up\").html(data.like); \r\n            //通过控制宽度来显示百分比进度条效果 \r\n            $(\"#bar_up span\").css(\"width\",data.like_percent); \r\n            $(\"#bar_up i\").html(data.like_percent); \r\n            $(\"#num_down\").html(data.unlike); \r\n            $(\"#bar_down span\").css(\"width\",data.unlike_percent); \r\n            $(\"#bar_down i\").html(data.unlike_percent); \r\n        }else{//投票失败 \r\n            $(\"#msg\").html(data.msg).show().css({\'opacity\':1,\'top\':\'40px\'}) \r\n            .animate({top:\'-50px\',opacity:0}, \"slow\"); \r\n        } \r\n    }); \r\n} \r\n \r\n \r\n---------php--------------------------\r\n \r\ninclude_once(\"connect.php\");//连接数据库 \r\n  \r\n$action = $_GET[\'action\']; \r\n$id = 1; \r\n$ip = get_client_ip();//获取ip \r\n  \r\nif($action==\'like\'){//顶 \r\n    likes(1,$id,$ip); \r\n}elseif($action==\'unlike\'){//踩 \r\n    likes(0,$id,$ip); \r\n}else{ \r\n    echo jsons($id); \r\n} \r\n \r\n------------------------------------\r\nfunction likes($type,$id,$ip){ \r\n    $ip_sql=mysql_query(\"select ip from votes_ip where vid=\'$id\' and ip=\'$ip\'\"); \r\n    $count=mysql_num_rows($ip_sql); \r\n    if($count==0){//还没有顶过 \r\n        if($type==1){//顶 \r\n            $sql = \"update votes set likes=likes+1 where id=\".$id; \r\n        }else{//踩 \r\n            $sql = \"update votes set unlikes=unlikes+1 where id=\".$id; \r\n        } \r\n        mysql_query($sql); \r\n          \r\n        $sql_in = \"insert into votes_ip (vid,ip) values (\'$id\',\'$ip\')\"; \r\n        mysql_query($sql_in); \r\n          \r\n        if(mysql_insert_id()&gt;0){ \r\n            echo jsons($id); \r\n        }else{ \r\n            $arr[\'success\'] = 0; \r\n            $arr[\'msg\'] = \'操作失败，请重试\'; \r\n            echo json_encode($arr); \r\n        } \r\n    }else{ \r\n        $msg = $type==1?\'您已经顶过了\':\'您已经踩过了\'; \r\n        $arr[\'success\'] = 0; \r\n        $arr[\'msg\'] = $msg; \r\n        echo json_encode($arr); \r\n    } \r\n} \r\n \r\n \r\n-----------php-------------------------\r\n \r\n \r\nfunction jsons($id){ \r\n    $query = mysql_query(\"select * from votes where id=\".$id); \r\n    $row = mysql_fetch_array($query); \r\n    $like = $row[\'likes\']; \r\n    $unlike = $row[\'unlikes\']; \r\n    $arr[\'success\']=1; \r\n    $arr[\'like\'] = $like; \r\n    $arr[\'unlike\'] = $unlike; \r\n    $like_percent = round($like/($like+$unlike),3)*100; \r\n    $arr[\'like_percent\'] = $like_percent.\'%\'; \r\n    $arr[\'unlike_percent\'] = (100-$like_percent).\'%\'; \r\n      \r\n    return json_encode($arr); \r\n} </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:46:12', '2016-07-07 03:46:12', null);
INSERT INTO `notes` VALUES ('13', 'php 压缩图片', null, '<pre>\r\n<code class=\"language-php\">public function zip_pic()\r\n{\r\n    //修改php分配的内存\r\n    ini_set(\"memory_limit\",\"256M\"); \r\n    $filename = \'./images/imgp0627.jpg\';\r\n    $percent = 1;\r\n    // 内容类型\r\n    header(\'Content-Type: image/jpeg\');\r\n    // 获取新的尺寸\r\n    list($width, $height) = getimagesize($filename);\r\n    //* $percent;\r\n    $new_width = $width ;\r\n    //* $percent;\r\n    $new_height = $height ;\r\n    // 重新取样\r\n    $image_p = imagecreatetruecolor($new_width, $new_height);\r\n    $image = imagecreatefromjpeg($filename);\r\n    imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\r\n    // 输出\r\n    imagejpeg($image_p, \'./images/imgp0627-2.jpg\', 70);\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 04:54:46', '2016-07-07 04:54:46', null);
INSERT INTO `notes` VALUES ('14', 'php 身份证提取生日', null, '<pre>\r\n<code class=\"language-php\">//用php从身份证中提取生日,包括15位和18位身份证 \r\nfunction getIDCardInfo($IDCard,$format=1)\r\n{\r\n    //0：未知错误，1：身份证格式错误，2：无错误\r\n    $result[\'error\']=0;\r\n    //0标示成年，1标示未成年\r\n    $result[\'flag\']=\'\';\r\n    //生日，格式如：2012-11-15\r\n    $result[\'tdate\']=\'\';\r\n    if(!preg_match(\"/^(\\d{15}$|^\\d{18}$|^\\d{17}(\\d|X|x))$/\",$IDCard))\r\n    {\r\n        $result[\'error\']=1;\r\n        return $result;\r\n    }\r\n    else\r\n    {\r\n        if(strlen($IDCard)==18)\r\n        {\r\n            $tyear=intval(substr($IDCard,6,4));\r\n            $tmonth=intval(substr($IDCard,10,2));\r\n            $tday=intval(substr($IDCard,12,2));\r\n        }\r\n        elseif(strlen($IDCard)==15)\r\n        {\r\n            $tyear=intval(\"19\".substr($IDCard,6,2));\r\n            $tmonth=intval(substr($IDCard,8,2));\r\n            $tday=intval(substr($IDCard,10,2));\r\n        }\r\n\r\n        if($tyear&gt;date(\"Y\")||$tyear&lt;(date(\"Y\")-100))\r\n        {\r\n            $flag=0;\r\n        }\r\n        elseif($tmonth&lt;0||$tmonth&gt;12)\r\n        {\r\n            $flag=0;\r\n        }\r\n        elseif($tday&lt;0||$tday&gt;31)\r\n        {\r\n            $flag=0;\r\n        }\r\n        else\r\n        {\r\n            if($format)\r\n            {\r\n                $tdate=$tyear.\"-\".$tmonth.\"-\".$tday;\r\n            }\r\n            else\r\n            {\r\n                $tdate=$tmonth.\"-\".$tday;\r\n            }\r\n\r\n            if((time()-mktime(0,0,0,$tmonth,$tday,$tyear))&gt;18*365*24*60*60)\r\n            {\r\n                $flag=0;\r\n            }\r\n            else\r\n            {\r\n                $flag=1;\r\n            }\r\n        }\r\n    }\r\n    //0：未知错误，1：身份证格式错误，2：无错误\r\n    $result[\'error\']=2;\r\n    //0标示成年，1标示未成年\r\n    $result[\'isAdult\']=$flag;\r\n    //生日日期\r\n    $result[\'birthday\']=$tdate;\r\n    return $result;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 04:58:56', '2016-07-07 04:58:56', null);
INSERT INTO `notes` VALUES ('15', 'php 无刷新上传图片', null, '<pre>\r\n<code class=\"language-php\">function upload_pic($path)\r\n{\r\n    $filename   = \'userfile\';\r\n    $pic_path   = \'\';\r\n    $picname    = $_FILES[$filename][\'name\'];\r\n    $picsize    = $_FILES[$filename][\'size\'];\r\n    if ($picname != \"\")\r\n    {\r\n        $type = strstr($picname,\'.\');\r\n        if ($type!=\'.jpg\'&amp;&amp;$type!=\'.gif\'&amp;&amp;$type!=\'.png\')\r\n        {\r\n            $array = array(\r\n                \'name\'     =&gt; \'格式错误,请上传jpg,gif,png\',\r\n                \'pic\'      =&gt; \'\',\r\n                \'size\'     =&gt; \'\',\r\n                \'pic_path\' =&gt; \'\'\r\n            );\r\n            return json_encode($array);\r\n        }\r\n        $pics        = md5(uniqid()). $type;\r\n        $path        = $this-&gt;create_dir($path);\r\n        $pic_path    = strtr($path,array(\'./\'=&gt;\'\')). $pics;\r\n        move_uploaded_file($_FILES[$filename][\'tmp_name\'], $pic_path);\r\n    }\r\n    if(file_exists($pic_path))\r\n    {\r\n        $this-&gt;process_pic($pic_path);\r\n    }\r\n    $size= round($picsize/1024,2);\r\n    $arr = array(\r\n        \'name\'     =&gt; $picname,\r\n        \'pic\'      =&gt; $pic_path,\r\n        \'size\'     =&gt; $size,\r\n        \'pic_path\' =&gt; $pic_path\r\n    );\r\n    return json_encode($arr);\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:01:32', '2016-07-07 05:01:32', null);
INSERT INTO `notes` VALUES ('16', 'php 生成序列号 把12位时间数值压缩成7-8位字母+数字组合字符串', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 生成序列号\r\n * &lt;br /&gt;把12位时间数值压缩成7-8位字母+数字组合字符串,重点是加上用户编号后将永不重复哈\r\n * &lt;br /&gt;用法：$serial_no = sofn_generate_serial(\'KH\' . $this-&gt;user_login_data[\'id\']);\r\n * &lt;br /&gt;示例：160121054346(12位,date(\'ymdhis\'))压缩后QBVF4346(8位,sofn_generate_serial())\r\n * @param string $serial_no 序号前缀，如:\'KH\' . $this-&gt;user_login_data[\'id\']\r\n * @return string 如：QBVF295\r\n * @since VER:1.0; DATE:2016-1-21; AUTHOR:SoChishun; EMAIL:14507247@qq.com; DESC:Added.\r\n */\r\nfunction sofn_generate_serial($serial_no=\'\')\r\n{\r\n    $time = date(\'y-m-d-H-i-s\');\r\n    $atime = explode(\'-\', $time);\r\n    foreach ($atime as $stime)\r\n    {\r\n        $itime = $stime * 1;\r\n        if ($itime &lt; 26)\r\n        {\r\n            // 65(A)-90(Z)\r\n            $serial_no.=chr(65 + $itime);\r\n            continue;\r\n        }\r\n        // 48(0)-57(9)\r\n        if ($itime &gt;= 48 &amp;&amp; $itime &lt;= 57)\r\n        {\r\n            $serial_no.=chr($stime);\r\n            continue;\r\n        }\r\n        $serial_no.=$stime;\r\n    }\r\n    return $serial_no;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:05:52', '2016-07-07 05:05:52', null);
INSERT INTO `notes` VALUES ('17', 'php 內容已数组存入文件,使用直接require即可', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 把內容以array的形式存入php檔案內,使用時直接require即可,該方式可達到高效緩存的目的\r\n * 獲取內容(1個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * 說明:\r\n * 返回php檔案內的array\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\');\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * 新增內容(2個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * [1]:未知,要新增的內容\r\n * 說明:\r\n * 把第2個參數的內容追加到$arr的尾巴上\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',$arr);\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * 刪除內容(3個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * [1]:str型,[\'del\':只刪除參數[2]對應的一行;\'delall\':全刪]\r\n * [2]:int型,要刪除的索引$key值\r\n * 說明:\r\n * 把第3個參數所屬的那一行內容刪除或全刪(要看[1]的值而定)\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',\'del\',$key);\r\n * Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',\'delall\',\'\');\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * /**/\r\npublic static function PHP()\r\n{\r\n    $o = func_get_args();\r\n    $c = count($o);\r\n    if ($c &lt; 1) \r\n    {\r\n        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 至少要傳遞一個參數!\');\r\n    }\r\n    //確保副檔名是.php\r\n    if (substr($o[0], -4) != \'.php\')\r\n    {\r\n        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 副檔名必須是.php\');\r\n    }\r\n    $t = \'&lt;?PHP\' . PHP_EOL . \'//該檔案由系統自動產出請勿手工修改\' . PHP_EOL;\r\n    //若暫存檔不存在則創建之\r\n    if (!file_exists($o[0]))\r\n    {\r\n        file_put_contents($o[0], $t . \'$arr=array();\', LOCK_EX);\r\n        chmod($o[0], 0777);\r\n    }\r\n    require($o[0]);\r\n    $arr = (!is_array($arr)) ? array() : $arr;\r\n    switch ($c) \r\n    {\r\n        //傳遞了1個參數(0=&gt;php檔案名),返回php檔案內的array\r\n        case 1:\r\n            return array(TRUE, $arr);\r\n        //傳遞了2個參數(0=&gt;php檔案名,1=&gt;要新增的內容),把第2個參數的內容追加到$arr的尾巴上\r\n        case 2:\r\n            $arr[] = $o[1];\r\n            $arr = $t . \'$arr=\' . var_export($arr, TRUE) . \';\';\r\n            file_put_contents($o[0], $arr, LOCK_EX);\r\n            chmod($o[0], 0777);\r\n            unset($o, $t);\r\n            return array(TRUE, $arr);\r\n        //傳遞了3個參數(0=&gt;php檔案名,1=&gt;\'del\',2=&gt;要刪除的索引$key值),把第3個參數所屬的那一行內容刪除\r\n        case 3:\r\n            if (!in_array($o[1], array(\'del\', \'delall\')))\r\n            {\r\n                return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數2錯誤!\');\r\n            }\r\n            switch ($o[1])\r\n            {\r\n                //把第3個參數所屬的那一行內容刪除\r\n                case \'del\':\r\n                    if (!isset($o[2]) or !is_numeric($o[2]))\r\n                    {\r\n                        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數3錯誤!\');\r\n                    }\r\n                    if (!isset($arr[$o[2]]))\r\n                    {\r\n                        return array(TRUE, $arr);\r\n                    }\r\n                    //若要刪除的項目已不存在則直接返回\r\n                    unset($arr[$o[2]]);\r\n                    $arr = $t . \'$arr=\' . var_export($arr, TRUE) . \';\';\r\n                    file_put_contents($o[0], $arr, LOCK_EX);\r\n                    chmod($o[0], 0777);\r\n                    unset($o, $t);\r\n                    return array(TRUE, $arr);\r\n                //全刪\r\n                case \'delall\':\r\n                    if (!isset($o[2])) \r\n                    {\r\n                        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數3錯誤!\');\r\n                    }\r\n                    $arr = $t . \'$arr=array();\';\r\n                    file_put_contents($o[0], $arr, LOCK_EX);\r\n                    chmod($o[0], 0777);\r\n                    unset($o, $t);\r\n                    return array(TRUE, array());\r\n            }\r\n            throw new exception(\'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \'!\');\r\n            die();\r\n        default:\r\n            unset($o, $t);\r\n            return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數個數錯誤!\');\r\n    }\r\n    unset($o, $t);\r\n    throw new exception(\'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \'!\');\r\n    die();\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:11:19', '2016-07-07 05:11:19', null);
INSERT INTO `notes` VALUES ('18', 'php 代码注释 神兽护体 代码无bug', null, '<pre>\r\n<code class=\"language-php\">/**\r\n *\r\n * ━━━━━━神兽出没━━━━━━\r\n * 　　　┏┓　　　┏┓\r\n * 　　┏┛┻━━━┛┻┓\r\n * 　　┃　　　　　　　┃\r\n * 　　┃　　　━　　　┃\r\n * 　　┃　┳┛　┗┳　┃\r\n * 　　┃　　　　　　　┃\r\n * 　　┃　　　┻　　　┃\r\n * 　　┃　　　　　　　┃\r\n * 　　┗━┓　　　┏━┛Code is far away from bug with the animal protecting\r\n * 　　　　┃　　　┃    神兽保佑,代码无bug\r\n * 　　　　┃　　　┃\r\n * 　　　　┃　　　┗━━━┓\r\n * 　　　　┃　　　　　　　┣┓\r\n * 　　　　┃　　　　　　　┏┛\r\n * 　　　　┗┓┓┏━┳┓┏┛\r\n * 　　　　　┃┫┫　┃┫┫\r\n * 　　　　　┗┻┛　┗┻┛\r\n *\r\n * ━━━━━━感觉萌萌哒━━━━━━\r\n */\r\n  \r\n/**\r\n * 　　　　　　　　┏┓　　　┏┓\r\n * 　　　　　　　┏┛┻━━━┛┻┓\r\n * 　　　　　　　┃　　　　　　　┃ 　\r\n * 　　　　　　　┃　　　━　　　┃\r\n * 　　　　　　　┃　＞　　　＜　┃\r\n * 　　　　　　　┃　　　　　　　┃\r\n * 　　　　　　　┃...　⌒　...　┃\r\n * 　　　　　　　┃　　　　　　　┃\r\n * 　　　　　　　┗━┓　　　┏━┛\r\n * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug\r\n * 　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┃  　　　　　　\r\n * 　　　　　　　　　┃　　　┃\r\n * 　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┗━━━┓\r\n * 　　　　　　　　　┃　　　　　　　┣┓\r\n * 　　　　　　　　　┃　　　　　　　┏┛\r\n * 　　　　　　　　　┗┓┓┏━┳┓┏┛\r\n * 　　　　　　　　　　┃┫┫　┃┫┫\r\n * 　　　　　　　　　　┗┻┛　┗┻┛\r\n */\r\n  \r\n/**\r\n *　　　　　　　　┏┓　　　┏┓+ +\r\n *　　　　　　　┏┛┻━━━┛┻┓ + +\r\n *　　　　　　　┃　　　　　　　┃ 　\r\n *　　　　　　　┃　　　━　　　┃ ++ + + +\r\n *　　　　　　 ████━████ ┃+\r\n *　　　　　　　┃　　　　　　　┃ +\r\n *　　　　　　　┃　　　┻　　　┃\r\n *　　　　　　　┃　　　　　　　┃ + +\r\n *　　　　　　　┗━┓　　　┏━┛\r\n *　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n *　　　　　　　　　┃　　　┃ + + + +\r\n *　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting　　　　　　　\r\n *　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　\r\n *　　　　　　　　　┃　　　┃\r\n *　　　　　　　　　┃　　　┃　　+　　　　　　　　　\r\n *　　　　　　　　　┃　 　　┗━━━┓ + +\r\n *　　　　　　　　　┃ 　　　　　　　┣┓\r\n *　　　　　　　　　┃ 　　　　　　　┏┛\r\n *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +\r\n *　　　　　　　　　　┃┫┫　┃┫┫\r\n *　　　　　　　　　　┗┻┛　┗┻┛+ + + +\r\n */</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:16:21', '2016-07-07 05:16:21', null);
INSERT INTO `notes` VALUES ('19', 'php 获取用户真实 IP  淘宝IP接口获得ip地理位置', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 获取用户真实 IP\r\n */\r\nfunction getIP()\r\n{\r\n    static $realip;\r\n    if (isset($_SERVER))\r\n    {\r\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"]))\r\n        {\r\n            $realip = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\r\n        }\r\n        else if (isset($_SERVER[\"HTTP_CLIENT_IP\"]))\r\n        {\r\n            $realip = $_SERVER[\"HTTP_CLIENT_IP\"];\r\n        }\r\n        else\r\n        {\r\n            $realip = $_SERVER[\"REMOTE_ADDR\"];\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (getenv(\"HTTP_X_FORWARDED_FOR\"))\r\n        {\r\n            $realip = getenv(\"HTTP_X_FORWARDED_FOR\");\r\n        }\r\n        else if (getenv(\"HTTP_CLIENT_IP\"))\r\n        {\r\n            $realip = getenv(\"HTTP_CLIENT_IP\");\r\n        }\r\n        else\r\n        {\r\n            $realip = getenv(\"REMOTE_ADDR\");\r\n        }\r\n    }\r\n    return $realip;\r\n}\r\n/**\r\n * 获取 IP  地理位置\r\n * 淘宝IP接口\r\n * @Return: array\r\n */\r\nfunction getCity($ip)\r\n{\r\n    $url = \"http://ip.taobao.com/service/getIpInfo.php?ip=\".$ip;\r\n    $ip = json_decode(file_get_contents($url));\r\n    if ((string)$ip-&gt;code == \'1\')\r\n    {\r\n        return false;\r\n    }\r\n    $data = (array)$ip-&gt;data;\r\n    return $data;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:20:52', '2016-07-07 05:20:52', null);
INSERT INTO `notes` VALUES ('20', 'php 100%并发无误 高效文本缓存类.', null, '<pre>\r\n<code class=\"language-php\">$old = sprintf(\'%1.4f\', memory_get_peak_usage() / 1024) .\' KB\';\r\nclass caches\r\n{\r\n    public  $keep_time = 3600;\r\n    public  $file_path = \'./cache.txt\';\r\n    private $handle    = null;\r\n    private $time      = 0;\r\n    public function __construct()\r\n    {\r\n        $this-&gt;time = time();\r\n    }\r\n    public function read($key, $keep_time=0)\r\n    {\r\n        # 取得第一行. 判断过期, 不存在, 异常情况, 影响返回值即可. 返回值决定write方法的调用.\r\n        $keep_time === 0 &amp;&amp; $keep_time = $this-&gt;keep_time;\r\n        $list = $this-&gt;__get_one();\r\n        # 是否更新判断.\r\n        $check = true;\r\n        if(!$list[$key])\r\n            $check = false;\r\n        if($check &amp;&amp; (time() - $list[$key][\'t\']) &gt;= $keep_time)\r\n            $check = false;\r\n        # 取得第几行数据.\r\n        $line = $list[$key][\'l\']+0;\r\n        $i = 1;\r\n        $data = \'\';\r\n        if($this-&gt;handle)\r\n        {\r\n            while(!feof($this-&gt;handle))\r\n            {\r\n                if($i === $line)\r\n                {\r\n                    $data = fgets($this-&gt;handle);\r\n                }\r\n                else\r\n                {\r\n                    // TODO: 有没有好办法跳过这步...\r\n                    fgets($this-&gt;handle);\r\n                }\r\n                $i ++;\r\n            }\r\n        }\r\n        # 无论如何都保障数据为数组返回.\r\n        if($data)\r\n        {\r\n            $data = $this-&gt;__data_parse($data,\'DECODE\');\r\n        }\r\n        !$data &amp;&amp; $data = array();\r\n        return $data;\r\n    }\r\n    public function write($key, $val)\r\n    {\r\n        # 取得第一行. 判断key是否已经存在了..\r\n        $list = $this-&gt;__get_one();\r\n        # 什么情况下可以写入.\r\n        if($list[$key])\r\n        {\r\n            # 已经过期的情况下. write函数被调用后, 不管如何都当作过期.\r\n            $list[$key][\'t\'] = $this-&gt;time;\r\n            $list[\'end\'] = $list[$key][\'l\'];\r\n        }\r\n        else\r\n        {\r\n            $list[$key] = array(\'t\'=&gt;$this-&gt;time,\'l\'=&gt;($list[\'end\']+1));\r\n            $list[\'end\'] = $list[$key][\'l\'];\r\n        }\r\n        # 数据加密处理后再传给__write. $list[\'end\'] 表示更新哪一行.\r\n        return $this-&gt;__write($list[\'end\'], $this-&gt;__data_parse($val), serialize($list));\r\n    }\r\n    private function __get_one()\r\n    {\r\n        $this-&gt;__read_fopens();\r\n        if(!$this-&gt;handle)\r\n            return array();\r\n        $list = array();\r\n        if($seria = rtrim(fgets($this-&gt;handle)))\r\n        {\r\n            $list = unserialize($seria);\r\n            unset($seria);\r\n        }\r\n        !$list &amp;&amp; $list = array();\r\n        return $list;\r\n    }\r\n    private function __data_parse($data, $cls=\'ENCODE\')\r\n    {\r\n        # $State 参数以减少is_string, count两函数的调用.\r\n        if($cls === \'ENCODE\')\r\n        {\r\n            # 一定要返回无换行的一行. 切记\r\n            # gzcompress 非常占内存, 只是写入时执行.\r\n            $data = base64_encode(gzcompress(serialize($data),9));\r\n        }\r\n        else\r\n        {\r\n            $data = unserialize(gzuncompress(base64_decode(rtrim($data))));\r\n            if($State === false &amp;&amp; count($data) === 1 &amp;&amp; isset($data[0]) === true)\r\n            {\r\n                $data = $data[0];\r\n            }\r\n        }\r\n        return $data;\r\n    }\r\n    private function __write($line, $data, $firstline)\r\n    {\r\n        $savedata = array();\r\n        $line +=0;\r\n        $i = 1;\r\n        $savedata[0] = $firstline;\r\n        if($this-&gt;handle){\r\n            while(!feof($this-&gt;handle))\r\n            {\r\n                $savedata[$i] = rtrim(fgets($this-&gt;handle));\r\n                if($i === $line)\r\n                {\r\n                    $savedata[$i]= $data;\r\n                }\r\n                $i ++;\r\n            }\r\n        }\r\n        if(!$savedata[$line])\r\n            $savedata[$line] = $data;\r\n        if($this-&gt;handle)\r\n            $this-&gt;__closes();\r\n        # 重新写入文件.\r\n        if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n            if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                    if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                        if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                            return 0;\r\n        flock($fp, LOCK_EX | LOCK_NB);\r\n        $ints = 0;\r\n        //$ints = fwrite($fp, implode(PHP_EOL, $savedata));\r\n        foreach($savedata AS $key =&gt; $val)\r\n        {\r\n            if($key === 0)\r\n            {\r\n                $ints += fwrite($fp,$val);\r\n            }\r\n            else\r\n            {\r\n                $ints += fwrite($fp,PHP_EOL.$val);\r\n            }\r\n            if($key === 0 &amp;&amp; $ints &lt;= 0)\r\n                break;\r\n        }\r\n        unset($savedata);\r\n        flock($fp, LOCK_UN);\r\n        fclose($fp);\r\n        return $ints;\r\n    }\r\n    private function __read_fopens()\r\n    {\r\n        $cls = \'rb\';\r\n        if($this-&gt;handle)\r\n            $this-&gt;__closes();\r\n        if(is_file($this-&gt;file_path) === false)\r\n            return false;\r\n        if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n            if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                    if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                        if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                            $this-&gt;handle = null;\r\n        if($this-&gt;handle)\r\n            flock($this-&gt;handle,LOCK_EX | LOCK_NB);\r\n    }\r\n    private function __closes()\r\n    {\r\n        if($this-&gt;handle)\r\n        {\r\n            flock($this-&gt;handle, LOCK_UN);\r\n            fclose($this-&gt;handle);\r\n            $this-&gt;handle = null;\r\n        }\r\n    }\r\n}\r\n########################################### 调用代码 #########################################\r\nset_time_limit(0);\r\n$atime = microtime(true);\r\n$obj = new caches();\r\n// (0 / 1) 写入或者读, 测试效果.\r\n$read = 1;\r\n// 10K\r\n$size = 10000;\r\n// 首次要快得多, 200:1秒, 1000:11秒\r\n$arr = range(1,100);\r\nforeach($arr AS $val)\r\n{\r\n    if($read == 0)\r\n    {\r\n        // 写入测试.\r\n        $ints = $obj-&gt;write(\'key\'.$val,array(\'key\'=&gt;str_repeat(\'A\',$size)));\r\n        echo \'key\'.$val.\' write size: \'. ($ints / 1000).\' KB&lt;br /&gt;\';\r\n    }\r\n    else\r\n    {\r\n        // 读缓存测试.\r\n        $ints = $obj-&gt;read(\'key\'.$val);\r\n        echo \'key\'.$val.\' read size: \'. strlen($ints[\'key\']) / 1000 .\' KB&lt;br /&gt;\';\r\n    }\r\n}\r\n#################################### 以下代码为监控作用 ####################################\r\necho \'&lt;br /&gt;执行时间: \';\r\necho sprintf(\'%1.4f\',microtime(true) - $atime).\' 秒\';\r\necho \'&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;内存监控: \';\r\necho $new = sprintf(\'%1.4f\', memory_get_peak_usage() / 1024) .\' KB\';\r\necho \'&lt;br&gt;&lt;hr&gt;原始内存: \';\r\necho $old;\r\necho \'&lt;br&gt;&lt;hr&gt;增加内存: \';\r\necho sprintf(\'%1.4f\',$new - $old) .\' KB\';\r\nexit();</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:29:34', '2016-07-07 05:29:34', null);
INSERT INTO `notes` VALUES ('21', 'php 简单有用的PHP函数', null, '<pre>\r\n<code class=\"language-php\">1. 对象到数组转换\r\nfunction objToArr($obj)\r\n{\r\n    if(!is_object($obj) &amp;&amp; !is_array($obj))\r\n    {\r\n        return $obj;\r\n    }\r\n    $arr = array();\r\n    foreach($obj as $k =&gt; $v)\r\n    {\r\n        $arr[$k] = $this-&gt;objToArr($v);\r\n    }\r\n    return $arr;\r\n}\r\n2. json到php数组转换\r\nfunction simple_json_parser($json)\r\n{\r\n    $json = str_replace(\"{\",\"\",str_replace(\"}\",\"\", $json));\r\n    $jsonValue = explode(\",\", $json);\r\n    $arr = array();\r\n    foreach($jsonValue as $v)\r\n    {\r\n        $jValue = explode(\":\", $v);\r\n        $arr[str_replace(\'\"\',\"\", $jValue[0])] = (str_replace(\'\"\', \"\", $jValue[1]));\r\n    }\r\n    return $arr;\r\n}\r\n3. curl 实现 GET / POST\r\nfunction oauth_http($method,$header,$url,$data)\r\n{\r\n    $method = $method ? $method : \'get\';\r\n    if( $method == \'get\')\r\n    {\r\n        $ch = curl_init ();\r\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\r\n        curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_URL, $url );\r\n        $result = curl_exec ( $ch );\r\n        curl_close ( $ch );\r\n        return $result;\r\n    }\r\n    elseif ( $method == \'post\' )\r\n    {\r\n        $ch = curl_init();\r\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\r\n        curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_POST, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_POSTFIELDS, $data );\r\n        curl_setopt ( $ch, CURLOPT_URL, $url );\r\n        curl_setopt ( $ch, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n        $ret = curl_exec ( $ch );\r\n        curl_close ( $ch );\r\n        return $ret;\r\n    }\r\n}\r\n4. 获取链接内容(不存在file_get_contents() 时使用curl方法)\r\nfunction get_url_contents($url)\r\n{\r\n    if (ini_get(\"allow_url_fopen\") == \"1\")\r\n        return file_get_contents($url);\r\n    $ch = curl_init();\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\r\n    curl_setopt($ch, CURLOPT_URL, $url);\r\n    $result =  curl_exec($ch);\r\n    curl_close($ch);\r\n    return $result;\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-08 16:46:27', '2016-07-11 17:11:52', null);
INSERT INTO `notes` VALUES ('22', 'php 加密算法', null, '<pre>\r\n<code class=\"language-php\">1. Discuz authcode\r\n/**\r\n * $string 明文或密文\r\n * $operation 加密ENCODE或解密DECODE\r\n * $key 密钥\r\n * $expiry 密钥有效期\r\n */\r\nfunction authcode($string, $operation = \'DECODE\', $key = \'\', $expiry = 0)\r\n{\r\n    // 动态密匙长度，相同的明文会生成不同密文就是依靠动态密匙 \r\n    // 加入随机密钥，可以令密文无任何规律，即便是原文和密钥完全相同，加密结果也会每次不同，增大破解难度。 \r\n    // 取值越大，密文变动规律越大，密文变化 = 16 的 $ckey_length 次方 \r\n    // 当此值为 0 时，则不产生随机密钥 \r\n    $ckey_length = 4;\r\n    // 密匙 \r\n    // $GLOBALS[\'discuz_auth_key\'] 这里可以根据自己的需要修改 \r\n    $key = md5($key ? $key : $GLOBALS [\'discuz_auth_key\']);\r\n    // 密匙a会参与加解密 \r\n    $keya = md5(substr($key, 0, 16));\r\n    // 密匙b会用来做数据完整性验证 \r\n    $keyb = md5(substr($key, 16, 16));\r\n    // 密匙c用于变化生成的密文 \r\n    $keyc = $ckey_length ? ($operation == \'DECODE\' ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : \'\';\r\n    // 参与运算的密匙 \r\n    $cryptkey = $keya . md5($keya . $keyc);\r\n    $key_length = strlen($cryptkey);\r\n    // 明文，前10位用来保存时间戳，解密时验证数据有效性，10到26位用来保存$keyb(密匙b)，解密时会通过这个密匙验证数据完整性 \r\n    // 如果是解码的话，会从第$ckey_length位开始，因为密文前$ckey_length位保存 动态密匙，以保证解密正确 \r\n    $string = $operation == \'DECODE\' ? base64_decode(substr($string, $ckey_length)) : sprintf(\'%010d\', $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string;\r\n    $string_length = strlen($string);\r\n    $result = \'\';\r\n    $box = range(0, 255);\r\n    $rndkey = array();\r\n    // 产生密匙簿 \r\n    for ($i = 0; $i &lt;= 255; $i++) \r\n    {\r\n        $rndkey [$i] = ord($cryptkey [$i % $key_length]);\r\n    }\r\n    // 用固定的算法，打乱密匙簿，增加随机性，好像很复杂，实际上并不会增加密文的强度 \r\n    for ($j = $i = 0; $i &lt; 256; $i++) \r\n    {\r\n        $j = ($j + $box [$i] + $rndkey [$i]) % 256;\r\n        $tmp = $box [$i];\r\n        $box [$i] = $box [$j];\r\n        $box [$j] = $tmp;\r\n    }\r\n    // 核心加解密部分 \r\n    for ($a = $j = $i = 0; $i &lt; $string_length; $i++) \r\n    {\r\n        $a = ($a + 1) % 256;\r\n        $j = ($j + $box [$a]) % 256;\r\n        $tmp = $box [$a];\r\n        $box [$a] = $box [$j];\r\n        $box [$j] = $tmp;\r\n        // 从密匙簿得出密匙进行异或，再转成字符 \r\n        $result .= chr(ord($string [$i]) ^ ($box [($box [$a] + $box [$j]) % 256]));\r\n    }\r\n    if ($operation == \'DECODE\') \r\n    {\r\n        // substr($result, 0, 10) == 0 验证数据有效性 \r\n        // substr($result, 0, 10) - time() &gt; 0 验证数据有效性 \r\n        // substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16) 验证数据完整性 \r\n        // 验证数据有效性，请看未加密明文的格式 \r\n        if ((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &gt; 0) &amp;&amp; substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) \r\n        {\r\n            return substr($result, 26);\r\n        } \r\n        else \r\n        {\r\n            return \'\';\r\n        }\r\n    }\r\n    else \r\n    {\r\n        // 把动态密匙保存在密文里，这也是为什么同样的明文，生产不同密文后能解密的原因 \r\n        // 因为加密后的密文可能是一些特殊字符，复制过程可能会丢失，所以用base64编码 \r\n        return $keyc . str_replace(\'=\', \'\', base64_encode($result));\r\n    }\r\n}\r\n$a = \"www.test.com\";\r\n$b = authcode($a, \"ENCODE\", \"abc123\");\r\necho $b . \"&lt;br/&gt;\";\r\necho authcode($b, \"DECODE\", \"abc123\");\r\n2. 简单对称加密算法\r\n/**\r\n * 简单对称加密算法之加密\r\n * @param String $string 需要加密的字串\r\n * @param String $skey 加密EKY\r\n * @author Anyon Zou &lt;zoujingli@qq.com&gt;\r\n * @date 2013-08-13 19:30\r\n * @update 2014-10-10 10:10\r\n * @return String\r\n */\r\nfunction encode($string = \'\', $skey = \'cxphp\')\r\n{\r\n    $strArr = str_split(base64_encode($string));\r\n    $strCount = count($strArr);\r\n    foreach (str_split($skey) as $key =&gt; $value)\r\n    $key &lt; $strCount &amp;&amp; $strArr [$key] .= $value;\r\n    return str_replace(array(\'=\', \'+\', \'/\'), array(\'O0O0O\', \'o000o\', \'oo00o\'), join(\'\', $strArr));\r\n}\r\n/**\r\n * 简单对称加密算法之解密\r\n * @param String $string 需要解密的字串\r\n * @param String $skey 解密KEY\r\n * @author Anyon Zou &lt;zoujingli@qq.com&gt;\r\n * @date 2013-08-13 19:30\r\n * @update 2014-10-10 10:10\r\n * @return String\r\n */\r\nfunction decode($string = \'\', $skey = \'cxphp\')\r\n{\r\n    $strArr = str_split(str_replace(array(\'O0O0O\', \'o000o\', \'oo00o\'), array(\'=\', \'+\', \'/\'), $string), 2);\r\n    $strCount = count($strArr);\r\n    foreach (str_split($skey) as $key =&gt; $value)\r\n    $key &lt;= $strCount &amp;&amp; isset($strArr [$key]) &amp;&amp; $strArr [$key][1] === $value &amp;&amp; $strArr [$key] = $strArr [$key][0];\r\n    return base64_decode(join(\'\', $strArr));\r\n}\r\necho \'&lt;pre&gt;\';\r\n$str = \'56,15123365247,54,四大古典风格\';\r\necho \"string : \" . $str . \" &lt;br /&gt;\";\r\necho \"encode : \" . ($enstring = encode($str)) . \'&lt;br /&gt;\';\r\necho \"decode : \" . decode($enstring);\r\n3. DES加密解密\r\nclass  DES\r\n{\r\n    public $key;\r\n    public $iv;  //偏移量\r\n    function __construct($key, $iv = 0)\r\n    {\r\n        $this-&gt;key = $key;\r\n        if ($iv == 0) \r\n        {\r\n            $this-&gt;iv = $key;\r\n        } \r\n        else \r\n        {\r\n            $this-&gt;iv = $iv;\r\n        }\r\n    }\r\n    //加密 \r\n    function encrypt($str)\r\n    {\r\n        $size = mcrypt_get_block_size(MCRYPT_DES, MCRYPT_MODE_CBC);\r\n        $str = $this-&gt;pkcs5Pad($str, $size);\r\n        $data = mcrypt_cbc(MCRYPT_DES, $this-&gt;key, $str, MCRYPT_ENCRYPT, $this-&gt;iv);\r\n        //$data=strtoupper(bin2hex($data)); //返回大写十六进制字符串 \r\n        return base64_encode($data);\r\n    }\r\n    //解密 \r\n    function decrypt($str)\r\n    {\r\n        $str = base64_decode($str);\r\n        //$strBin = $this-&gt;hex2bin( strtolower($str)); \r\n        $str = mcrypt_cbc(MCRYPT_DES, $this-&gt;key, $str, MCRYPT_DECRYPT, $this-&gt;iv);\r\n        $str = $this-&gt;pkcs5Unpad($str);\r\n        return $str;\r\n    }\r\n    function hex2bin($hexData)\r\n    {\r\n        $binData = \"\";\r\n        for ($i = 0; $i &lt; strlen($hexData); $i += 2) \r\n        {\r\n            $binData .= chr(hexdec(substr($hexData, $i, 2)));\r\n        }\r\n        return $binData;\r\n    }\r\n    function pkcs5Pad($text, $blocksize)\r\n    {\r\n        $pad = $blocksize - (strlen($text) % $blocksize);\r\n        return $text . str_repeat(chr($pad), $pad);\r\n    }\r\n    function pkcs5Unpad($text)\r\n    {\r\n        $pad = ord($text{strlen($text) - 1});\r\n        if ($pad &gt; strlen($text))\r\n            return false;\r\n        if (strspn($text, chr($pad), strlen($text) - $pad) != $pad)\r\n            return false;\r\n        return substr($text, 0, -1 * $pad);\r\n    }\r\n}\r\n$str = \'abc\';\r\n$key = \'12345678\';  //8位内 \r\n$crypt = new  DES ($key);\r\n$mstr = $crypt-&gt;encrypt($str);\r\n$str = $crypt-&gt;decrypt($mstr);\r\necho $str . \' &lt;=&gt; \' . $mstr;\r\n4. PHP hex2bin\r\nfunction hexXbin($data, $types = false)\r\n{\r\n    if (!is_string($data))\r\n        return 0;\r\n    if ($types === false) \r\n    {\r\n        $len = strlen($data);\r\n        if ($len % 2) \r\n        {\r\n            return 0;\r\n        } \r\n        else if (strspn($data, \'0123456789abcdefABCDEF\') != $len) \r\n        {\r\n            return 0;\r\n        }\r\n        return pack(\'H*\', $data);\r\n    } \r\n    else \r\n    {\r\n        return bin2hex($data);\r\n    }\r\n}\r\necho $t = hexXbin(\'XN中国人(  ADｄｗｅｒｅ)zQ4MzUwOTcy==\', true);\r\necho \'&lt;br /&gt;\';\r\necho hexXbin($t);</code></pre>\r\n', null, null, '1', '6', null, '2016-07-11 17:06:33', '2016-07-11 17:11:16', null);
INSERT INTO `notes` VALUES ('23', 'php 数组转json 不转义中文字符和 \\ / 的方法', null, '<pre>\r\n<code>/**\r\n * 不转义中文字符和\\/的 json 编码方法\r\n * @param array $arr 待编码数组\r\n * @return string\r\n */\r\nfunction json_encode_no_zh($arr)\r\n{\r\n    $str = str_replace(\"\\\\/\", \"/\", json_encode($arr));\r\n    $search = \"#\\\\\\u([0-9a-f]+)#ie\";\r\n    if (strpos(strtoupper(PHP_OS), \'WIN\') === false) \r\n    {\r\n        $replace = \"iconv(\'UCS-2BE\', \'UTF-8\', pack(\'H4\', \'\\\\1\'))\";//LINUX\r\n    } \r\n    else \r\n    {\r\n        $replace = \"iconv(\'UCS-2\', \'UTF-8\', pack(\'H4\', \'\\\\1\'))\";//WINDOWS\r\n    }\r\n    return preg_replace($search, $replace, $str);\r\n}</code></pre>\r\n', null, '', '1', '6', null, '2016-07-11 17:14:07', '2016-07-14 11:58:33', null);
INSERT INTO `notes` VALUES ('24', 'php 汉字转拼音处理类(支持UTF8和GBK编码)', null, '<pre>\r\n<code class=\"brush:php\">/**\r\n * PHP 汉字转拼音\r\n * @author Jerryli(hzjerry@gmail.com)\r\n * @updated by Specs(http://9iphp.com)\r\n * @example\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\'), \'\r\n\'; //结果为拼音首字母\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\', \'all\'), \'\r\n\'; //结果为全拼音\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\', \'one\'), \'\r\n\'; //结果为第一个拼音\r\n */\r\nclass Chinese_to_PY\r\n{\r\n    /**\r\n     * 拼音字符转换图\r\n     * @var array\r\n    */\r\n    private static $_aMaps = array(\r\n        \'a\' =&amp;gt; -20319, \'ai\' =&amp;gt; -20317, \'an\' =&amp;gt; -20304, \'ang\' =&amp;gt; -20295, \'ao\' =&amp;gt; -20292,\r\n        \'ba\' =&amp;gt; -20283, \'bai\' =&amp;gt; -20265, \'ban\' =&amp;gt; -20257, \'bang\' =&amp;gt; -20242, \'bao\' =&amp;gt; -20230, \'bei\' =&amp;gt; -20051, \'ben\' =&amp;gt; -20036, \'beng\' =&amp;gt; -20032, \'bi\' =&amp;gt; -20026, \'bian\' =&amp;gt; -20002, \'biao\' =&amp;gt; -19990, \'bie\' =&amp;gt; -19986, \'bin\' =&amp;gt; -19982, \'bing\' =&amp;gt; -19976, \'bo\' =&amp;gt; -19805, \'bu\' =&amp;gt; -19784,\r\n        \'ca\' =&amp;gt; -19775, \'cai\' =&amp;gt; -19774, \'can\' =&amp;gt; -19763, \'cang\' =&amp;gt; -19756, \'cao\' =&amp;gt; -19751, \'ce\' =&amp;gt; -19746, \'ceng\' =&amp;gt; -19741, \'cha\' =&amp;gt; -19739, \'chai\' =&amp;gt; -19728, \'chan\' =&amp;gt; -19725, \'chang\' =&amp;gt; -19715, \'chao\' =&amp;gt; -19540, \'che\' =&amp;gt; -19531, \'chen\' =&amp;gt; -19525, \'cheng\' =&amp;gt; -19515, \'chi\' =&amp;gt; -19500, \'chong\' =&amp;gt; -19484, \'chou\' =&amp;gt; -19479, \'chu\' =&amp;gt; -19467, \'chuai\' =&amp;gt; -19289, \'chuan\' =&amp;gt; -19288, \'chuang\' =&amp;gt; -19281, \'chui\' =&amp;gt; -19275, \'chun\' =&amp;gt; -19270, \'chuo\' =&amp;gt; -19263, \'ci\' =&amp;gt; -19261, \'cong\' =&amp;gt; -19249, \'cou\' =&amp;gt; -19243, \'cu\' =&amp;gt; -19242, \'cuan\' =&amp;gt; -19238, \'cui\' =&amp;gt; -19235, \'cun\' =&amp;gt; -19227, \'cuo\' =&amp;gt; -19224,\r\n        \'da\' =&amp;gt; -19218, \'dai\' =&amp;gt; -19212, \'dan\' =&amp;gt; -19038, \'dang\' =&amp;gt; -19023, \'dao\' =&amp;gt; -19018, \'de\' =&amp;gt; -19006, \'deng\' =&amp;gt; -19003, \'di\' =&amp;gt; -18996, \'dian\' =&amp;gt; -18977, \'diao\' =&amp;gt; -18961, \'die\' =&amp;gt; -18952, \'ding\' =&amp;gt; -18783, \'diu\' =&amp;gt; -18774, \'dong\' =&amp;gt; -18773, \'dou\' =&amp;gt; -18763, \'du\' =&amp;gt; -18756, \'duan\' =&amp;gt; -18741, \'dui\' =&amp;gt; -18735, \'dun\' =&amp;gt; -18731, \'duo\' =&amp;gt; -18722,\r\n        \'e\' =&amp;gt; -18710, \'en\' =&amp;gt; -18697, \'er\' =&amp;gt; -18696,\r\n        \'fa\' =&amp;gt; -18526, \'fan\' =&amp;gt; -18518, \'fang\' =&amp;gt; -18501, \'fei\' =&amp;gt; -18490, \'fen\' =&amp;gt; -18478, \'feng\' =&amp;gt; -18463, \'fo\' =&amp;gt; -18448, \'fou\' =&amp;gt; -18447, \'fu\' =&amp;gt; -18446,\r\n        \'ga\' =&amp;gt; -18239, \'gai\' =&amp;gt; -18237, \'gan\' =&amp;gt; -18231, \'gang\' =&amp;gt; -18220, \'gao\' =&amp;gt; -18211, \'ge\' =&amp;gt; -18201, \'gei\' =&amp;gt; -18184, \'gen\' =&amp;gt; -18183, \'geng\' =&amp;gt; -18181, \'gong\' =&amp;gt; -18012, \'gou\' =&amp;gt; -17997, \'gu\' =&amp;gt; -17988, \'gua\' =&amp;gt; -17970, \'guai\' =&amp;gt; -17964, \'guan\' =&amp;gt; -17961, \'guang\' =&amp;gt; -17950, \'gui\' =&amp;gt; -17947, \'gun\' =&amp;gt; -17931, \'guo\' =&amp;gt; -17928,\r\n        \'ha\' =&amp;gt; -17922, \'hai\' =&amp;gt; -17759, \'han\' =&amp;gt; -17752, \'hang\' =&amp;gt; -17733, \'hao\' =&amp;gt; -17730, \'he\' =&amp;gt; -17721, \'hei\' =&amp;gt; -17703, \'hen\' =&amp;gt; -17701, \'heng\' =&amp;gt; -17697, \'hong\' =&amp;gt; -17692, \'hou\' =&amp;gt; -17683, \'hu\' =&amp;gt; -17676, \'hua\' =&amp;gt; -17496, \'huai\' =&amp;gt; -17487, \'huan\' =&amp;gt; -17482, \'huang\' =&amp;gt; -17468, \'hui\' =&amp;gt; -17454, \'hun\' =&amp;gt; -17433, \'huo\' =&amp;gt; -17427,\r\n        \'ji\' =&amp;gt; -17417, \'jia\' =&amp;gt; -17202, \'jian\' =&amp;gt; -17185, \'jiang\' =&amp;gt; -16983, \'jiao\' =&amp;gt; -16970, \'jie\' =&amp;gt; -16942, \'jin\' =&amp;gt; -16915, \'jing\' =&amp;gt; -16733, \'jiong\' =&amp;gt; -16708, \'jiu\' =&amp;gt; -16706, \'ju\' =&amp;gt; -16689, \'juan\' =&amp;gt; -16664, \'jue\' =&amp;gt; -16657, \'jun\' =&amp;gt; -16647,\r\n        \'ka\' =&amp;gt; -16474, \'kai\' =&amp;gt; -16470, \'kan\' =&amp;gt; -16465, \'kang\' =&amp;gt; -16459, \'kao\' =&amp;gt; -16452, \'ke\' =&amp;gt; -16448, \'ken\' =&amp;gt; -16433, \'keng\' =&amp;gt; -16429, \'kong\' =&amp;gt; -16427, \'kou\' =&amp;gt; -16423, \'ku\' =&amp;gt; -16419, \'kua\' =&amp;gt; -16412, \'kuai\' =&amp;gt; -16407, \'kuan\' =&amp;gt; -16403, \'kuang\' =&amp;gt; -16401, \'kui\' =&amp;gt; -16393, \'kun\' =&amp;gt; -16220, \'kuo\' =&amp;gt; -16216,\r\n        \'la\' =&amp;gt; -16212, \'lai\' =&amp;gt; -16205, \'lan\' =&amp;gt; -16202, \'lang\' =&amp;gt; -16187, \'lao\' =&amp;gt; -16180, \'le\' =&amp;gt; -16171, \'lei\' =&amp;gt; -16169, \'leng\' =&amp;gt; -16158, \'li\' =&amp;gt; -16155, \'lia\' =&amp;gt; -15959, \'lian\' =&amp;gt; -15958, \'liang\' =&amp;gt; -15944, \'liao\' =&amp;gt; -15933, \'lie\' =&amp;gt; -15920, \'lin\' =&amp;gt; -15915, \'ling\' =&amp;gt; -15903, \'liu\' =&amp;gt; -15889, \'long\' =&amp;gt; -15878, \'lou\' =&amp;gt; -15707, \'lu\' =&amp;gt; -15701, \'lv\' =&amp;gt; -15681, \'luan\' =&amp;gt; -15667, \'lue\' =&amp;gt; -15661, \'lun\' =&amp;gt; -15659, \'luo\' =&amp;gt; -15652,\r\n        \'ma\' =&amp;gt; -15640, \'mai\' =&amp;gt; -15631, \'man\' =&amp;gt; -15625, \'mang\' =&amp;gt; -15454, \'mao\' =&amp;gt; -15448, \'me\' =&amp;gt; -15436, \'mei\' =&amp;gt; -15435, \'men\' =&amp;gt; -15419, \'meng\' =&amp;gt; -15416, \'mi\' =&amp;gt; -15408, \'mian\' =&amp;gt; -15394, \'miao\' =&amp;gt; -15385, \'mie\' =&amp;gt; -15377, \'min\' =&amp;gt; -15375, \'ming\' =&amp;gt; -15369, \'miu\' =&amp;gt; -15363, \'mo\' =&amp;gt; -15362, \'mou\' =&amp;gt; -15183, \'mu\' =&amp;gt; -15180,\r\n        \'na\' =&amp;gt; -15165, \'nai\' =&amp;gt; -15158, \'nan\' =&amp;gt; -15153, \'nang\' =&amp;gt; -15150, \'nao\' =&amp;gt; -15149, \'ne\' =&amp;gt; -15144, \'nei\' =&amp;gt; -15143, \'nen\' =&amp;gt; -15141, \'neng\' =&amp;gt; -15140, \'ni\' =&amp;gt; -15139, \'nian\' =&amp;gt; -15128, \'niang\' =&amp;gt; -15121, \'niao\' =&amp;gt; -15119, \'nie\' =&amp;gt; -15117, \'nin\' =&amp;gt; -15110, \'ning\' =&amp;gt; -15109, \'niu\' =&amp;gt; -14941, \'nong\' =&amp;gt; -14937, \'nu\' =&amp;gt; -14933, \'nv\' =&amp;gt; -14930, \'nuan\' =&amp;gt; -14929, \'nue\' =&amp;gt; -14928, \'nuo\' =&amp;gt; -14926,\r\n        \'o\' =&amp;gt; -14922, \'ou\' =&amp;gt; -14921,\r\n        \'pa\' =&amp;gt; -14914, \'pai\' =&amp;gt; -14908, \'pan\' =&amp;gt; -14902, \'pang\' =&amp;gt; -14894, \'pao\' =&amp;gt; -14889, \'pei\' =&amp;gt; -14882, \'pen\' =&amp;gt; -14873, \'peng\' =&amp;gt; -14871, \'pi\' =&amp;gt; -14857, \'pian\' =&amp;gt; -14678, \'piao\' =&amp;gt; -14674, \'pie\' =&amp;gt; -14670, \'pin\' =&amp;gt; -14668, \'ping\' =&amp;gt; -14663, \'po\' =&amp;gt; -14654, \'pu\' =&amp;gt; -14645,\r\n        \'qi\' =&amp;gt; -14630, \'qia\' =&amp;gt; -14594, \'qian\' =&amp;gt; -14429, \'qiang\' =&amp;gt; -14407, \'qiao\' =&amp;gt; -14399, \'qie\' =&amp;gt; -14384, \'qin\' =&amp;gt; -14379, \'qing\' =&amp;gt; -14368, \'qiong\' =&amp;gt; -14355, \'qiu\' =&amp;gt; -14353, \'qu\' =&amp;gt; -14345, \'quan\' =&amp;gt; -14170, \'que\' =&amp;gt; -14159, \'qun\' =&amp;gt; -14151,\r\n        \'ran\' =&amp;gt; -14149, \'rang\' =&amp;gt; -14145, \'rao\' =&amp;gt; -14140, \'re\' =&amp;gt; -14137, \'ren\' =&amp;gt; -14135, \'reng\' =&amp;gt; -14125, \'ri\' =&amp;gt; -14123, \'rong\' =&amp;gt; -14122, \'rou\' =&amp;gt; -14112, \'ru\' =&amp;gt; -14109, \'ruan\' =&amp;gt; -14099, \'rui\' =&amp;gt; -14097, \'run\' =&amp;gt; -14094, \'ruo\' =&amp;gt; -14092,\r\n        \'sa\' =&amp;gt; -14090, \'sai\' =&amp;gt; -14087, \'san\' =&amp;gt; -14083, \'sang\' =&amp;gt; -13917, \'sao\' =&amp;gt; -13914, \'se\' =&amp;gt; -13910, \'sen\' =&amp;gt; -13907, \'seng\' =&amp;gt; -13906, \'sha\' =&amp;gt; -13905, \'shai\' =&amp;gt; -13896, \'shan\' =&amp;gt; -13894, \'shang\' =&amp;gt; -13878, \'shao\' =&amp;gt; -13870, \'she\' =&amp;gt; -13859, \'shen\' =&amp;gt; -13847, \'sheng\' =&amp;gt; -13831, \'shi\' =&amp;gt; -13658, \'shou\' =&amp;gt; -13611, \'shu\' =&amp;gt; -13601, \'shua\' =&amp;gt; -13406, \'shuai\' =&amp;gt; -13404, \'shuan\' =&amp;gt; -13400, \'shuang\' =&amp;gt; -13398, \'shui\' =&amp;gt; -13395, \'shun\' =&amp;gt; -13391, \'shuo\' =&amp;gt; -13387, \'si\' =&amp;gt; -13383, \'song\' =&amp;gt; -13367, \'sou\' =&amp;gt; -13359, \'su\' =&amp;gt; -13356, \'suan\' =&amp;gt; -13343, \'sui\' =&amp;gt; -13340, \'sun\' =&amp;gt; -13329, \'suo\' =&amp;gt; -13326,\r\n        \'ta\' =&amp;gt; -13318, \'tai\' =&amp;gt; -13147, \'tan\' =&amp;gt; -13138, \'tang\' =&amp;gt; -13120, \'tao\' =&amp;gt; -13107, \'te\' =&amp;gt; -13096, \'teng\' =&amp;gt; -13095, \'ti\' =&amp;gt; -13091, \'tian\' =&amp;gt; -13076, \'tiao\' =&amp;gt; -13068, \'tie\' =&amp;gt; -13063, \'ting\' =&amp;gt; -13060, \'tong\' =&amp;gt; -12888, \'tou\' =&amp;gt; -12875, \'tu\' =&amp;gt; -12871, \'tuan\' =&amp;gt; -12860, \'tui\' =&amp;gt; -12858, \'tun\' =&amp;gt; -12852, \'tuo\' =&amp;gt; -12849,\r\n        \'wa\' =&amp;gt; -12838, \'wai\' =&amp;gt; -12831, \'wan\' =&amp;gt; -12829, \'wang\' =&amp;gt; -12812, \'wei\' =&amp;gt; -12802, \'wen\' =&amp;gt; -12607, \'weng\' =&amp;gt; -12597, \'wo\' =&amp;gt; -12594, \'wu\' =&amp;gt; -12585,\r\n        \'xi\' =&amp;gt; -12556, \'xia\' =&amp;gt; -12359, \'xian\' =&amp;gt; -12346, \'xiang\' =&amp;gt; -12320, \'xiao\' =&amp;gt; -12300, \'xie\' =&amp;gt; -12120, \'xin\' =&amp;gt; -12099, \'xing\' =&amp;gt; -12089, \'xiong\' =&amp;gt; -12074, \'xiu\' =&amp;gt; -12067, \'xu\' =&amp;gt; -12058, \'xuan\' =&amp;gt; -12039, \'xue\' =&amp;gt; -11867, \'xun\' =&amp;gt; -11861,\r\n        \'ya\' =&amp;gt; -11847, \'yan\' =&amp;gt; -11831, \'yang\' =&amp;gt; -11798, \'yao\' =&amp;gt; -11781, \'ye\' =&amp;gt; -11604, \'yi\' =&amp;gt; -11589, \'yin\' =&amp;gt; -11536, \'ying\' =&amp;gt; -11358, \'yo\' =&amp;gt; -11340, \'yong\' =&amp;gt; -11339, \'you\' =&amp;gt; -11324, \'yu\' =&amp;gt; -11303, \'yuan\' =&amp;gt; -11097, \'yue\' =&amp;gt; -11077, \'yun\' =&amp;gt; -11067,\r\n        \'za\' =&amp;gt; -11055, \'zai\' =&amp;gt; -11052, \'zan\' =&amp;gt; -11045, \'zang\' =&amp;gt; -11041, \'zao\' =&amp;gt; -11038, \'ze\' =&amp;gt; -11024, \'zei\' =&amp;gt; -11020, \'zen\' =&amp;gt; -11019, \'zeng\' =&amp;gt; -11018, \'zha\' =&amp;gt; -11014, \'zhai\' =&amp;gt; -10838, \'zhan\' =&amp;gt; -10832, \'zhang\' =&amp;gt; -10815, \'zhao\' =&amp;gt; -10800, \'zhe\' =&amp;gt; -10790, \'zhen\' =&amp;gt; -10780, \'zheng\' =&amp;gt; -10764, \'zhi\' =&amp;gt; -10587, \'zhong\' =&amp;gt; -10544, \'zhou\' =&amp;gt; -10533, \'zhu\' =&amp;gt; -10519, \'zhua\' =&amp;gt; -10331, \'zhuai\' =&amp;gt; -10329, \'zhuan\' =&amp;gt; -10328, \'zhuang\' =&amp;gt; -10322, \'zhui\' =&amp;gt; -10315, \'zhun\' =&amp;gt; -10309, \'zhuo\' =&amp;gt; -10307, \'zi\' =&amp;gt; -10296, \'zong\' =&amp;gt; -10281, \'zou\' =&amp;gt; -10274, \'zu\' =&amp;gt; -10270, \'zuan\' =&amp;gt; -10262, \'zui\' =&amp;gt; -10260, \'zun\' =&amp;gt; -10256, \'zuo\' =&amp;gt; -10254\r\n    );\r\n    /**\r\n     * 将中文编码成拼音\r\n     * @param string $chinese 要转换为拼音的字符串\r\n     * @param string $sRetFormat 返回格式 [first:每个字的首字母|all:全拼音|one:字符串字母]\r\n     * @return string\r\n     */\r\n    public static function getPY($chinese, $sRetFormat = \'first\')\r\n    {\r\n        $sGBK = iconv(\'UTF-8\', \'GBK\', $chinese);\r\n        $sUTF8 = iconv(\'GBK\', \'UTF-8\', $sGBK);\r\n        if ($sUTF8 != $chinese) $sGBK = $chinese;\r\n        $aBuf = array();\r\n        for ($i = 0, $iLoop = strlen($sGBK); $i &amp;lt; $iLoop; $i++) \r\n        {\r\n            $iChr = ord($sGBK{$i});\r\n            if ($iChr &amp;gt; 160)\r\n                $iChr = ($iChr &amp;lt;&amp;lt; 8) + ord($sGBK{++$i}) - 65536;\r\n            if (\'first\' == $sRetFormat || \'one\' == $sRetFormat)\r\n                $aBuf[] = substr(self::zh2py($iChr), 0, 1);\r\n            else\r\n                $aBuf[] = self::zh2py($iChr);\r\n        }\r\n        if (\'first\' === $sRetFormat)\r\n            return implode(\'\', $aBuf);\r\n        elseif (\'one\' == $sRetFormat)\r\n            return $aBuf[0];\r\n        else\r\n            return implode(\' \', $aBuf);\r\n    }\r\n    /**\r\n     * 中文转换到拼音(每次处理一个字符)\r\n     * @param number $iWORD 待处理字符双字节\r\n     * @return string 拼音\r\n     */\r\n    private static function zh2py($iWORD)\r\n    {\r\n        if ($iWORD &amp;gt; 0 &amp;amp;&amp;amp; $iWORD &amp;lt; 160) \r\n        {\r\n            return chr($iWORD);\r\n        } \r\n        elseif ($iWORD &amp;lt; -20319 || $iWORD &amp;gt; -10247) \r\n        {\r\n            return \'\';\r\n        } \r\n        else \r\n        {\r\n            foreach (self::$_aMaps as $py =&amp;gt; $code) \r\n            {\r\n                if ($code &amp;gt; $iWORD) break;\r\n                $result = $py;\r\n            }\r\n            return $result;\r\n        }\r\n    }\r\n}</code></pre>\r\n', null, 'aa', '1', '6', null, '2016-07-11 17:18:25', '2016-07-14 11:55:45', null);
INSERT INTO `notes` VALUES ('25', 'Mysql 根据时间戳按年月日分组统计', null, '<pre>\r\n<code class=\"brush:sql\">create_time时间格式\r\n\r\n//\r\nSELECT DATE_FORMAT(create_time,\'%Y%u\') weeks,COUNT(id) COUNT FROM role GROUP BY weeks;\r\n\r\nSELECT DATE_FORMAT(create_time,\'%Y%m%d\') days,COUNT(id) COUNT FROM role GROUP BY days; \r\n\r\nSELECT DATE_FORMAT(create_time,\'%Y%m\') months,COUNT(id) COUNT FROM role GROUP BY months; \r\n        \r\n\r\ncreate_time时间戳格式\r\n\r\n\r\nSELECT FROM_UNIXTIME(create_time,\'%Y%u\') weeks,COUNT(id) COUNT FROM role GROUP BY weeks; \r\n\r\nSELECT FROM_UNIXTIME(create_time,\'%Y%m%d\') days,COUNT(id) COUNT FROM role GROUP BY days; \r\n\r\nSELECT FROM_UNIXTIME(create_time,\'%Y%m\') months,COUNT(id) COUNT FROM role GROUP BY months;</code></pre>\r\n', null, '', '1', '2', null, '2016-07-21 16:42:10', '2016-07-21 16:42:10', null);
INSERT INTO `notes` VALUES ('26', 'php 购物车类', null, '<pre>\r\n<code class=\"brush:php\">/**\r\n * 商品类\r\n *\r\n */\r\nclass Product\r\n{\r\n    /**\r\n     * 商品编号\r\n     * \r\n     * @var int\r\n     */\r\n    private $id;\r\n     \r\n    /**\r\n     * 商品名称\r\n     * \r\n     * @var string\r\n     */\r\n     \r\n    private $name;\r\n    /**\r\n     * 商品数量\r\n     * \r\n     * @var int\r\n     */\r\n    private $quantity;\r\n     \r\n    /**\r\n     * 商品价格\r\n     * \r\n     * @var float\r\n     */\r\n    private $price;\r\n     \r\n    function __construct($id, $name, $quantity, $price)\r\n    {\r\n        $this-&gt;id = $id;\r\n        $this-&gt;name = $name;\r\n        $this-&gt;quantity = $quantity;\r\n        $this-&gt;price = $price;\r\n    }\r\n    function getId()\r\n    {\r\n        return $this-&gt;id;\r\n    }\r\n    function getName()\r\n    {\r\n        return $this-&gt;name;\r\n    }\r\n    function getQuantity()\r\n    {\r\n        return $this-&gt;quantity;\r\n    }\r\n    function getPrice()\r\n    {\r\n        return $this-&gt;price;\r\n    }\r\n}\r\n \r\n/**\r\n * 简单的购物车类\r\n *\r\n */\r\nclass Cart\r\n{\r\n    /**\r\n     * 以数据形式保存商品数据\r\n     * @var array\r\n     */\r\n    protected $products = array();\r\n     \r\n    /**\r\n     * 添加商品\r\n     * \r\n     * @param string $product\r\n     * @param int $quantity\r\n     */\r\n    public function add($id, Product $product)\r\n    {\r\n        $this-&gt;products[$id] = $product;\r\n    }\r\n     \r\n    /**\r\n     * 获得给定的商品数量\r\n     * \r\n     * @param string $product\r\n     */\r\n    public function getQuantity($id)\r\n    {\r\n        return isset($this-&gt;products[$id]) ? $this-&gt;products[$id] : false;\r\n    }\r\n    /**\r\n     * 获得商品总价\r\n     * \r\n     * @return float\r\n     */\r\n    public function getTotal()\r\n    {\r\n        $total = 0.00;\r\n                 \r\n        foreach($this-&gt;products as $item)\r\n        {\r\n            $total += $item-&gt;getPrice();\r\n        }\r\n        return round($total, 2);;\r\n    }\r\n}\r\n \r\n$cart = new Cart;\r\n \r\n$apple  = new Product(1, \'苹果\', 2, 1.23);\r\n$banner = new Product(2, \'香蕉\', 1, 1.70);\r\n// 往购物车里添加条目\r\n \r\n$cart-&gt;add(1, $apple);\r\n$cart-&gt;add(2, $banner);\r\n \r\nprint \"Total: \" . $cart-&gt;getTotal();</code></pre>\r\n', null, '超级简单的购物车类', '1', '6', null, '2016-07-21 16:46:21', '2016-07-21 16:46:21', null);
INSERT INTO `notes` VALUES ('27', 'php 分页类', null, '<pre>\r\n<code class=\"brush:php\">function Pager($total, $pageSize) \r\n{\r\n    $query   = \'\';\r\n    parse_str($_SERVER[\'QUERY_STRING\'], $query);\r\n    $page    = intval($query[\'page\']) &gt; 0 ? intval($query[\'page\']) : 1;\r\n    $numPage = ceil($total / $pageSize);\r\n    if($page &gt; $numPage) \r\n    {\r\n        $page = $numPage;\r\n    }\r\n    $pageleft  = $page &gt;= 4 ? $page - 4 : 1;\r\n    $pageright = $page + 4 &lt;= $numPage ? $page + 4 : $numPage;\r\n    // Preview page\r\n    $links = \'\';\r\n    if(1 &lt; $page)\r\n    {\r\n        $query[\'page\'] = $page - 1;\r\n        $url = $_SERVER[\'PHP_SELF\'].\'?\'.http_build_query($query);\r\n        $links .= \"\\n&lt;a class=\\\"pagePreview\\\" href=\\\"{$url}\\\"&gt;PREV&lt;/a&gt;\\n\";\r\n    }\r\n    // First page\r\n    if(1 &lt; $pageleft)\r\n    {\r\n        $query[\'page\'] = 1;\r\n        $url    = $_SERVER[\'PHP_SELF\'].\'?\'.http_build_query($query);\r\n        $links .= \"\\n&lt;a class=\\\"pageFirst\\\" href=\\\"{$url}\\\"&gt;1...&lt;/a&gt;\\n\";\r\n    }\r\n    // Page list\r\n    for($i = $pageleft; $i &lt;= $pageright; $i++) \r\n    {\r\n        if($page == $i) \r\n        {\r\n            $links .= \"\\n&lt;span class=\\\"self\\\"&gt;{$i}&lt;/span&gt;\\n\";\r\n        } \r\n        else\r\n        {\r\n            $query[\'page\'] = $i;\r\n            $url    = $_SERVER[\'PHP_SELF\'].\'?\'.http_build_query($query);\r\n            $links .= \"\\n&lt;a href=\\\"{$url}\\\"&gt;{$i}&lt;/a&gt;\\n\";\r\n        }\r\n    }\r\n    // Last page\r\n    if($pageright &lt; $numPage) \r\n    {\r\n        $query[\'page\'] = $numPage;\r\n        $url    = $_SERVER[\'PHP_SELF\'].\'?\'.http_build_query($query);\r\n        $links .= \"\\n&lt;a href=\\\"{$url}\\\"&gt;...{$numPage}&lt;/a&gt;\\n\";\r\n    }\r\n    // Next page\r\n    if($numPage &gt; $page) \r\n    {\r\n        $query[\'page\'] = $page + 1;\r\n        $url    = $_SERVER[\'PHP_SELF\'].\'?\'.http_build_query($query);            \r\n        $links .= \"\\n&lt;a href=\\\"{$url}\\\"&gt;NEXT&lt;/a&gt;\\n\";\r\n    }\r\n    return $links;\r\n}\r\n \r\n$pageSize = 10;\r\n$total= 1000;\r\n$pagedisplay = pager($total, $pageSize);</code></pre>\r\n', null, '简单好用的分页方法', '1', '6', null, '2016-07-21 16:47:28', '2016-07-21 16:47:28', null);
INSERT INTO `notes` VALUES ('32', 'Laravel 速记表', null, '<pre>\r\n<code class=\"brush:php\">Artisan\r\n\r\nphp artisan tail [--path[=\"...\"]] [--lines[=\"...\"]] [connection]\r\n\r\n\r\nComposer\r\n\r\ncomposer create-project laravel/laravel folder_name\r\ncomposer install\r\ncomposer update\r\ncomposer dump-autoload [--optimize]\r\ncomposer self-update\r\n\r\n\r\nConfiguration\r\n\r\nConfig::get(\'app.timezone\');\r\n//get with Default value Config::get(\'app.timezone\', \'UTC\');\r\n//set Configuration Config::set(\'database.default\', \'sqlite\');\r\n\r\n\r\nRouting\r\n\r\nRoute::get(\'foo\', function(){});\r\nRoute::get(\'foo\', \'ControllerName@function \');\r\nRoute::controller(\'foo\', \'FooController\');\r\n\r\n\r\nRESTful Controllers\r\n\r\nRoute::resource(\'posts\',\'PostsController\');\r\n//Specify a subset of actions to handle on the route Route::resource(\'photo\', \'PhotoController\',[\'only\' =&gt; [\'index\', \'show\']]);\r\nRoute::resource(\'photo\', \'PhotoController\',[\'except\' =&gt; [\'update\', \'destroy\']]);\r\n\r\n\r\nTriggering Errors\r\n\r\nApp::abort(404);\r\nApp::missing(function($exception){});\r\nthrow new NotFoundHttpException;\r\n\r\n\r\nRoute Parameters\r\n\r\nRoute::get(\'foo/{bar}\', function($bar){});\r\nRoute::get(\'foo/{bar?}\', function($bar = \'bar\'){});\r\n\r\n\r\nHTTP Verbs\r\n\r\nRoute::any(\'foo\', function(){});\r\nRoute::post(\'foo\', function(){});\r\nRoute::put(\'foo\', function(){});\r\nRoute::patch(\'foo\', function(){});\r\nRoute::delete(\'foo\', function(){});\r\n// RESTful actions Route::resource(\'foo\', \'FooController\');\r\n\r\n\r\nSecure Routes\r\n\r\nRoute::get(\'foo\', array(\'https\', function(){}));\r\n\r\nRoute Constraints\r\n\r\nRoute::get(\'foo/{bar}\', function($bar){})\r\n    -&gt;where(\'bar\', \'[0-9]+\');\r\nRoute::get(\'foo/{bar}/{baz}\', function($bar, $baz){})\r\n    -&gt;where(array(\'bar\' =&gt; \'[0-9]+\', \'baz\' =&gt; \'[A-Za-z]\'))\r\n\r\n\r\n// Set a pattern to be used across routes Route::pattern(\'bar\', \'[0-9]+\')\r\n\r\n\r\nFilters\r\n\r\n// Declare an auth filter Route::filter(\'auth\', function(){});\r\n// Register a class as a filter Route::filter(\'foo\', \'FooFilter\');\r\nRoute::get(\'foo\', array(\'before\' =&gt; \'auth\', function(){}));\r\n// Routes in this group are guarded by the \'auth\' filter Route::get(\'foo\', array(\'before\' =&gt; \'auth\', function(){}));\r\nRoute::group(array(\'before\' =&gt; \'auth\'), function(){});\r\n// Pattern filter Route::when(\'foo/*\', \'foo\');\r\n// HTTP verb pattern Route::when(\'foo/*\', \'foo\', array(\'post\'));\r\n\r\n\r\nNamed Routes\r\n\r\nRoute::currentRouteName();\r\nRoute::get(\'foo/bar\', array(\'as\' =&gt; \'foobar\', function(){}));\r\n\r\n\r\nRoute Prefixing\r\n\r\n// This route group will carry the prefix \'foo\' Route::group(array(\'prefix\' =&gt; \'foo\'), function(){})\r\n\r\n\r\nRoute Namespacing\r\n\r\n// This route group will carry the namespace \'Foo\\Bar\' Route::group(array(\'namespace\' =&gt; \'Foo\\Bar\'), function(){})\r\n\r\n\r\nSub-Domain Routing\r\n\r\n// {sub} will be passed to the closure Route::group(array(\'domain\' =&gt; \'{sub}.example.com\'), function(){});\r\n\r\n\r\nApp\r\n\r\nApp::environment();\r\n// test equal to App::environment(\'local\');\r\nApp::runningInConsole();\r\nApp::runningUnitTests();\r\n\r\n\r\nLog\r\n\r\nLog::info(\'info\');\r\nLog::info(\'info\',array(\'context\'=&gt;\'additional info\'));\r\nLog::error(\'error\');\r\nLog::warning(\'warning\');\r\n// get monolog instance Log::getMonolog();\r\n// add listener Log::listen(function($level, $message, $context) {});\r\n// get all ran queries. DB::getQueryLog();\r\n\r\n\r\nURLs\r\n\r\nURL::full();\r\nURL::current();\r\nURL::previous();\r\nURL::to(\'foo/bar\', $parameters, $secure);\r\nURL::action(\'FooController@method \', $parameters, $absolute);\r\nURL::route(\'foo\', $parameters, $absolute);\r\nURL::secure(\'foo/bar\', $parameters);\r\nURL::asset(\'css/foo.css\', $secure);\r\nURL::secureAsset(\'css/foo.css\');\r\nURL::isValidUrl(\'http://example.com\');\r\nURL::getRequest();\r\nURL::setRequest($request);\r\nURL::getGenerator();\r\nURL::setGenerator($generator);\r\n\r\n\r\nEvents\r\n\r\nEvent::fire(\'foo.bar\', array($bar));\r\nEvent::listen(\'foo.bar\', function($bar){});\r\nEvent::listen(\'foo.*\', function($bar){});\r\nEvent::listen(\'foo.bar\', \'FooHandler\', 10);\r\nEvent::listen(\'foo.bar\', \'BarHandler\', 5);\r\nEvent::listen(\'foor.bar\', function($event){ return false; });\r\nEvent::queue(\'foo\', array($bar));\r\nEvent::flusher(\'foo\', function($bar){});\r\nEvent::flush(\'foo\');\r\nEvent::forget(\'foo\');\r\nEvent::subscribe(new FooEventHandler);\r\n\r\n\r\nDatabase\r\n\r\nDB::connection(\'connection_name\');\r\nDB::statement(\'drop table users\');\r\nDB::listen(function($sql, $bindings, $time){ code_here; });\r\nDB::transaction(function(){ transaction_code_here; });\r\n// Cache a query for $time minutes DB::table(\'users\')-&gt;remember($time)-&gt;get();\r\n// Escape raw input DB::raw(\'sql expression here\');\r\n\r\n\r\nSelects\r\n\r\nDB::table(\'name\')-&gt;get();\r\nDB::table(\'name\')-&gt;distinct()-&gt;get();\r\nDB::table(\'name\')-&gt;select(\'column as column_alias\')-&gt;get();\r\nDB::table(\'name\')-&gt;where(\'name\', \'=\', \'John\')-&gt;get();\r\nDB::table(\'name\')-&gt;whereBetween(\'column\', array(1, 100))-&gt;get();\r\nDB::table(\'name\')-&gt;whereIn(\'column\', array(1, 2, 3))-&gt;get();\r\nDB::table(\'name\')-&gt;whereNotIn(\'column\', array(1, 2, 3))-&gt;get();\r\nDB::table(\'name\')-&gt;whereNull(\'column\')-&gt;get();\r\nDB::table(\'name\')-&gt;whereNotNull(\'column\')-&gt;get();\r\nDB::table(\'name\')-&gt;groupBy(\'column\')-&gt;get();\r\n// Default Eloquent sort is ascendant DB::table(\'name\')-&gt;orderBy(\'column\')-&gt;get();\r\nDB::table(\'name\')-&gt;orderBy(\'column\',\'desc\')-&gt;get();\r\nDB::table(\'name\')-&gt;having(\'count\', \'&gt;\', 100)-&gt;get();\r\nDB::table(\'name\')-&gt;skip(10)-&gt;take(5)-&gt;get();\r\nDB::table(\'name\')-&gt;first();\r\nDB::table(\'name\')-&gt;pluck(\'column\');\r\nDB::table(\'name\')-&gt;lists(\'column\');\r\n// Joins DB::table(\'name\')-&gt;join(\'table\', \'name.id\', \'=\', \'table.id\')\r\n    -&gt;select(\'name.id\', \'table.email\');\r\n\r\n\r\nInserts, Updates, Deletes\r\n\r\nDB::table(\'name\')-&gt;insert(array(\'name\' =&gt; \'John\', \'email\' =&gt; \'john@example.com\'));\r\nDB::table(\'name\')-&gt;insertGetId(array(\'name\' =&gt; \'John\', \'email\' =&gt; \'john@example.com\'));\r\n// Batch insert DB::table(\'name\')-&gt;insert(array(\r\n    array(\'name\' =&gt; \'John\', \'email\' =&gt; \'john@example.com\'),\r\n    array(\'name\' =&gt; \'James\', \'email\' =&gt; \'james@example.com\')\r\n));\r\n// Update an entry DB::table(\'name\')-&gt;where(\'name\', \'=\', \'John\')\r\n    -&gt;update(array(\'email\' =&gt; \'john@example2.com\'));\r\n// Delete everything from a table DB::table(\'name\')-&gt;delete();\r\n// Delete specific records DB::table(\'name\')-&gt;where(\'id\', \'&gt;\', \'10\')-&gt;delete();\r\nDB::table(\'name\')-&gt;truncate();\r\n\r\n\r\nAggregates\r\n\r\nDB::table(\'name\')-&gt;count();\r\nDB::table(\'name\')-&gt;max(\'column\');\r\nDB::table(\'name\')-&gt;min(\'column\');\r\nDB::table(\'name\')-&gt;avg(\'column\');\r\nDB::table(\'name\')-&gt;sum(\'column\');\r\nDB::table(\'name\')-&gt;increment(\'column\');\r\nDB::table(\'name\')-&gt;increment(\'column\', $amount);\r\nDB::table(\'name\')-&gt;decrement(\'column\');\r\nDB::table(\'name\')-&gt;decrement(\'column\', $amount);\r\nDB::table(\'name\')-&gt;remember(5)-&gt;get();\r\nDB::table(\'name\')-&gt;remember(5, \'cache-key-name\')-&gt;get();\r\nDB::table(\'name\')-&gt;cacheTags(\'my-key\')-&gt;remember(5)-&gt;get();\r\nDB::table(\'name\')-&gt;cacheTags(array(\'my-first-key\',\'my-second-key\'))-&gt;remember(5)-&gt;get();\r\n\r\n\r\nRaw Expressions\r\n\r\n// return rows DB::select(\'select * from users where id = ?\', array(\'value\'));\r\n// return nr affected rows DB::insert(\'insert into foo set bar=2\');\r\nDB::update(\'update foo set bar=2\');\r\nDB::delete(\'delete from bar\');\r\n// returns void DB::statement(\'update foo set bar=2\');\r\n// raw expression inside a statement DB::table(\'name\')-&gt;select(DB::raw(\'count(*) as count, column2\'))-&gt;get();\r\n\r\n\r\nEloquent\r\n\r\nModel::create(array(\'key\' =&gt; \'value\'));\r\n// Find first matching record by attributes or create Model::firstOrCreate(array(\'key\' =&gt; \'value\'));\r\n// Find first record by attributes or instantiate Model::firstOrNew(array(\'key\' =&gt; \'value\'));\r\n// Create or update a record matching attibutes, and fill with values Model::updateOrCreate(array(\'search_key\' =&gt; \'search_value\'), array(\'key\' =&gt; \'value\'));\r\n// Fill a model with an array of attributes, beware of mass assignment! Model::fill($attributes);\r\nModel::destroy(1);\r\nModel::all();\r\nModel::find(1);\r\n// Find using dual primary key Model::find(array(\'first\', \'last\'));\r\n// Throw an exception if the lookup fails Model::findOrFail(1);\r\n// Find using dual primary key and throw exception if the lookup fails Model::findOrFail(array(\'first\', \'last\'));\r\nModel::where(\'foo\', \'=\', \'bar\')-&gt;get();\r\nModel::where(\'foo\', \'=\', \'bar\')-&gt;first();\r\n// dynamic Model::whereFoo(\'bar\')-&gt;first();\r\n// Throw an exception if the lookup fails Model::where(\'foo\', \'=\', \'bar\')-&gt;firstOrFail();\r\nModel::where(\'foo\', \'=\', \'bar\')-&gt;count();\r\nModel::where(\'foo\', \'=\', \'bar\')-&gt;delete();\r\n//Output raw query Model::where(\'foo\', \'=\', \'bar\')-&gt;toSql();\r\nModel::whereRaw(\'foo = bar and cars = 2\', array(20))-&gt;get();\r\nModel::remember(5)-&gt;get();\r\nModel::remember(5, \'cache-key-name\')-&gt;get();\r\nModel::cacheTags(\'my-tag\')-&gt;remember(5)-&gt;get();\r\nModel::cacheTags(array(\'my-first-key\',\'my-second-key\'))-&gt;remember(5)-&gt;get();\r\nModel::on(\'connection-name\')-&gt;find(1);\r\nModel::with(\'relation\')-&gt;get();\r\nModel::all()-&gt;take(10);\r\nModel::all()-&gt;skip(10);\r\n// Default Eloquent sort is ascendant Model::all()-&gt;orderBy(\'column\');\r\nModel::all()-&gt;orderBy(\'column\',\'desc\');\r\n\r\n\r\nSoft Delete\r\n\r\nModel::withTrashed()-&gt;where(\'cars\', 2)-&gt;get();\r\n// Include the soft deleted models in the results Model::withTrashed()-&gt;where(\'cars\', 2)-&gt;restore();\r\nModel::where(\'cars\', 2)-&gt;forceDelete();\r\n// Force the result set to only included soft deletes Model::onlyTrashed()-&gt;where(\'cars\', 2)-&gt;get();\r\n\r\n\r\nEvents\r\n\r\nModel::creating(function($model){});\r\nModel::created(function($model){});\r\nModel::updating(function($model){});\r\nModel::updated(function($model){});\r\nModel::saving(function($model){});\r\nModel::saved(function($model){});\r\nModel::deleting(function($model){});\r\nModel::deleted(function($model){});\r\nModel::observe(new FooObserver);\r\n\r\n\r\nEloquent Configuration\r\n\r\n// Disables mass assignment exceptions from being thrown from model inserts and updates Eloquent::unguard();\r\n// Renables any ability to throw mass assignment exceptions Eloquent::reguard();\r\n\r\n\r\nPagination\r\n\r\n// Auto-Magic Pagination Model::paginate(15);\r\nModel::where(\'cars\', 2)-&gt;paginate(15);\r\n// \"Next\" and \"Previous\" only Model::where(\'cars\', 2)-&gt;simplePaginate(15);\r\n// Manual Paginator Paginator::make($items, $totalItems, $perPage);\r\n// Print page navigators in view $variable-&gt;links();\r\n\r\n\r\nSchema\r\n\r\n// Indicate that the table needs to be created Schema::create(\'table\', function($table)\r\n{\r\n    $table-&gt;increments(\'id\');\r\n});\r\n// Specify a Connection Schema::connection(\'foo\')-&gt;create(\'table\', function($table){});\r\n// Rename the table to a given name Schema::rename($from, $to);\r\n// Indicate that the table should be dropped Schema::drop(\'table\');\r\n// Indicate that the table should be dropped if it exists Schema::dropIfExists(\'table\');\r\n// Determine if the given table exists Schema::hasTable(\'table\');\r\n// Determine if the given table has a given column Schema::hasColumn(\'table\', \'column\');\r\n// Update an existing table Schema::table(\'table\', function($table){});\r\n// Indicate that the given columns should be renamed $table-&gt;renameColumn(\'from\', \'to\');\r\n// Indicate that the given columns should be dropped $table-&gt;dropColumn(string|array);\r\n// The storage engine that should be used for the table $table-&gt;engine = \'InnoDB\';\r\n// Only work on MySQL $table-&gt;string(\'name\')-&gt;after(\'email\');\r\n\r\n\r\nIndexes\r\n\r\n$table-&gt;string(\'column\')-&gt;unique();\r\n$table-&gt;primary(\'column\');\r\n// Creates a dual primary key $table-&gt;primary(array(\'first\', \'last\'));\r\n$table-&gt;unique(\'column\');\r\n$table-&gt;unique(\'column\', \'key_name\');\r\n// Creates a dual unique index $table-&gt;unique(array(\'first\', \'last\'));\r\n$table-&gt;unique(array(\'first\', \'last\'), \'key_name\');\r\n$table-&gt;index(\'column\');\r\n$table-&gt;index(\'column\', \'key_name\');\r\n// Creates a dual index $table-&gt;index(array(\'first\', \'last\'));\r\n$table-&gt;index(array(\'first\', \'last\'), \'key_name\');\r\n$table-&gt;dropPrimary(\'table_column_primary\');\r\n$table-&gt;dropUnique(\'table_column_unique\');\r\n$table-&gt;dropIndex(\'table_column_index\');\r\n\r\n\r\nForeign Keys\r\n\r\n$table-&gt;foreign(\'user_id\')-&gt;references(\'id\')-&gt;on(\'users\');\r\n$table-&gt;foreign(\'user_id\')-&gt;references(\'id\')-&gt;on(\'users\')-&gt;onDelete(\'cascade\'|\'restrict\'|\'set null\'|\'no action\');\r\n$table-&gt;foreign(\'user_id\')-&gt;references(\'id\')-&gt;on(\'users\')-&gt;onUpdate(\'cascade\'|\'restrict\'|\'set null\'|\'no action\');\r\n$table-&gt;dropForeign(\'posts_user_id_foreign\');\r\n\r\n\r\nColumn Types\r\n\r\n// Increments $table-&gt;increments(\'id\');\r\n$table-&gt;bigIncrements(\'id\');\r\n\r\n// Numbers $table-&gt;integer(\'votes\');\r\n$table-&gt;tinyInteger(\'votes\');\r\n$table-&gt;smallInteger(\'votes\');\r\n$table-&gt;mediumInteger(\'votes\');\r\n$table-&gt;bigInteger(\'votes\');\r\n$table-&gt;float(\'amount\');\r\n$table-&gt;double(\'column\', 15, 8);\r\n$table-&gt;decimal(\'amount\', 5, 2);\r\n\r\n//String and Text $table-&gt;char(\'name\', 4);\r\n$table-&gt;string(\'email\');\r\n$table-&gt;string(\'name\', 100);\r\n$table-&gt;text(\'description\');\r\n$table-&gt;mediumText(\'description\');\r\n$table-&gt;longText(\'description\');\r\n\r\n//Date and Time $table-&gt;date(\'created_at\');\r\n$table-&gt;dateTime(\'created_at\');\r\n$table-&gt;time(\'sunrise\');\r\n$table-&gt;timestamp(\'added_on\');\r\n$table-&gt;timestamps();\r\n// Adds created_at and updated_at columns $table-&gt;nullableTimestamps();\r\n\r\n// Others $table-&gt;binary(\'data\');\r\n$table-&gt;boolean(\'confirmed\');\r\n$table-&gt;softDeletes();\r\n// Adds deleted_at column for soft deletes $table-&gt;enum(\'choices\', array(\'foo\', \'bar\'));\r\n$table-&gt;rememberToken();\r\n// Adds remember_token as VARCHAR(100) NULL $table-&gt;morphs(\'parent\');\r\n// Adds INTEGER parent_id and STRING parent_type -&gt;nullable()\r\n-&gt;default($value)\r\n    -&gt;unsigned()\r\n\r\n\r\nInput\r\n\r\nInput::get(\'key\');\r\n// Default if the key is missing Input::get(\'key\', \'default\');\r\nInput::has(\'key\');\r\nInput::all();\r\n// Only retrieve \'foo\' and \'bar\' when getting input Input::only(\'foo\', \'bar\');\r\n// Disregard \'foo\' when getting input Input::except(\'foo\');\r\nInput::flush();\r\n\r\n\r\nSession Input (flash)\r\n\r\n// Flash input to the session Input::flash();\r\n// Flash only some of the input to the session Input::flashOnly(\'foo\', \'bar\');\r\n// Flash only some of the input to the session Input::flashExcept(\'foo\', \'baz\');\r\n// Retrieve an old input item Input::old(\'key\',\'default_value\');\r\n\r\n\r\nFiles\r\n\r\n// Use a file that\'s been uploaded Input::file(\'filename\');\r\n// Determine if a file was uploaded Input::hasFile(\'filename\');\r\n// Access file properties Input::file(\'name\')-&gt;getRealPath();\r\nInput::file(\'name\')-&gt;getClientOriginalName();\r\nInput::file(\'name\')-&gt;getClientOriginalExtension();\r\nInput::file(\'name\')-&gt;getSize();\r\nInput::file(\'name\')-&gt;getMimeType();\r\n// Move an uploaded file Input::file(\'name\')-&gt;move($destinationPath);\r\n// Move an uploaded file Input::file(\'name\')-&gt;move($destinationPath, $fileName);\r\n\r\n\r\nCache\r\n\r\nCache::put(\'key\', \'value\', $minutes);\r\nCache::add(\'key\', \'value\', $minutes);\r\nCache::forever(\'key\', \'value\');\r\nCache::remember(\'key\', $minutes, function(){ return \'value\' });\r\nCache::rememberForever(\'key\', function(){ return \'value\' });\r\nCache::forget(\'key\');\r\nCache::has(\'key\');\r\nCache::get(\'key\');\r\nCache::get(\'key\', \'default\');\r\nCache::get(\'key\', function(){ return \'default\'; });\r\nCache::tags(\'my-tag\')-&gt;put(\'key\',\'value\', $minutes);\r\nCache::tags(\'my-tag\')-&gt;has(\'key\');\r\nCache::tags(\'my-tag\')-&gt;get(\'key\');\r\nCache::tags(\'my-tag\')-&gt;forget(\'key\');\r\nCache::tags(\'my-tag\')-&gt;flush();\r\nCache::increment(\'key\');\r\nCache::increment(\'key\', $amount);\r\nCache::decrement(\'key\');\r\nCache::decrement(\'key\', $amount);\r\nCache::section(\'group\')-&gt;put(\'key\', $value);\r\nCache::section(\'group\')-&gt;get(\'key\');\r\nCache::section(\'group\')-&gt;flush();\r\n\r\n\r\nCookies\r\n\r\nCookie::get(\'key\');\r\nCookie::get(\'key\', \'default\');\r\n// Create a cookie that lasts for ever Cookie::forever(\'key\', \'value\');\r\n// Create a cookie that lasts N minutes Cookie::make(\'key\', \'value\', \'minutes\');\r\n// Set a cookie before a response has been created Cookie::queue(\'key\', \'value\', \'minutes\');\r\n// Forget cookie Cookie::forget(\'key\');\r\n// Send a cookie with a response $response = Response::make(\'Hello World\');\r\n// Add a cookie to the response $response-&gt;withCookie(Cookie::make(\'name\', \'value\', $minutes));\r\n\r\n\r\nSessions\r\n\r\nSession::get(\'key\');\r\n// Returns an item from the session Session::get(\'key\', \'default\');\r\nSession::get(\'key\', function(){ return \'default\'; });\r\n// Get the session ID Session::getId();\r\n// Put a key / value pair in the session Session::put(\'key\', \'value\');\r\n// Push a value into an array in the session Session::push(\'foo.bar\',\'value\');\r\n// Returns all items from the session Session::all();\r\n// Checks if an item is defined Session::has(\'key\');\r\n// Remove an item from the session Session::forget(\'key\');\r\n// Remove all of the items from the session Session::flush();\r\n// Generate a new session identifier Session::regenerate();\r\n// Flash a key / value pair to the session Session::flash(\'key\', \'value\');\r\n// Reflash all of the session flash data Session::reflash();\r\n// Reflash a subset of the current flash data Session::keep(array(\'key1\', \'key2\'));\r\n\r\n\r\nRequests\r\n\r\n// url: http://xx.com/aa/bb Request::url();\r\n// path: /aa/bb Request::path();\r\n// getRequestUri: /aa/bb/?c=d Request::getRequestUri();\r\n// Returns user\'s IP Request::getClientIp();\r\n// getUri: http://xx.com/aa/bb/?c=d Request::getUri();\r\n// getQueryString: c=d Request::getQueryString();\r\n// Get the port scheme of the request (e.g., 80, 443, etc.) Request::getPort();\r\n// Determine if the current request URI matches a pattern Request::is(\'foo/*\');\r\n// Get a segment from the URI (1 based index) Request::segment(1);\r\n// Retrieve a header from the request Request::header(\'Content-Type\');\r\n// Retrieve a server variable from the request Request::server(\'PATH_INFO\');\r\n// Determine if the request is the result of an AJAX call Request::ajax();\r\n// Determine if the request is over HTTPS Request::secure();\r\n// Get the request method Request::method();\r\n// Checks if the request method is of specified type Request::isMethod(\'post\');\r\n// Get raw POST data Request::instance()-&gt;getContent();\r\n// Get requested response format Request::format();\r\n// true if HTTP Content-Type header contains */json Request::isJson();\r\n// true if HTTP Accept header is application/json Request::wantsJson();\r\n\r\n\r\n\r\nResponses\r\n\r\nreturn Response::make($contents);\r\nreturn Response::make($contents, 200);\r\nreturn Response::json(array(\'key\' =&gt; \'value\'));\r\nreturn Response::json(array(\'key\' =&gt; \'value\'))\r\n    -&gt;setCallback(Input::get(\'callback\'));\r\nreturn Response::download($filepath);\r\nreturn Response::download($filepath, $filename, $headers);\r\n// Create a response and modify a header value $response = Response::make($contents, 200);\r\n$response-&gt;header(\'Content-Type\', \'application/json\');\r\nreturn $response;\r\n// Attach a cookie to a response return Response::make($content)\r\n    -&gt;withCookie(Cookie::make(\'key\', \'value\'));\r\n\r\n\r\nRedirects\r\n\r\nreturn Redirect::to(\'foo/bar\');\r\nreturn Redirect::to(\'foo/bar\')-&gt;with(\'key\', \'value\');\r\nreturn Redirect::to(\'foo/bar\')-&gt;withInput(Input::get());\r\nreturn Redirect::to(\'foo/bar\')-&gt;withInput(Input::except(\'password\'));\r\nreturn Redirect::to(\'foo/bar\')-&gt;withErrors($validator);\r\n// Create a new redirect response to the previous location return Redirect::back();\r\n// Create a new redirect response to a named route return Redirect::route(\'foobar\');\r\nreturn Redirect::route(\'foobar\', array(\'value\'));\r\nreturn Redirect::route(\'foobar\', array(\'key\' =&gt; \'value\'));\r\n// Create a new redirect response to a controller action return Redirect::action(\'FooController@index\');\r\nreturn Redirect::action(\'FooController@baz\', array(\'value\'));\r\nreturn Redirect::action(\'FooController@baz\', array(\'key\' =&gt; \'value\'));\r\n// If intended redirect is not defined, defaults to foo/bar. return Redirect::intended(\'foo/bar\');\r\n\r\n\r\nIoC\r\n\r\nApp::bind(\'foo\', function($app){ return new Foo; });\r\nApp::make(\'foo\');\r\n// If this class exists, it\'s returned App::make(\'FooBar\');\r\n// Register a shared binding in the container App::singleton(\'foo\', function(){ return new Foo; });\r\n// Register an existing instance as shared in the container App::instance(\'foo\', new Foo);\r\n// Register a binding with the container App::bind(\'FooRepositoryInterface\', \'BarRepository\');\r\n// Register a service provider with the application App::register(\'FooServiceProvider\');\r\n// Listen for object resolution App::resolving(function($object){});\r\n\r\n\r\nSecurity\r\nPasswords\r\n\r\nHash::make(\'secretpassword\');\r\nHash::check(\'secretpassword\', $hashedPassword);\r\nHash::needsRehash($hashedPassword);\r\n\r\n\r\nAuth\r\n\r\n// Determine if the current user is authenticated Auth::check();\r\n// Get the currently authenticated user Auth::user();\r\n// Get the ID of the currently authenticated user Auth::id();\r\n// Attempt to authenticate a user using the given credentials Auth::attempt(array(\'email\' =&gt; $email, \'password\' =&gt; $password));\r\n// \'Remember me\' by passing true to Auth::attempt() Auth::attempt($credentials, true);\r\n// Log in for a single request Auth::once($credentials);\r\n// Log a user into the application Auth::login(User::find(1));\r\n// Log the given user ID into the application Auth::loginUsingId(1);\r\n// Log the user out of the application Auth::logout();\r\n// Validate a user\'s credentials Auth::validate($credentials);\r\n// Attempt to authenticate using HTTP Basic Auth Auth::basic(\'username\');\r\n// Perform a stateless HTTP Basic login attempt Auth::onceBasic();\r\n// Send a password reminder to a user Password::remind($credentials, function($message, $user){});\r\n\r\n\r\nEncryption\r\n\r\nCrypt::encrypt(\'secretstring\');\r\nCrypt::decrypt($encryptedString);\r\nCrypt::setMode(\'ctr\');\r\nCrypt::setCipher($cipher);\r\n\r\n\r\nMail\r\n\r\nMail::send(\'email.view\', $data, function($message){});\r\nMail::send(array(\'html.view\', \'text.view\'), $data, $callback);\r\nMail::queue(\'email.view\', $data, function($message){});\r\nMail::queueOn(\'queue-name\', \'email.view\', $data, $callback);\r\nMail::later(5, \'email.view\', $data, function($message){});\r\n// Write all email to logs instead of sending Mail::pretend();\r\n\r\n\r\nMessages\r\n\r\n// These can be used on the $message instance passed into Mail::send() or Mail::queue() $message-&gt;from(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;sender(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;returnPath(\'email@example.com\');\r\n$message-&gt;to(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;cc(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;bcc(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;replyTo(\'email@example.com\', \'Mr. Example\');\r\n$message-&gt;subject(\'Welcome to the Jungle\');\r\n$message-&gt;priority(2);\r\n$message-&gt;attach(\'foo\\bar.txt\', $options);\r\n// This uses in-memory data as attachments $message-&gt;attachData(\'bar\', \'Data Name\', $options);\r\n// Embed a file in the message and get the CID $message-&gt;embed(\'foo\\bar.txt\');\r\n$message-&gt;embedData(\'foo\', \'Data Name\', $options);\r\n// Get the underlying Swift Message instance $message-&gt;getSwiftMessage();\r\n\r\n\r\nQueues\r\n\r\nQueue::push(\'SendMail\', array(\'message\' =&gt; $message));\r\nQueue::push(\'SendEmail@send\', array(\'message\' =&gt; $message));\r\nQueue::push(function($job) use $id {});\r\n// Same payload to multiple workers Queue::bulk(array(\'SendEmail\', \'NotifyUser\'), $payload);\r\n// Starting the queue listener php artisan queue:listen\r\nphp artisan queue:listen connection\r\nphp artisan queue:listen --timeout=60\r\n// Process only the first job on the queue php artisan queue:work\r\n// Start a queue worker in daemon mode php artisan queue:work --daemon\r\n// Create migration file for failed jobs php artisan queue:failed-table\r\n// Listing failed jobs php artisan queue:failed\r\n// Delete failed job by id php artisan queue:forget 5\r\n// Delete all failed jobs php artisan queue:flush\r\n\r\n\r\nValidation\r\n\r\nValidator::make(\r\n    array(\'key\' =&gt; \'Foo\'),\r\n    array(\'key\' =&gt; \'required|in:Foo\')\r\n);\r\nValidator::extend(\'foo\', function($attribute, $value, $params){});\r\nValidator::extend(\'foo\', \'FooValidator@validate\');\r\nValidator::resolver(function($translator, $data, $rules, $msgs)\r\n{\r\n    return new FooValidator($translator, $data, $rules, $msgs);\r\n});\r\n\r\n\r\nRules\r\n\r\naccepted\r\nactive_url\r\nafter:YYYY-MM-DD\r\nbefore:YYYY-MM-DD\r\nalpha\r\nalpha_dash\r\nalpha_num\r\narray\r\n    between:1,10\r\nconfirmed\r\ndate\r\ndate_format:YYYY-MM-DD\r\ndifferent:fieldname\r\ndigits:value\r\ndigits_between:min,max\r\nboolean\r\nemail\r\nexists:table,column\r\nimage\r\nin:foo,bar,...\r\nnot_in:foo,bar,...\r\ninteger\r\nnumeric\r\nip\r\nmax:value\r\nmin:value\r\nmimes:jpeg,png\r\nregex:[0-9]\r\nrequired\r\nrequired_if:field,value\r\nrequired_with:foo,bar,...\r\nrequired_with_all:foo,bar,...\r\nrequired_without:foo,bar,...\r\nrequired_without_all:foo,bar,...\r\nsometimes|required|field\r\nsame:field\r\nsize:value\r\ntimezone\r\nunique:table,column,except,idColumn\r\nurl\r\n\r\n\r\n\r\nViews\r\n\r\nView::make(\'path/to/view\');\r\nView::make(\'foo/bar\')-&gt;with(\'key\', \'value\');\r\nView::make(\'foo/bar\')-&gt;withKey(\'value\');\r\nView::make(\'foo/bar\', array(\'key\' =&gt; \'value\'));\r\nView::exists(\'foo/bar\');\r\n// Share a value across all views View::share(\'key\', \'value\');\r\n// Nesting views View::make(\'foo/bar\')-&gt;nest(\'name\', \'foo/baz\', $data);\r\n// Register a view composer View::composer(\'viewname\', function($view){});\r\n//Register multiple views to a composer View::composer(array(\'view1\', \'view2\'), function($view){});\r\n// Register a composer class View::composer(\'viewname\', \'FooComposer\');\r\nView::creator(\'viewname\', function($view){});\r\n\r\n\r\nBlade Templates\r\n\r\n@extends(\'layout.name\')\r\n// Begin a section @section(\'name\')\r\n// End a section @stop\r\n// End a section and yield @show\r\n@parent\r\n// Show a section in a template @yield(\'name\')\r\n@include(\'view.name\')\r\n@include(\'view.name\', array(\'key\' =&gt; \'value\'));\r\n@lang(\'messages.name\')\r\n@choice(\'messages.name\', 1);\r\n@if\r\n@else\r\n    @elseif\r\n@endif\r\n@unless\r\n@endunless\r\n@for\r\n    @endfor\r\n@foreach\r\n    @endforeach\r\n@while\r\n@endwhile\r\n//forelse 4.2 feature @forelse($users as $user)\r\n@empty\r\n@endforelse\r\n// Echo content {{ $var }}\r\n// Echo escaped content {{{ $var }}}\r\n{{-- Blade Comment --}}\r\n// Echoing Data After Checking For Existence {{{ $name or \'Default\' }}}\r\n// Displaying Raw Text With Curly Braces @{{ This will not be processed by Blade }}\r\n\r\n\r\nForms\r\n\r\nForm::open(array(\'url\' =&gt; \'foo/bar\', \'method\' =&gt; \'PUT\'));\r\nForm::open(array(\'route\' =&gt; \'foo.bar\'));\r\nForm::open(array(\'route\' =&gt; array(\'foo.bar\', $parameter)));\r\nForm::open(array(\'action\' =&gt; \'FooController@method\'));\r\nForm::open(array(\'action\' =&gt; array(\'FooController@method\', $parameter)));\r\nForm::open(array(\'url\' =&gt; \'foo/bar\', \'files\' =&gt; true));\r\nForm::close();\r\nForm::token();\r\nForm::model($foo, array(\'route\' =&gt; array(\'foo.bar\', $foo-&gt;bar)));\r\n\r\n\r\n\r\nForm Elements\r\n\r\nForm::label(\'id\', \'Description\');\r\nForm::label(\'id\', \'Description\', array(\'class\' =&gt; \'foo\'));\r\nForm::text(\'name\');\r\nForm::text(\'name\', $value);\r\nForm::text(\'name\', $value, array(\'class\' =&gt; \'name\'));\r\nForm::textarea(\'name\');\r\nForm::textarea(\'name\', $value);\r\nForm::textarea(\'name\', $value, array(\'class\' =&gt; \'name\'));\r\nForm::hidden(\'foo\', $value);\r\nForm::password(\'password\');\r\nForm::password(\'password\', array(\'placeholder\' =&gt; \'Password\'));\r\nForm::email(\'name\', $value, array());\r\nForm::file(\'name\', array(\'class\' =&gt; \'name\'));\r\nForm::checkbox(\'name\', \'value\');\r\n// Generating a checkbox that is checked Form::checkbox(\'name\', \'value\', true, array(\'class\' =&gt; \'name\'));\r\nForm::radio(\'name\', \'value\');\r\n// Generating a radio input that is selected Form::radio(\'name\', \'value\', true, array(\'class\' =&gt; \'name\'));\r\nForm::select(\'name\', array(\'key\' =&gt; \'value\'));\r\nForm::select(\'name\', array(\'key\' =&gt; \'value\'), \'key\', array(\'class\' =&gt; \'name\'));\r\nForm::selectRange(\'range\', 1, 10);\r\nForm::selectYear(\'year\', 2011, 2015);\r\nForm::selectMonth(\'month\');\r\nForm::submit(\'Submit!\', array(\'class\' =&gt; \'name\'));\r\nForm::button(\'name\', array(\'class\' =&gt; \'name\'));\r\nForm::macro(\'fooField\', function()\r\n{\r\n    return \'&lt;input type=\"custom\"/&gt;\';\r\n});\r\nForm::fooField();\r\n\r\n\r\nHTML Builder\r\n\r\nHTML::macro(\'name\', function(){});\r\n// Convert an HTML string to entities HTML::entities($value);\r\n// Convert entities to HTML characters HTML::decode($value);\r\n// Generate a link to a JavaScript file HTML::script($url, $attributes);\r\n// Generate a link to a CSS file HTML::style($url, $attributes);\r\n// Generate an HTML image element HTML::image($url, $alt, $attributes);\r\n// Generate a HTML link HTML::link($url, \'title\', $attributes, $secure);\r\n// Generate a HTTPS HTML link HTML::secureLink($url, \'title\', $attributes);\r\n// Generate a HTML link to an asset HTML::linkAsset($url, \'title\', $attributes, $secure);\r\n// Generate a HTTPS HTML link to an asset HTML::linkSecureAsset($url, \'title\', $attributes);\r\n// Generate a HTML link to a named route HTML::linkRoute($name, \'title\', $parameters, $attributes);\r\n// Generate a HTML link to a controller action HTML::linkAction($action, \'title\', $parameters, $attributes);\r\n// Generate a HTML link to an email address HTML::mailto($email, \'title\', $attributes);\r\n// Obfuscate an e-mail address to prevent spam-bots from sniffing it HTML::email($email);\r\n// Generate an ordered list of items HTML::ol($list, $attributes);\r\n// Generate an un-ordered list of items HTML::ul($list, $attributes);\r\n// Create a listing HTML element HTML::listing($type, $list, $attributes);\r\n// Create the HTML for a listing element HTML::listingElement($key, $type, $value);\r\n// Create the HTML for a nested listing attribute HTML::nestedListing($key, $type, $value);\r\n// Build an HTML attribute string from an array HTML::attributes($attributes);\r\n// Build a single attribute element HTML::attributeElement($key, $value);\r\n// Obfuscate a string to prevent spam-bots from sniffing it HTML::obfuscate($value);\r\n\r\n\r\nStrings\r\n\r\n// Transliterate a UTF-8 value to ASCII Str::ascii($value)\r\nStr::camel($value)\r\nStr::contains($haystack, $needle)\r\nStr::endsWith($haystack, $needles)\r\n// Cap a string with a single instance of a given value. Str::finish($value, $cap)\r\nStr::is($pattern, $value)\r\nStr::length($value)\r\nStr::limit($value, $limit = 100, $end = \'...\')\r\nStr::lower($value)\r\nStr::words($value, $words = 100, $end = \'...\')\r\nStr::plural($value, $count = 2)\r\n// Generate a more truly \"random\" alpha-numeric string. Str::random($length = 16)\r\n// Generate a \"random\" alpha-numeric string. Str::quickRandom($length = 16)\r\nStr::upper($value)\r\nStr::title($value)\r\nStr::singular($value)\r\nStr::slug($title, $separator = \'-\')\r\nStr::snake($value, $delimiter = \'_\')\r\nStr::startsWith($haystack, $needles)\r\n// Convert a value to studly caps case. Str::studly($value)\r\nStr::macro($name, $macro)\r\n\r\n\r\nLocalization\r\n\r\nApp::setLocale(\'en\');\r\nLang::get(\'messages.welcome\');\r\nLang::get(\'messages.welcome\', array(\'foo\' =&gt; \'Bar\'));\r\nLang::has(\'messages.welcome\');\r\nLang::choice(\'messages.apples\', 10);\r\n// Lang::get alias trans(\'messages.welcome\');\r\n\r\n\r\nFiles\r\n\r\nFile::exists(\'path\');\r\nFile::get(\'path\');\r\nFile::getRemote(\'path\');\r\n// Get a file\'s contents by requiring it File::getRequire(\'path\');\r\n// Require the given file once File::requireOnce(\'path\');\r\n// Write the contents of a file File::put(\'path\', \'contents\');\r\n// Append to a file File::append(\'path\', \'data\');\r\n// Delete the file at a given path File::delete(\'path\');\r\n// Move a file to a new location File::move(\'path\', \'target\');\r\n// Copy a file to a new location File::copy(\'path\', \'target\');\r\n// Extract the file extension from a file path File::extension(\'path\');\r\n// Get the file type of a given file File::type(\'path\');\r\n// Get the file size of a given file File::size(\'path\');\r\n// Get the file\'s last modification time File::lastModified(\'path\');\r\n// Determine if the given path is a directory File::isDirectory(\'directory\');\r\n// Determine if the given path is writable File::isWritable(\'path\');\r\n// Determine if the given path is a file File::isFile(\'file\');\r\n// Find path names matching a given pattern. File::glob($patterns, $flag);\r\n// Get an array of all files in a directory. File::files(\'directory\');\r\n// Get all of the files from the given directory (recursive). File::allFiles(\'directory\');\r\n// Get all of the directories within a given directory. File::directories(\'directory\');\r\n// Create a directory File::makeDirectory(\'path\',  $mode = 0777, $recursive = false);\r\n// Copy a directory from one location to another File::copyDirectory(\'directory\', \'destination\', $options = null);\r\n// Recursively delete a directory File::deleteDirectory(\'directory\', $preserve = false);\r\n// Empty the specified directory of all files and folders File::cleanDirectory(\'directory\');\r\n\r\n\r\nHelpers\r\nArrays\r\n\r\narray_add($array, \'key\', \'value\');\r\n// Build a new array using a callback array_build($array, function(){});\r\n// Divide an array into two arrays. One with keys and the other with values array_divide($array);\r\n// Flatten a multi-dimensional associative array with dots array_dot($array);\r\n// Get all of the given array except for a specified array of items array_except($array, array(\'key\'));\r\n// Fetch a flattened array of a nested array element array_fetch($array, \'key\');\r\n// Return the first element in an array passing a given truth test array_first($array, function($key, $value){}, $default);\r\n// Strips keys from the array array_flatten($array);\r\n// Remove one or many array items from a given array using \"dot\" notation array_forget($array, \'foo\');\r\n// Dot notation array_forget($array, \'foo.bar\');\r\n// Get an item from an array using \"dot\" notation array_get($array, \'foo\', \'default\');\r\narray_get($array, \'foo.bar\', \'default\');\r\n// Get a subset of the items from the given array array_only($array, array(\'key\'));\r\n// Return array of key =&gt; values array_pluck($array, \'key\');\r\n// Return and remove \'key\' from array array_pull($array, \'key\');\r\n// Set an array item to a given value using \"dot\" notation array_set($array, \'key\', \'value\');\r\n// Dot notation array_set($array, \'key.subkey\', \'value\');\r\narray_sort($array, function(){});\r\n// First element of an array head($array);\r\n// Last element of an array last($array);\r\n\r\n\r\nPaths\r\n\r\napp_path();\r\n//  Get the path to the public folder public_path();\r\n// App root path base_path();\r\n// Get the path to the storage folder storage_path();\r\n\r\n\r\nStrings\r\n\r\n// Convert a value to camel case camel_case($value);\r\n// Get the class \"basename\" of the given object / class class_basename($class);\r\n// Escape a string e(\'&lt;html&gt;\');\r\n// Determine if a given string starts with a given substring starts_with(\'Foo bar.\', \'Foo\');\r\n// Determine if a given string ends with a given substring ends_with(\'Foo bar.\', \'bar.\');\r\n// Convert a string to snake case snake_case(\'fooBar\');\r\n// Determine if a given string contains a given substring str_contains(\'Hello foo bar.\', \'foo\');\r\n// Result: foo/bar/ str_finish(\'foo/bar\', \'/\');\r\nstr_is(\'foo*\', \'foobar\');\r\nstr_plural(\'car\');\r\nstr_random(25);\r\nstr_limit($value, $limit = 100, $end = \'...\')\r\nstr_singular(\'cars\');\r\n// Result: FooBar studly_case(\'foo_bar\');\r\ntrans(\'foo.bar\');\r\ntrans_choice(\'foo.bar\', $count);\r\n\r\n\r\nURLs and Links\r\n\r\naction(\'FooController@method\', $parameters);\r\nlink_to(\'foo/bar\', $title, $attributes, $secure);\r\nlink_to_asset(\'img/foo.jpg\', $title, $attributes, $secure);\r\nlink_to_route(\'route.name\', $title, $parameters, $attributes);\r\nlink_to_action(\'FooController@method\', $title, $params, $attrs);\r\n// HTML Link asset(\'img/photo.jpg\', $title, $attributes);\r\n// HTTPS link secure_asset(\'img/photo.jpg\', $title, $attributes);\r\nsecure_url(\'path\', $parameters);\r\nroute($route, $parameters, $absolute = true);\r\nurl(\'path\', $parameters = array(), $secure = null);\r\n\r\n\r\nMiscellaneous\r\n\r\ncsrf_token();\r\ndd($value);\r\nvalue(function(){ return \'bar\'; });\r\nwith(new Foo)-&gt;chainedMethod();\r\n\r\n\r\nUnit testing\r\nInstall and run\r\n\r\n// add to composer and update: \"phpunit/phpunit\": \"4.0.*\"\r\n// run tests (from project root) ./vendor/bin/phpunit\r\n\r\n\r\nAsserts\r\n\r\n$this-&gt;assertTrue(true);\r\n$this-&gt;assertEquals(\'foo\', $bar);\r\n$this-&gt;assertCount(1,$times);\r\n$this-&gt;assertResponseOk();\r\n$this-&gt;assertResponseStatus(403);\r\n$this-&gt;assertRedirectedTo(\'foo\');\r\n$this-&gt;assertRedirectedToRoute(\'route.name\');\r\n$this-&gt;assertRedirectedToAction(\'Controller@method\');\r\n$this-&gt;assertViewHas(\'name\');\r\n$this-&gt;assertViewHas(\'age\', $value);\r\n$this-&gt;assertSessionHasErrors();\r\n// Asserting the session has errors for a given key... $this-&gt;assertSessionHasErrors(\'name\');\r\n// Asserting the session has errors for several keys... $this-&gt;assertSessionHasErrors(array(\'name\', \'age\'));\r\n$this-&gt;assertHasOldInput();\r\n\r\n\r\nCalling routes\r\n\r\n$response = $this-&gt;call($method, $uri, $parameters, $files, $server, $content);\r\n$response = $this-&gt;callSecure(\'GET\', \'foo/bar\');\r\n$this-&gt;session([\'foo\' =&gt; \'bar\']);\r\n$this-&gt;flushSession();\r\n$this-&gt;seed();\r\n$this-&gt;seed($connection);\r\n\r\n\r\nSSH\r\nExecuting Commands\r\n\r\nSSH::run(array $commands);\r\nSSH::into($remote)-&gt;run(array $commands); // specify remote, otherwise assumes default\r\nSSH::run(array $commands, function($line)\r\n{\r\n    echo $line.PHP_EOL;\r\n});\r\n\r\n\r\nTasks\r\n\r\nSSH::define($taskName, array $commands); // define\r\nSSH::task($taskName, function($line) // execute {\r\n    echo $line.PHP_EOL;\r\n});\r\n\r\n\r\nSFTP Uploads\r\n\r\nSSH::put($localFile, $remotePath);\r\nSSH::putString($string, $remotePath);\r\n\r\n\r\nFilesystem/Cloud Storage\r\n\r\nStorage::disk(\'s3\');\r\nStorage::disk(\'local\')-&gt;put(\'file.txt\', \'Contents\');\r\nStorage::disk(\'local\')-&gt;get(\'file.jpg\');\r\nStorage::disk(\'s3\')-&gt;exists(\'file.jpg\');\r\nStorage::get(\'file.jpg\');\r\nStorage::put(\'file.jpg\', $contents);\r\nStorage::size(\'file1.jpg\');\r\nStorage::lastModified(\'file1.jpg\');\r\nStorage::copy(\'old/file1.jpg\', \'new/file1.jpg\');\r\nStorage::move(\'old/file1.jpg\', \'new/file1.jpg\');\r\nStorage::prepend(\'file.log\', \'Prepended Text\');\r\nStorage::append(\'file.log\', \'Appended Text\');\r\nStorage::delete([\'file1.jpg\', \'file2.jpg\']);\r\nStorage::files($directory);\r\nStorage::allFiles($directory);\r\nStorage::directories($directory);\r\nStorage::allDirectories($directory);\r\nStorage::makeDirectory($directory);\r\nStorage::deleteDirectory($directory);</code></pre>\r\n', null, '转自：http://cheats.jesse-obrien.ca/#', '1', '7', null, '2016-07-21 17:11:29', '2016-07-21 17:11:29', null);
INSERT INTO `notes` VALUES ('30', 'php 禁止站外提交数据', null, '&nbsp; &nbsp; &nbsp; 很久之前收藏的一段代码片段，用以禁止站外提交数据，今天再次看到这段代码自己都乐了，这样不严谨的代码我现在是不敢用啦！最关键的问题在于依赖HTTP_REFERER这个全局变量，例如直接访问该页面HTTP_REFERER变量就不存在这段代码就轻易跳过了，站外提交这种行为大部份情况都是灌水机干的，表单增加验证码让它提交吧\r\n<pre>\r\n<code class=\"brush:php\">    $curPage = \"http://{$_SERVER[\'SERVER_NAME\']}{$_SERVER[\'PHP_SELF\']}\";\r\n    $ref     = $_SERVER[\'HTTP_REFERER\'];\r\n    echo $curPage;\r\n    echo \'&lt;BR /&gt;\';\r\n    echo $ref;\r\n    if(strcmp($curPage, $ref) ==0) {\r\n        echo \'站内提交\';\r\n    }else{\r\n        echo \'站外提交\';\r\n    }\r\n \r\n&lt;form action=\"&lt;?php echo $_SERVER[\'PHP_SELF\']?&gt;\" method=\"POST\"&gt;\r\n    &lt;input type=\"submit\" value=\"submit\" /&gt;\r\n&lt;/form&gt;</code></pre>\r\n&nbsp;', null, '很久之前收藏的一段代码片段，用以禁止站外提交数据，今天再次看到这段代码自己都乐了，这样不严谨的代码我现在是不敢用啦！最关键的问题在于依赖HTTP_REFERER这个全局变量，例如直接访问该页面HTTP_REFERER变量就不存在这段代码就轻易跳过了，站外提交这种行为大部份情况都是灌水机干的，表单增加验证码让它提交吧', '1', '6', null, '2016-07-21 16:48:12', '2016-07-21 16:49:07', null);
INSERT INTO `notes` VALUES ('31', 'php session_set_save_handler将session数据存入数据库', null, '<pre>\r\n<code class=\"brush:php\">define(\'HOST\', \'localhost\');\r\ndefine(\'USER\', \'root\');\r\ndefine(\'PASS\', \'123456\');\r\ndefine(\'DBNAME\', \'test\');\r\nclass Session2db\r\n{\r\n    /**\r\n     * Database connection resource\r\n     * @var resource\r\n     */\r\n    private static $DB;\r\n\r\n    /**\r\n     * Open the session\r\n     * @return bool\r\n     */\r\n    public static function open()\r\n    {\r\n        if(self::$DB = mysql_connect(HOST,USER,PASS))\r\n        {\r\n            return mysql_select_db(DBNAME, self::$DB);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Close the session\r\n     * @return bool\r\n     */\r\n    public static function close()\r\n    {\r\n        return mysql_close(self::$DB);\r\n    }\r\n    /**\r\n     * Read the session\r\n     * @param   int     session id\r\n     * @return  string  string of the sessoin\r\n     */\r\n    public static function read($id)\r\n    {\r\n        $id = mysql_real_escape_string($id);\r\n        $sql = sprintf(\"SELECT `session_data` FROM `sessions` WHERE `session_id` = \'%s\'\", $id);\r\n        if ($result = mysql_query($sql, self::$DB))\r\n        {\r\n            if (mysql_num_rows($result))\r\n            {\r\n                $record = mysql_fetch_assoc($result);\r\n                return $record[\'session_data\'];\r\n            }\r\n        }\r\n        return \'\';\r\n    }\r\n    /**\r\n     * Write the session\r\n     * @param int       session id\r\n     * @param string    data of the session\r\n     */\r\n    public static function write($id, $data)\r\n    {\r\n        $sql = sprintf(\"REPLACE INTO `sessions` VALUES(\'%s\', \'%s\', \'%s\')\",\r\n            mysql_real_escape_string($id),\r\n            mysql_real_escape_string(time()),\r\n            mysql_real_escape_string($data)\r\n        );\r\n        return mysql_query($sql, self::$DB);\r\n    }\r\n    /**\r\n     * Destoroy the session\r\n     * @param   int session id\r\n     * @return bool\r\n     */\r\n    public static function destroy($id)\r\n    {\r\n        $sql = sprintf(\"DELETE FROM `sessions` WHERE `session_id` = \'%s\'\", $id);\r\n        return mysql_query($sql, self::$DB);\r\n    }\r\n    /**\r\n     * Garbage Collector\r\n     * @param int life time (sec.)\r\n     * @return bool\r\n     * @see session.gc_divisor      100\r\n     * @see session.gc_maxlifetime 1440\r\n     * @see session.gc_probability    1\r\n     * @usage execution rate 1/100\r\n     *        (session.gc_probability/session.gc_divisor)\r\n     */\r\n    public static function gc($max)\r\n    {\r\n        $sql = sprintf(\"DELETE FROM `sessions` WHERE `session_expires` &lt; \'%s\'\",\r\n            mysql_real_escape_string(time() - $max));\r\n        return mysql_query($sql, self::$DB);\r\n    }\r\n}\r\nini_set(\'session.gc_probability\', 100);\r\nini_set(\'session.gc_divisor\', 100);\r\nini_set(\'session.gc_maxlifetime\', 60*30);\r\nini_set(\'session.save_handler\', \'user\');\r\n\r\nsession_set_save_handler(\r\n    array(\'Session2db\', \'open\'),\r\n    array(\'Session2db\', \'close\'),\r\n    array(\'Session2db\', \'read\'),\r\n    array(\'Session2db\', \'write\'),\r\n    array(\'Session2db\', \'destroy\'),\r\n    array(\'Session2db\', \'gc\')\r\n);\r\nsession_start();\r\nsession_regenerate_id(true);</code></pre>\r\n', null, '实现的功能是将session数据存入mysql，优点是可以提速，同时可以利用这个SESSION表做一些统计工作等', '1', '6', null, '2016-07-21 16:51:09', '2016-07-21 16:51:09', null);
INSERT INTO `notes` VALUES ('33', 'php 验证码类', null, '<pre>\r\n<code class=\"brush:php\">&lt;?php\r\n/**\r\n * 验证码\r\n *  \r\n */\r\nclass Captcha\r\n{\r\n    /**\r\n     * 图像标识\r\n     * \r\n     * @var resource \r\n     */\r\n    private $im;\r\n     \r\n    /**\r\n     * 默认配置参数\r\n     * \r\n     * @var array\r\n     */\r\n    private $config = array(\r\n        \'width\'        =&gt; \'200\',\r\n        \'height\'       =&gt; \'50\',\r\n        \'margin\'       =&gt; \'30\',\r\n        \'color\'        =&gt; array(\r\n              \'backGroundColor\' =&gt; array(255, 255, 255),\r\n              \'foreGroundColor\' =&gt; array(0,   0,   0),\r\n              \'font\'            =&gt; array(0,  0,  0)\r\n        ),\r\n        \'font\'         =&gt; array(\'mriam.ttf\', \'mriamc.ttf\', \'nrkis.ttf\', \'rod.ttf\', \'mvboli.ttf\', \'lvnm.ttf\'),\r\n        \'fontSize\'     =&gt; 24,\r\n        \'numPixel\'     =&gt; 100,\r\n        \'numLineNoise\' =&gt; 3,\r\n        \'numCharacter\' =&gt; 4,\r\n    );\r\n    /**\r\n     * 构造方法\r\n     */\r\n    public function __construct($config=array())\r\n    {\r\n        session_start();\r\n        header(\"Content-type: image/png\");\r\n        if(!empty($config))\r\n        {\r\n             $this-&gt;config = array_merge($config, array());  \r\n        }\r\n        $_SESSION[\"imagecode\"] = $this-&gt;randCharacter($this-&gt;config[\'numCharacter\']);\r\n        $this-&gt;im               = imagecreate($this-&gt;config[\'width\'], $this-&gt;config[\'height\']);\r\n    }\r\n     \r\n    /**\r\n     * 取色\r\n     */\r\n    private function getColor($name)\r\n    {\r\n        return imagecolorallocate(\r\n            $this-&gt;im, \r\n            $this-&gt;config[\'color\'][$name][0], \r\n            $this-&gt;config[\'color\'][$name][1], \r\n            $this-&gt;config[\'color\'][$name][2]\r\n        );\r\n    }\r\n \r\n    /**\r\n     * 杂点\r\n     */\r\n    private function drawpixel()\r\n    {\r\n        for ($i=0; $i &lt; $this-&gt;config[\'numPixel\']; $i++) {\r\n            imagefilledellipse(\r\n                $this-&gt;im, \r\n                mt_rand(0, $this-&gt;config[\'width\']), \r\n                mt_rand(0, $this-&gt;config[\'height\']), \r\n                1, \r\n                1, \r\n                $this-&gt;getColor(\'foreGroundColor\')\r\n            );\r\n        }\r\n    }\r\n \r\n    /**\r\n     * 干扰线\r\n     */\r\n    private function drawLine()\r\n    {\r\n        for ($i=0; $i &lt; $this-&gt;config[\'numLineNoise\']; $i++) {\r\n            imageline(\r\n                $this-&gt;im, \r\n                mt_rand(0, $this-&gt;config[\'width\']), \r\n                mt_rand(0, $this-&gt;config[\'height\']), \r\n                mt_rand(0, $this-&gt;config[\'width\']), \r\n                mt_rand(0, $this-&gt;config[\'height\']), \r\n                $this-&gt;getColor(\'foreGroundColor\')\r\n            );\r\n        }\r\n    }\r\n \r\n    /**\r\n     * 随机字符\r\n     */\r\n    private function randCharacter($length)\r\n    {        \r\n        $characters = array_diff(\r\n            array_merge(range(\'a\', \'z\'), range(\'A\',\'Z\'), range(0, 9)), \r\n            array(\'o\', \'0\', \'O\', \'1\', \'l\')\r\n        );\r\n        shuffle($characters);\r\n        return array_slice($characters, 0, $length);\r\n    }\r\n \r\n    /**\r\n     * 写入随机字符\r\n     */\r\n    private function drawString()\r\n    {\r\n        $posx = $this-&gt;config[\'margin\'];\r\n        foreach($_SESSION[\"imagecode\"] as $char)\r\n        {\r\n            $posy = rand($this-&gt;config[\'height\']/2, $this-&gt;config[\'height\']);\r\n            imagettftext(\r\n                $this-&gt;im, \r\n                $this-&gt;config[\'fontSize\'], \r\n                rand(0, 10), \r\n                $posx, \r\n                $posy,\r\n                $this-&gt;getColor(\'font\'), \r\n                $this-&gt;config[\'font\'][rand(0, (sizeof($this-&gt;config[\'font\']) - 1))], \r\n                $char\r\n            );\r\n            $posx += ($this-&gt;config[\'width\'] - 2 * $this-&gt;config[\'margin\'])/4;\r\n        }\r\n    }\r\n     \r\n    /**\r\n     * 显示\r\n     */\r\n    public function show()\r\n    {\r\n        imagefill($this-&gt;im, 0, 0, $this-&gt;getColor(\'backGroundColor\'));\r\n        $this-&gt;drawpixel();\r\n        $this-&gt;drawLine();\r\n        $this-&gt;drawString();\r\n        imagepng($this-&gt;im);\r\n        imagedestroy($this-&gt;im);\r\n    }\r\n}\r\n$captcha = new Captcha();\r\n$captcha-&gt;show();</code></pre>\r\n', null, '一个简单实用的验证码类', '1', '6', null, '2016-07-21 17:15:38', '2016-07-21 17:15:38', null);
INSERT INTO `notes` VALUES ('34', 'php 文件上传类', null, '<pre>\r\n<code class=\"brush:php\">define(\'UPLOAD_MAX_FILE_SIZE_ERROR\', \'文件大小超过系统限制\');\r\ndefine(\'UPLOAD_INVALID_FILE_SUFFIX\', \'上传的文件类型不被允许\');\r\ndefine(\'UPLOAD_NO_FILE_UPLOAD\', \'没有上传任何文件\');\r\ndefine(\'UPLOAD_DIRECTORY_NOT_WRITABLE\', \'目录没有可写权限\');\r\ndefine(\'UPLOAD_FILE_EXISTS_ERROR\', \'目标文件已经存在\');\r\ndefine(\'UPLOAD_PARTIAL_ERROR\', \'文件只有部份被上传\');\r\ndefine(\'UPLOAD_NO_TMP_DIR_ERROR\', \'找不到上传文件的临时文件夹\');\r\ndefine(\'UPLOAD_FILEUPLOAD_FAILED\', \'文件上传失败\');\r\nclass UploadException extends Exception {}\r\nclass Upload\r\n{\r\n    /*\r\n     * File information\r\n     * @var String\r\n     */\r\n    private $file        = null;\r\n    /*\r\n     * Upload file path\r\n     * @var String\r\n     */\r\n    private $uploadPath  = null;\r\n    /*\r\n     * Default allow to upload images\r\n     * @var Array\r\n     */\r\n    private $allowSuffix = array(\'gif\', \'png\', \'jpg\', \'jpeg\',\'bmp\');\r\n    /*\r\n     * Max File size allow to upload\r\n     * @var Integer \r\n     */\r\n    private $maxSize     = 2048000;\r\n    /*\r\n     * Is allow to overwrite file\r\n     * @var Boolean\r\n     */\r\n    private $overwrite   = true;\r\n    /*\r\n     * Error information\r\n     * @var Array\r\n     */\r\n    private $errorInfo   = array();\r\n    /*\r\n     * Upload file information\r\n     * @var Array\r\n     */\r\n    private $uploadInfor = array();\r\n    /*\r\n     * How many files was uploaded\r\n     * @var Integer\r\n     */\r\n    private $numFiles    = 0;\r\n    /**\r\n     * Constructor function\r\n     * @param   String  $uploadPath\r\n     * @param   Array   $allowSuffix\r\n     * @param   Boolean $overwrite\r\n     * $param   Integer $maxSize\r\n     * @access  public\r\n     * @return  void\r\n     * */\r\n    public function __construct($uploadPath=\'\', $allowSuffix=array(), $overwrite=true, $maxSize=2048000)\r\n    {\r\n        if(\'\' != $uploadPath)\r\n        {\r\n            $this-&gt;setUploadDir($uploadPath);\r\n        }\r\n        if(!empty($allowSuffix))\r\n        {\r\n            $this-&gt;setFileAllowSuffix($allowSuffix);\r\n        }\r\n        $this-&gt;overwrite  = (boolean)$overwrite;\r\n        $this-&gt;maxSize    = (int)$maxSize;\r\n        /*\r\n         * Big file upload optoins\r\n         */\r\n        ini_set(\"memory_limit\", -1 );\r\n        ini_set(\"post_max_size\", $this-&gt;formatFileSize($maxSize,\'MB\').\'M\');\r\n        ini_set(\"upload_max_filesize\", $this-&gt;formatFileSize($maxSize,\'MB\').\'M\');\r\n    }\r\n    /**\r\n     *\r\n     * Set upload file path\r\n     *\r\n     * @param   String $path\r\n     * @access  Public\r\n     * @return  Void\r\n     * */\r\n    public function setUploadPath($path)\r\n    {\r\n        if(! is_writable($path))\r\n        {\r\n            throw new Exception(UPLOAD_FILE_NOT_WRITABLE);\r\n        }\r\n        else\r\n        {\r\n            $this-&gt;uploadPath = realpath($path);\r\n        }\r\n    }\r\n    /*\r\n     * Get upload path\r\n     * \r\n     * @return String\r\n     */\r\n    public function getUploadPath()\r\n    {\r\n        return $this-&gt;uploadPath;\r\n    }\r\n    /**\r\n     *\r\n     * Set max file size allow to upload\r\n     *\r\n     * @param   Integer $size byte\r\n     * @access  Public\r\n     * @return  Void\r\n     * */\r\n    public function setMaxFileSize($size)\r\n    {\r\n        $this-&gt;maxSize = (int)$size;\r\n    }\r\n    /*\r\n     * Get max file size\r\n     * \r\n     * @return  String\r\n     */\r\n    public function getMaxFileSize()\r\n    {\r\n        return $this-&gt;maxSize;\r\n    }\r\n    /**\r\n     *\r\n     * Set is overwrite mode when file is exists\r\n     *\r\n     * @param   Boolean $mode\r\n     * @access  Public\r\n     * @return  Void\r\n     * */\r\n    public function setOverWriteMode($mode=true)\r\n    {\r\n        $this-&gt;overwrite = (bool)$mode;\r\n    }\r\n    /*\r\n     * Get is overwrite when dist file is exists\r\n     * \r\n     * @return Boolean\r\n     */\r\n    public function getOverWriteMode()\r\n    {\r\n        return $this-&gt;overwrite;\r\n    }\r\n    /**\r\n     * Set which extension allow to upload\r\n     *\r\n     * @param   Array $ext\r\n     * @access  Public\r\n     * @return  Void\r\n     */\r\n    public function setFileAllowSuffix($ext = array())\r\n    {\r\n        $suffix = array_merge($this-&gt;allowSuffix, (array)$ext);\r\n        $this-&gt;allowSuffix =  array_unique($suffix);\r\n    }\r\n    /*\r\n     * Get allowed file suffix list\r\n     * \r\n     * @return  Array\r\n     */\r\n    public function getFileAllowSuffix()\r\n    {\r\n        return $this-&gt;allowSuffix;\r\n    }\r\n    /**\r\n     *\r\n     * Get random String\r\n     *\r\n     * @param   String $len\r\n     * @access  Private\r\n     * @return  String\r\n     * */\r\n    private function getRandName($len=25)\r\n    {\r\n        $randname = date(\'YmdHis\').rand(1,10000);\r\n        return substr($randname, 0, $len);\r\n    }\r\n    /**\r\n     *\r\n     * Get upload file ext string\r\n     *\r\n     * @param   String $filename\r\n     * @access  Public\r\n     * @return  String\r\n     * */\r\n    public function getFileSuffix($filename)\r\n    {\r\n        if(@$ps = strrpos($filename , \'.\'))\r\n        {\r\n            return strtolower(substr($filename, $ps+1));\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * Upload file\r\n     *\r\n     * @param   String  $file\r\n     * @param   Boolean $force muti upload files uncut\r\n     * @access  Public\r\n     * @return  Boolean upload succeed or failed\r\n     * */\r\n    public function upfile($file, $force=true)\r\n    {\r\n        $this-&gt;numFiles = count($_FILES[$file][\'name\']);\r\n        if(1 &gt; $this-&gt;numFiles)\r\n        {\r\n            throw new Exception(UPLOAD_NO_FILE_SELECT);\r\n        }\r\n        if(1 == $this-&gt;numFiles)\r\n        {// Only one file to upload\r\n            try\r\n            {\r\n                $suffix     = $this-&gt;getFileSuffix($_FILES[$file][\'name\']);\r\n                $randNname  = $this-&gt;getRandName();\r\n                $this-&gt;uploadInfor = array(\r\n                    \'name\'      =&gt; basename($_FILES[$file][\'name\']),\r\n                    \'rand_name\' =&gt; basename($randNname . \'.\' . $suffix),\r\n                    \'type\'      =&gt; $_FILES[$file][\'type\'],\r\n                    \'suffix\'    =&gt; $suffix,\r\n                    \'error\'     =&gt; $_FILES[$file][\'error\'],\r\n                    \'size\'      =&gt; intval($_FILES[$file][\'size\']),\r\n                    \'tmp_name\'  =&gt; $_FILES[$file][\'tmp_name\'],\r\n                );\r\n                $this-&gt;doCheck($this-&gt;uploadInfor);\r\n                if(! $this-&gt;doUpfileDetail($this-&gt;uploadInfor[\'tmp_name\'],\r\n                    $this-&gt;uploadInfor[\'rand_name\']))\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            catch(UploadException $e)\r\n            {// File upload failed\r\n                $this-&gt;errorInfo = array(\r\n                    \'name\' =&gt; $this-&gt;uploadInfor,\r\n                    \'info\' =&gt; $e-&gt;getMessage()\r\n                );\r\n                unset($this-&gt;uploadInfor);\r\n                continue;\r\n            }\r\n        }\r\n        else\r\n        {// Muti files to upload\r\n            for($i=0; $i&lt;$this-&gt;numFiles; $i++)\r\n            {\r\n                $suffix     = $this-&gt;getFileSuffix($_FILES[$file][\'name\'][$i]);\r\n                $randName   = $this-&gt;getRandName();\r\n                /*\r\n                 * Check file is valid to upload\r\n                 */\r\n                try\r\n                {\r\n                    $this-&gt;uploadInfor[$i] = array(\r\n                        \'name\'      =&gt; $_FILES[$file][\'name\'][$i],\r\n                        \'rand_name\' =&gt; basename($randName . \'.\' . $suffix),\r\n                        \'type\'      =&gt; $_FILES[$file][\'type\'][$i],\r\n                        \'suffix\'    =&gt; $suffix,\r\n                        \'error\'     =&gt; $_FILES[$file][\'error\'][$i],\r\n                        \'size\'      =&gt; $_FILES[$file][\'size\'][$i],\r\n                        \'tmp_name\'  =&gt; $_FILES[$file][\'tmp_name\'][$i]\r\n                    );\r\n\r\n                    $this-&gt;doCheck($this-&gt;uploadInfor[$i]);\r\n                    if(! $this-&gt;doUpfileDetail($this-&gt;uploadInfor[$i][\'tmp_name\'],\r\n                        $this-&gt;uploadInfor[$i][\'rand_name\']))\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n                catch(UploadException $e)\r\n                {\r\n                    if($force){\r\n                        $this-&gt;errorInfo[$i] = array(\r\n                            \'name\' =&gt; $this-&gt;uploadInfor[$i],\r\n                            \'info\' =&gt; $e-&gt;getMessage()\r\n                        );\r\n                        unset($this-&gt;uploadInfor[$i]);\r\n                        continue;\r\n                    }\r\n                    else\r\n                        die($e-&gt;getMessage());\r\n                }\r\n            }\r\n        }// end Muti files to upload\r\n        return $this-&gt;getUploadInfo();\r\n    }\r\n    /**\r\n     *\r\n     * Upload file detail\r\n     *\r\n     * @param   String $file\r\n     * @param   String $destination\r\n     * @access  Private\r\n     * @return  Boolean upload file succeed or failed\r\n     * */\r\n    private function doUpfileDetail($file, $destName) \r\n    {\r\n        $distFile = $this-&gt;getUploadPath() . \'/\' . $destName;\r\n        if(file_exists($distFile))\r\n        {\r\n            if($this-&gt;overwrite)\r\n            {\r\n                @unlink($distFile);\r\n            }\r\n        }\r\n        if(is_uploaded_file($file))\r\n        {\r\n            if(! @move_uploaded_file($file, $distFile))\r\n            {\r\n                throw new UploadException(UPLOAD_FILEUPLOAD_FAILED);\r\n            }\r\n            @chmod($distFile, 0755);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     *\r\n     * Check for a valid upload file\r\n     *\r\n     * @param   Array $fileInfo\r\n     * @access  Private\r\n     * @return  Booean file is valid or not\r\n     */\r\n    private function doCheck($file)\r\n    {\r\n        /*\r\n         * Check with $_FILES[\'userfile\'][\'error]\r\n         */\r\n        switch($file[\'error\'])\r\n        {\r\n            case 0:\r\n                return true;\r\n                break;\r\n            case 1://  php.ini upload_max_filesize\r\n            case 2://  &lt;input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"10240000\" /&gt;\r\n                throw new UploadException(UPLOAD_MAX_FILE_SIZE_ERROR);\r\n                break;\r\n            case 3:\r\n                throw new UploadException(UPLOAD_PARTIAL_ERROR);\r\n                break;\r\n            case 4:\r\n                throw new UploadException(UPLOAD_NO_FILE_UPLOAD);\r\n                break;\r\n            case 6:\r\n                throw new UploadException(UPLOAD_NO_TMP_DIR_ERROR);\r\n                break;\r\n            case 7:\r\n                throw new UploadException(UPLOAD_DIRECTORY_NOT_WRITABLE);\r\n                break;\r\n            default:\r\n                throw new UploadException(UPLOAD_FILEUPLOAD_FAILED);\r\n        }\r\n        /*\r\n         * Check by selfrequirement\r\n         */\r\n        $suffix = $this-&gt;getFileSuffix($file[\'name\']);\r\n        if(! $this-&gt;isValidSuffix($suffix))\r\n        {\r\n            throw new UploadException(UPLOAD_INVALID_FILE_SUFFIX);\r\n        }\r\n        if(! $this-&gt;isValidFilesize($file[\'size\']))\r\n        {\r\n            throw new UploadException(UPLOAD_MAX_FILE_SIZE_ERROR);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     *\r\n     * Get Upload info\r\n     *\r\n     * @param      Void\r\n     * @access     Public\r\n     * @return     Array upload info\r\n     */\r\n    public function getUploadInfo()\r\n    {\r\n        return array(\'uploadInfo\'=&gt;$this-&gt;uploadInfor, \'errorInfo\' =&gt; $this-&gt;getErrorInfo());\r\n    }\r\n    /**\r\n     *\r\n     * Get formated size from file\r\n     *\r\n     * @param   Integer $size;\r\n     * @param   String  $format\r\n     * @access  Public\r\n     * @return  Integer\r\n     * */\r\n    public function formatFileSize($size, $format=\'b\')\r\n    {\r\n        switch (strtolower($format))\r\n        {\r\n            case \'b\':\r\n                $formatSize = $size;\r\n                break;\r\n            case \'kb\':\r\n                $formatSize = ceil($size/1024);\r\n                break;\r\n            case \'mb\':\r\n                $formatSize = ceil($size/(1024*1024));\r\n                break;\r\n            default:\r\n                $formatSize = $size;\r\n        }\r\n        return $formatSize;\r\n    }\r\n    /**\r\n     *\r\n     * Check file extionsion\r\n     *\r\n     * @param   String $ext\r\n     * @access  Private\r\n     * @return  Boolean\r\n     * */\r\n    public function isValidSuffix($ext)\r\n    {\r\n        if(! in_array($ext, $this-&gt;allowSuffix))\r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     *\r\n     * Check file size\r\n     *\r\n     * @param   $filesize\r\n     * @access  Private\r\n     * @return  Boolean\r\n     * */\r\n    private function isValidFilesize($filesize)\r\n    {\r\n        if($filesize &gt; $this-&gt;maxSize)\r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Get upload error info\r\n     *\r\n     * @param   Void\r\n     * @access  Public\r\n     * @return  Array upload error info\r\n     */\r\n    public function getErrorInfo()\r\n    {\r\n        return $this-&gt;errorInfo;\r\n    }\r\n}   </code></pre>\r\n', null, '很久前使用的文件上传类', '1', '6', null, '2016-07-21 17:18:05', '2016-07-21 17:18:05', null);
INSERT INTO `notes` VALUES ('35', 'php 判断服务器是否是HTTPS加密连接', null, '<pre>\r\n<code class=\"brush:php\">function is_ssl() {\r\n    if ( isset($_SERVER[\'HTTPS\']) ) {\r\n        if ( \'on\' == strtolower($_SERVER[\'HTTPS\']) )\r\n            return true;\r\n        if ( \'1\' == $_SERVER[\'HTTPS\'] )\r\n            return true;\r\n    } elseif ( isset($_SERVER[\'SERVER_PORT\']) &amp;&amp; ( \'443\' == $_SERVER[\'SERVER_PORT\'] ) ) {\r\n        return true;\r\n    }\r\n    return false;\r\n}</code></pre>\r\n', null, '是否 HTTPS加密连接', '1', '6', null, '2016-07-21 17:19:05', '2016-07-21 17:19:05', null);
INSERT INTO `notes` VALUES ('36', 'php 格式化文件大小', null, '<pre>\r\n<code class=\"brush:php\">function sizecount($size) {\r\n    if($size &gt;= 1073741824) {\r\n        $size = round($size / 1073741824 * 100) / 100 . \' GB\';\r\n    } elseif($size &gt;= 1048576) {\r\n        $size = round($size / 1048576 * 100) / 100 . \' MB\';\r\n    } elseif($size &gt;= 1024) {\r\n        $size = round($size / 1024 * 100) / 100 . \' KB\';\r\n    } else {\r\n        $size = $size . \' Bytes\';\r\n    }\r\n    return $size;\r\n}\r\n//源于wordpress wp-includes/functions.php line 180\r\nfunction size_format( $bytes, $decimals = 0 ) {\r\n    $quant = array(\r\n        // ========================= Origin ====\r\n        \'TB\' =&gt; 1099511627776,  // pow( 1024, 4)\r\n        \'GB\' =&gt; 1073741824,     // pow( 1024, 3)\r\n        \'MB\' =&gt; 1048576,        // pow( 1024, 2)\r\n        \'kB\' =&gt; 1024,           // pow( 1024, 1)\r\n        \'B \' =&gt; 1,              // pow( 1024, 0)\r\n    );\r\n    foreach ( $quant as $unit =&gt; $mag )\r\n        if ( doubleval($bytes) &gt;= $mag )\r\n            return number_format_i18n( $bytes / $mag, $decimals ) . \' \' . $unit;\r\n \r\n    return false;\r\n}</code></pre>\r\n', null, '格式化文件大小', '1', '6', null, '2016-07-21 17:20:07', '2016-07-21 17:20:07', null);

-- ----------------------------
-- Table structure for notes_copy
-- ----------------------------
DROP TABLE IF EXISTS `notes_copy`;
CREATE TABLE `notes_copy` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(80) COLLATE utf8_unicode_ci NOT NULL COMMENT '标题',
  `thumbnail` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '缩略图',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `slug` varchar(60) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '网址缩略名',
  `summary` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `user_id` int(12) DEFAULT NULL COMMENT '文章编辑用户id',
  `category_id` int(10) NOT NULL COMMENT '文章分类id',
  `deleted_at` datetime DEFAULT NULL COMMENT '被软删除时间',
  `created_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `updated_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '修改更新时间',
  `images` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `title` (`title`)
) ENGINE=MyISAM AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='内容数据（文章/单页）表';

-- ----------------------------
-- Records of notes_copy
-- ----------------------------
INSERT INTO `notes_copy` VALUES ('1', 'ubuntu php环境 fileinfo扩展安装', null, '<pre>\r\n<code class=\"language-perl\">//打开php安装包找到fileinfo组件\r\ncd /root/lnmp/php/ext/fileinfo\r\n//执行 phpize\r\n/usr/local/php/bin/phpize\r\n//编译\r\n./configure –with-php-config=/usr/local/php/bin/php-config\r\n//安装\r\nmake &amp;&amp; make install\r\n//修改php配置文件\r\nvim /usr/local/php/etc/php.ini\r\n//修改php.ini配置\r\nextension = fileinfo.so\r\n//然后重启</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '3', null, '2016-07-06 07:06:35', '2016-07-06 07:06:35', null);
INSERT INTO `notes_copy` VALUES ('2', 'PHP数组转成XML', null, '<pre>\r\n<code class=\"language-php\">\r\nclass ArrayToXML\r\n{\r\n    /**\r\n     * The main function for converting to an XML document.\r\n     * Pass in a multi dimensional array and this recrusively loops through and builds up an XML document.\r\n     *\r\n     * @param array $data\r\n     * @param string $rootNodeName - what you want the root node to be - defaultsto data.\r\n     * @param SimpleXMLElement $xml - should only be used recursively\r\n     * @return string XML\r\n     */\r\n    public static function toXml($data, $rootNodeName = \'data\', $xml = null)\r\n    {\r\n        // turn off compatibility mode as simple xml throws a wobbly if you don\'t.\r\n        if (ini_get(\'zend.ze1_compatibility_mode\') == 1) \r\n        {\r\n            ini_set(\'zend.ze1_compatibility_mode\', 0);\r\n        }\r\n        if ($xml == null) \r\n        {\r\n            $xml = simplexml_load_string(\"<?xml version=\'1.0\' encoding=\'utf-8\'?-->&lt;$rootNodeName /&gt;&quot;);\r\n        }\r\n        // loop through the data passed in.\r\n        foreach ($data as $key =&gt; $value) \r\n        {\r\n            // no numeric keys in our xml please!\r\n            if (is_numeric($key)) \r\n            {\r\n                // make string key...\r\n                $key = &quot;unknownNode_&quot; . (string)$key;\r\n            }\r\n            // replace anything not alpha numeric\r\n            $key = preg_replace(&#39;/[^a-z]/i&#39;, &#39;&#39;, $key);\r\n            // if there is another array found recrusively call this function\r\n            if (is_array($value)) \r\n            {\r\n                $node = $xml-&gt;addChild($key);\r\n                // recrusive call.\r\n                ArrayToXML::toXml($value, $rootNodeName, $node);\r\n            } \r\n            else \r\n            {\r\n                // add single node.\r\n                $value = htmlentities($value);\r\n                $xml-&gt;addChild($key, $value);\r\n            }\r\n        }\r\n        // pass back as string. or simple xml object if you want!\r\n        return $xml-&gt;asXML();\r\n    }\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-06 08:26:43', '2016-07-07 02:58:29', null);
INSERT INTO `notes_copy` VALUES ('3', 'ubuntu lnmp laravel nginx 配置', null, '<pre>\r\n<code class=\"language-apache\">server\r\n{\r\n    //laravel  public目录\r\n    root /home/wwwroot/cms/public;\r\n	location /\r\n    {\r\n        try_files $uri $uri/ /index.php?$query_string;\r\n	}\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '3', null, '2016-07-06 08:35:13', '2016-07-06 08:35:13', null);
INSERT INTO `notes_copy` VALUES ('4', 'php 创建文件 写入json格式', null, '<pre>\r\n<code class=\"language-php\">\r\n$json_string = file_get_contents(\'json/index_bean.json\');\r\n$data = json_decode($json_string, true);\r\nif($data)\r\n{\r\n    var_dump($data);\r\n}\r\nelse\r\n{\r\n    $data=array(\r\n        \'1\'=--&gt;\'2016-06-28\',\r\n        \'2\'=&gt;\'2016-06-29\',\r\n        \'3\'=&gt;\'2016-06-30\',\r\n        \'4\'=&gt;\'2016-07-01\',\r\n        \'5\'=&gt;\'2016-07-02\',\r\n        \'6\'=&gt;\'2016-07-03\',\r\n        \'7\'=&gt;\'2016-07-04\',\r\n        \'8\'=&gt;\'2016-07-05\',\r\n        \'9\'=&gt;\'2016-07-06\',\r\n    );\r\n    file_put_contents(\'json/index_bean.json\',json_encode($data));\r\n    $json_string = file_get_contents(\'json/index_bean.json\');\r\n    $data = json_decode($json_string, true);\r\n    if($data)\r\n    {\r\n        var_dump($data);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-06 08:51:28', '2016-07-08 17:54:00', null);
INSERT INTO `notes_copy` VALUES ('5', 'php 中文名字转拼音', null, '<pre>\r\n<code class=\"language-php\">\r\nclass name2py\r\n{\r\n    //复姓   参考: http://baike.baidu.com/subview/13724/9433028.htm\r\n    public static $_compoundSurname = array(\'百里\',\'北堂\',\'北野\',\'辟闾\',\'淳于\',\'成公\',\'陈生\',\'成功\',\'端木\',\'东方\',\'东郭\',\'东野\',\'东门\',\'第二\',\'第五\',\r\n        \'大狐\',\'段干\',\'段阳\',\'公孙\',\'公冶\',\'公羊\',\'公良\',\'公西\',\'公孟\',\'高堂\',\'高阳\',\'公析\',\'公肩\',\'公坚\',\'郭公\',\'谷梁\',\'毌将\',\'皇甫\',\'黄龙\',\'夹谷\',\'九方\',\r\n        \'丌官\',\'梁丘\',\'闾丘\',\'洛阳\',\'陵尹\',\'冷富\',\'梁丘\',\'龙丘\',\'令狐\',\'南宫\',\'南郭\',\'女娲南伯\',\'南容\',\'欧阳\',\'欧侯\',\'濮阳\',\'青阳\',\'漆雕\',\'亓官\',\'渠丘\',\'壤驷\',\r\n        \'上官\',\'少室\',\'少叔\',\'司徒\',\'司马\',\'司空\',\'司寇\',\'士孙\',\'申屠\',\'申徒\',\'申鲜\',\'夙沙\',\'叔先\',\'叔仲\',\'侍其\',\'澹台\',\'太史\',\'太叔\',\'太公\',\'屠岸\',\'唐古\',\r\n        \'闻人\',\'巫马\',\'微生\',\'王孙\',\'吾丘\',\'无庸\',\'夏侯\',\'西门\',\'信平\',\'鲜于\',\'轩辕\',\'相里\',\'新垣\',\'乐正\',\'尉迟\',\'羊舌\',\'羊角\',\'延陵\',\'於陵\',\'伊祁\',\'诸葛\',\'颛孙\',\r\n        \'仲孙\',\'仲长\',\'钟离\',\'宗政\',\'主父\',\'中叔\',\'左人\',\'左丘\',\'宰父\',\'长儿\',\'长孙\',\'万俟\');\r\n    //多音字的姓氏\r\n    public static $_polyphone = array(\'chong\'=-->&#39;重&#39;,&#39;ou&#39;=&gt;&#39;区&#39;,&#39;qiu&#39;=&gt;&#39;仇&#39;,&#39;bi&#39;=&gt;&#39;秘&#39;,&#39;xian&#39;=&gt;&#39;冼&#39;,&#39;xie&#39;=&gt;&#39;解&#39;,&#39;she&#39;=&gt;&#39;折&#39;,&#39;shan&#39;=&gt;&#39;单&#39;,\r\n        &#39;piao&#39;=&gt;&#39;朴&#39;,&#39;zha&#39;=&gt;&#39;翟&#39;,&#39;zha&#39;=&gt;&#39;查&#39;,&#39;zeng&#39;=&gt;&#39;曾&#39;,&#39;miao&#39;=&gt;&#39;缪&#39;,&#39;ge&#39;=&gt;&#39;盖&#39;,&#39;po&#39;=&gt;&#39;繁&#39;,&#39;yao&#39;=&gt;&#39;幺&#39;,&#39;mo qi&#39;=&gt;&#39;万俟&#39;,&#39;yu chi&#39;=&gt;&#39;尉迟&#39;,\r\n        &#39;zhang sun&#39;=&gt;&#39;长孙&#39;,&#39;tan tai&#39;=&gt;&#39;澹台&#39;);\r\n    public function pinyin($fullname)\r\n    {\r\n        $subject = &#39;Any-Latin; Latin-ASCII; NFD; [:Nonspacing Mark:] Remove; NFC;&#39;;\r\n        $nameLength = mb_strlen($fullname,&#39;utf-8&#39;);\r\n        $lastName = &#39;&#39;; //姓氏\r\n        $firstName = &#39;&#39;; //名字\r\n        //《姓名登记条例(初稿)》规定: 姓名用字应当在2个汉字以上、6个汉字以下\r\n        if($nameLength &gt; 2)\r\n        {\r\n            $preTwoWords = mb_substr($fullname, 0, 2, &#39;utf-8&#39;);//取命名的前两个字,看是否在复姓数组中\r\n            if( in_array( $preTwoWords, name2py::$_compoundSurname ) )\r\n            {\r\n                $lastname = $preTwoWords;\r\n                $firstname = mb_substr($fullname, 2, 4, &#39;utf-8&#39;);\r\n            }\r\n            else\r\n            {\r\n                $lastname = mb_substr($fullname, 0, 1, &#39;utf-8&#39;);\r\n                $firstname = mb_substr($fullname, 1, 5, &#39;utf-8&#39;);\r\n            }\r\n        }\r\n        else if($nameLength == 2)\r\n        {\r\n            //全名只有两个字时,以前一个为姓,后一下为名\r\n            $lastname = mb_substr($fullname ,0, 1, &#39;utf-8&#39;);\r\n            $firstname = mb_substr($fullname, 1, 5, &#39;utf-8&#39;);\r\n        }\r\n        else\r\n        {\r\n            return array();\r\n        }\r\n        // PHP &gt;= 5.4.0, PECL intl &gt;= 2.0.0\r\n        $result = array_search( $lastname, name2py::$_polyphone );\r\n        if( $result )\r\n        {\r\n            $lastname2py = $result;\r\n        }\r\n        else\r\n        {\r\n            $lastname2py = transliterator_transliterate( $subject, $lastname );\r\n        }\r\n        $firstName2py = transliterator_transliterate( $subject, $firstname );\r\n        $accountName = preg_replace( &quot;/\\s/&quot;,&quot;&quot;,$firstName2py.&#39;.&#39;.$lastname2py );\r\n        return array(&#39;lastname&#39;=&gt; $lastname2py, &#39;firstname&#39;=&gt; $firstName2py, &#39;accountName&#39; =&gt; $accountName);\r\n    }\r\n    //判断是否为汉字\r\n    private function isChinese($char)\r\n    {\r\n        if( preg_match(&#39;/^[\\x{4e00}-\\x{9fa5}]+$/u&#39;,$char) )\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}</code></pre>', null, null, '1', '6', null, '2016-07-07 02:13:19', '2016-07-07 02:58:02', null);
INSERT INTO `notes_copy` VALUES ('6', 'php 输出xls的头信息', null, '<pre>\r\n<code class=\"language-php\">\r\n/**\r\n * 注：使用此函数前后都不应有任何数据输出\r\n * @param $data Array 下载的数据\r\n * @param $file_name String 下载的文件名\r\n */\r\nfunction outputXlsHeader($data,$file_name = \'export\')\r\n{\r\n    header(\'Content-Type: text/xls\');\r\n    header ( \"Content-type:application/vnd.ms-excel;charset=utf-8\" );\r\n    $str = mb_convert_encoding($file_name, \'gbk\', \'utf-8\');\r\n    header(\'Content-Disposition: attachment;filename=\"\' .$str . \'.xls\"\');\r\n    header(\'Cache-Control:must-revalidate,post-check=0,pre-check=0\');\r\n    header(\'Expires:0\');\r\n    header(\'Pragma:public\');\r\n    $table_data = \'\';\r\n    foreach ($data as $line)\r\n    {\r\n        $table_data .= \'\';\r\n        foreach ($line as $key =&gt; &amp;$item)\r\n        {\r\n            $item = mb_convert_encoding($item, \'gbk\', \'utf-8\');\r\n            $table_data .= \'\' . $item . \'\';\r\n        }\r\n        $table_data .= \'\';\r\n    }\r\n    $table_data .=\'\';\r\n    echo $table_data;\r\n    die();\r\n}\r\n</code></pre>\r\n', null, null, '1', '6', null, '2016-07-07 02:15:57', '2016-07-07 02:57:11', null);
INSERT INTO `notes_copy` VALUES ('7', 'php 生成mysql数据字典', null, '<pre>\r\n<code class=\"language-php\">&lt;?php\r\nheader(\"Content-type: text/html; charset=utf-8\");\r\n// 配置数据库\r\n$dbserver = \"localhost\";\r\n$dbusername = \"root\";\r\n$dbpassword = \"root\";\r\n$database = \"houser\";\r\n// 其他配置\r\n$title = \'数据字典\';\r\n$mysql_conn = @mysql_connect(\"$dbserver\", \"$dbusername\", \"$dbpassword\") or die (\"Mysql connect is error.\");\r\nmysql_select_db($database, $mysql_conn);\r\nmysql_query(\'SET NAMES utf8\', $mysql_conn);\r\n$table_result = mysql_query(\'show tables\', $mysql_conn);\r\n// 取得所有的表名\r\nwhile ($row = mysql_fetch_array($table_result))\r\n{\r\n    $tables [] [\'TABLE_NAME\'] = $row [0];\r\n}\r\n// 循环取得所有表的备注及表中列消息\r\nforeach ($tables as $k =&gt; $v)\r\n{\r\n    $sql = \'SELECT * FROM \';\r\n    $sql .= \'INFORMATION_SCHEMA.TABLES \';\r\n    $sql .= \'WHERE \';\r\n    $sql .= \"table_name = \'{$v[\'TABLE_NAME\']}\'  AND table_schema = \'{$database}\'\";\r\n    $table_result = mysql_query($sql, $mysql_conn);\r\n    while ($t = mysql_fetch_array($table_result))\r\n    {\r\n        $tables [$k] [\'TABLE_COMMENT\'] = $t [\'TABLE_COMMENT\'];\r\n    }\r\n    $sql = \'SELECT * FROM \';\r\n    $sql .= \'INFORMATION_SCHEMA.COLUMNS \';\r\n    $sql .= \'WHERE \';\r\n    $sql .= \"table_name = \'{$v[\'TABLE_NAME\']}\' AND table_schema = \'{$database}\'\";\r\n    $fields = array();\r\n    $field_result = mysql_query($sql, $mysql_conn);\r\n    while ($t = mysql_fetch_array($field_result))\r\n    {\r\n        $fields [] = $t;\r\n    }\r\n    $tables [$k] [\'COLUMN\'] = $fields;\r\n}\r\nmysql_close($mysql_conn);\r\n$html = \'\';\r\n// 循环所有表\r\nforeach ($tables as $k =&gt; $v)\r\n{\r\n    //$html .= \'&lt;p&gt;&lt;h2&gt;\'. $v[\'TABLE_COMMENT\'] . \'&amp;nbsp;&lt;/h2&gt;\';\r\n    $html .= \'&lt;table  border=\"1\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\"&gt;\';\r\n    $html .= \'&lt;caption&gt;\' . $v [\'TABLE_NAME\'] . \'  \' . $v [\'TABLE_COMMENT\'] . \'&lt;/caption&gt;\';\r\n    $html .= \'&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;字段名&lt;/th&gt;&lt;th&gt;数据类型&lt;/th&gt;&lt;th&gt;默认值&lt;/th&gt;\r\n    &lt;th&gt;允许非空&lt;/th&gt;\r\n    &lt;th&gt;自动递增&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;\';\r\n    $html .= \'\';\r\n    foreach ($v [\'COLUMN\'] as $f)\r\n    {\r\n        $html .= \'&lt;tr&gt;&lt;td class=\"c1\"&gt;\' . $f [\'COLUMN_NAME\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c2\"&gt;\' . $f [\'COLUMN_TYPE\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c3\"&gt;&amp;nbsp;\' . $f [\'COLUMN_DEFAULT\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c4\"&gt;&amp;nbsp;\' . $f [\'IS_NULLABLE\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c5\"&gt;\' . ($f [\'EXTRA\'] == \'auto_increment\' ? \'是\' : \'&amp;nbsp;\') . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;td class=\"c6\"&gt;&amp;nbsp;\' . $f [\'COLUMN_COMMENT\'] . \'&lt;/td&gt;\';\r\n        $html .= \'&lt;/tr&gt;\';\r\n    }\r\n    $html .= \'&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;\';\r\n}\r\n// 输出\r\necho \'&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\r\n&lt;title&gt;\' . $title . \'&lt;/title&gt;\r\n&lt;style&gt;\r\nbody,td,th {font-family:\"微软雅黑\"; font-size:12px;}\r\ntable{border-collapse:collapse;border:1px solid #CCC;background:#6089D4;}\r\ntable caption{text-align:left; background-color:#fff; line-height:2em; font-size:14px; font-weight:bold; }\r\ntable th{text-align:left; font-weight:bold;height:26px; line-height:25px; font-size:16px; border:3px solid #fff; color:#ffffff; padding:5px;}\r\ntable td{height:25px; font-size:12px; border:3px solid #fff; background-color:#f0f0f0; padding:5px;}\r\n.c1{ width: 150px;}\r\n.c2{ width: 130px;}\r\n.c3{ width: 70px;}\r\n.c4{ width: 80px;}\r\n.c5{ width: 80px;}\r\n.c6{ width: 300px;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\';\r\necho \'&lt;h1 style=\"text-align:center;\"&gt;\' . $title . \'&lt;/h1&gt;\';\r\necho $html;\r\necho \'&lt;/body&gt;&lt;/html&gt;\';\r\n?&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 02:18:07', '2016-07-07 02:18:07', null);
INSERT INTO `notes_copy` VALUES ('8', 'php 取得汉字首字母', null, '<pre>\r\n<code class=\"language-php\">\r\n//取得汉字首字母\r\n/**\r\n * 修复二分法查找方法\r\n * 汉字拼音首字母工具类\r\n *  注： 英文的字串：不变返回(包括数字)    eg .abc123 =--&gt; abc123\r\n *      中文字符串：返回拼音首字符        eg. 测试字符串 =&gt; CSZFC\r\n *      中英混合串: 返回拼音首字符和英文   eg. 我i我j =&gt; WIWJ\r\n *  //使用方法：\r\n *  $py = new str2PY();\r\n *  $result = $py-&gt;getInitials(\'需要生成首字母的字符串\');\r\n */\r\nclass str2PY\r\n{\r\n    private $_pinyins = array(\r\n        176161 =&gt; \'A\',\r\n        176197 =&gt; \'B\',\r\n        178193 =&gt; \'C\',\r\n        180238 =&gt; \'D\',\r\n        182234 =&gt; \'E\',\r\n        183162 =&gt; \'F\',\r\n        184193 =&gt; \'G\',\r\n        185254 =&gt; \'H\',\r\n        187247 =&gt; \'J\',\r\n        191166 =&gt; \'K\',\r\n        192172 =&gt; \'L\',\r\n        194232 =&gt; \'M\',\r\n        196195 =&gt; \'N\',\r\n        197182 =&gt; \'O\',\r\n        197190 =&gt; \'P\',\r\n        198218 =&gt; \'Q\',\r\n        200187 =&gt; \'R\',\r\n        200246 =&gt; \'S\',\r\n        203250 =&gt; \'T\',\r\n        205218 =&gt; \'W\',\r\n        206244 =&gt; \'X\',\r\n        209185 =&gt; \'Y\',\r\n        212209 =&gt; \'Z\',\r\n    );\r\n    private $_charset = null;\r\n    /**\r\n     * 构造函数, 指定需要的编码 default: utf-8\r\n     * 支持utf-8, gb2312\r\n     *\r\n     * @param unknown_type $charset\r\n     */\r\n    public function __construct($charset = \'utf-8\')\r\n    {\r\n        $this-&gt;_charset = $charset;\r\n    }\r\n    /**\r\n     * 中文字符串 substr\r\n     *\r\n     * @param string $str\r\n     * @param int $start\r\n     * @param int $len\r\n     * @return string\r\n     */\r\n    private function _msubstr($str, $start, $len)\r\n    {\r\n        $start = $start * 2;\r\n        $len = $len * 2;\r\n        $strlen = strlen($str);\r\n        $result = \'\';\r\n        for ($i = 0; $i &lt; $strlen; $i++)\r\n        {\r\n            if ($i &gt;= $start &amp;&amp; $i &lt; ($start + $len))\r\n            {\r\n                if (ord(substr($str, $i, 1)) &gt; 129) $result .= substr($str, $i, 2);\r\n                else $result .= substr($str, $i, 1);\r\n            }\r\n            if (ord(substr($str, $i, 1)) &gt; 129) $i++;\r\n        }\r\n        return $result;\r\n    }\r\n    /**\r\n     * 字符串切分为数组 (汉字或者一个字符为单位)\r\n     *\r\n     * @param string $str\r\n     * @return array\r\n     */\r\n    private function _cutWord($str)\r\n    {\r\n        $words = array();\r\n        while ($str != \"\")\r\n        {\r\n            if ($this-&gt;_isAscii($str))\r\n            {\r\n                /*非中文*/\r\n                $words[] = $str[0];\r\n                $str = substr($str, strlen($str[0]));\r\n            }\r\n            else\r\n            {\r\n                $word = $this-&gt;_msubstr($str, 0, 1);\r\n                $words[] = $word;\r\n                $str = substr($str, strlen($word));\r\n            }\r\n        }\r\n        return $words;\r\n    }\r\n    /**\r\n     * 判断字符是否是ascii字符\r\n     *\r\n     * @param string $char\r\n     * @return bool\r\n     */\r\n    private function _isAscii($char)\r\n    {\r\n        return (ord(substr($char, 0, 1)) &lt; 160);\r\n    }\r\n    /**\r\n     * 判断字符串前3个字符是否是ascii字符\r\n     *\r\n     * @param string $str\r\n     * @return bool\r\n     */\r\n    private function _isAsciis($str)\r\n    {\r\n        $len = strlen($str) &gt;= 3 ? 3 : 2;\r\n        $chars = array();\r\n        for ($i = 1; $i &lt; $len - 1; $i++)\r\n        {\r\n            $chars[] = $this-&gt;_isAscii($str[$i]) ? \'yes\' : \'no\';\r\n        }\r\n        $result = array_count_values($chars);\r\n        if (empty($result[\'no\']))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取中文字串的拼音首字符\r\n     *\r\n     * @param string $str\r\n     * @return string\r\n     */\r\n    public function getInitials($str)\r\n    {\r\n        if (empty($str)) return \'\';\r\n        if ($this-&gt;_isAscii($str[0]) &amp;&amp; $this-&gt;_isAsciis($str))\r\n        {\r\n            return $str;\r\n        }\r\n        $result = array();\r\n        if ($this-&gt;_charset == \'utf-8\')\r\n        {\r\n            $str = iconv(\'utf-8\', \'gb2312\', $str);\r\n        }\r\n        $words = $this-&gt;_cutWord($str);\r\n        foreach ($words as $word)\r\n        {\r\n            if ($this-&gt;_isAscii($word))\r\n            {\r\n                /*非中文*/\r\n                $result[] = $word;\r\n                continue;\r\n            }\r\n            $code = ord(substr($word, 0, 1)) * 1000 + ord(substr($word, 1, 1));\r\n            /*获取拼音首字母A--Z*/\r\n            if (($i = $this-&gt;_search($code)) != -1)\r\n            {\r\n                $result[] = $this-&gt;_pinyins[$i];\r\n            }\r\n        }\r\n        return strtoupper(implode(\'\', $result));\r\n    }\r\n    private function _getChar($ascii)\r\n    {\r\n        if ($ascii &gt;= 48 &amp;&amp; $ascii &lt;= 57)\r\n        {\r\n            return chr($ascii);  /*数字*/\r\n        }\r\n        elseif ($ascii &gt;= 65 &amp;&amp; $ascii &lt;= 90)\r\n        {\r\n            return chr($ascii);   /* A--Z*/\r\n        }\r\n        elseif ($ascii &gt;= 97 &amp;&amp; $ascii &lt;= 122)\r\n        {\r\n            return chr($ascii - 32); /* a--z*/\r\n        }\r\n        else\r\n        {\r\n            return \'-\'; /*其他*/\r\n        }\r\n    }\r\n    /**\r\n     * 查找需要的汉字内码(gb2312) 对应的拼音字符( 二分法 )\r\n     *\r\n     * @param int $code\r\n     * @return int\r\n     */\r\n    private function _search($code)\r\n    {\r\n        $data = array_keys($this-&gt;_pinyins);\r\n        $lower = 0;\r\n        $upper = sizeof($data) - 1;\r\n        $middle = (int)round(($lower + $upper) / 2);\r\n        if ($code &lt; $data[0]) return -1;\r\n        for (; ;)\r\n        {\r\n            if ($lower &gt; $upper)\r\n            {\r\n                return $data[$lower - 1];\r\n            }\r\n            $tmp = (int)round(($lower + $upper) / 2);\r\n            if (!isset($data[$tmp]))\r\n            {\r\n                return $data[$middle];\r\n            }\r\n            else\r\n            {\r\n                $middle = $tmp;\r\n            }\r\n            if ($data[$middle] &lt; $code)\r\n            {\r\n                $lower = (int)$middle + 1;\r\n            }\r\n            else if ($data[$middle] == $code)\r\n            {\r\n                return $data[$middle];\r\n            }\r\n            else\r\n            {\r\n                $upper = (int)$middle - 1;\r\n            }\r\n        }\r\n    }\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-07 02:20:58', '2016-07-07 02:57:33', null);
INSERT INTO `notes_copy` VALUES ('9', 'php 随机生成中国人姓名的类', null, '<pre>\r\n<code class=\"language-php\">Class rndChinaName\r\n{\r\n    private $arrXing, $numbXing;\r\n    private $arrMing, $numbMing;\r\n    function rndChinaName()\r\n    {\r\n        $this-&gt;getXingList();\r\n        $this-&gt;getMingList();\r\n\r\n    }\r\n    /* 获取姓列表 */\r\n    private function getXingList()\r\n    {\r\n        $this-&gt;arrXing = array(\r\n            \'赵\', \'钱\', \'孙\', \'李\', \'周\', \'吴\', \'郑\', \'王\', \'冯\', \'陈\', \'褚\', \'卫\', \'蒋\',\r\n            \'沈\', \'韩\', \'杨\', \'朱\', \'秦\', \'尤\', \'许\', \'何\', \'吕\', \'施\', \'张\', \'孔\', \'曹\', \'严\', \'华\', \'金\', \'魏\',\r\n            \'陶\', \'姜\', \'戚\', \'谢\', \'邹\', \'喻\', \'柏\', \'水\', \'窦\', \'章\', \'云\', \'苏\', \'潘\', \'葛\', \'奚\', \'范\', \'彭\',\r\n            \'郎\', \'鲁\', \'韦\', \'昌\', \'马\', \'苗\', \'凤\', \'花\', \'方\', \'任\', \'袁\', \'柳\', \'鲍\', \'史\', \'唐\', \'费\', \'薛\',\r\n            \'雷\', \'贺\', \'倪\', \'汤\', \'滕\', \'殷\', \'罗\', \'毕\', \'郝\', \'安\', \'常\', \'傅\', \'卞\', \'齐\', \'元\', \'顾\', \'孟\',\r\n            \'平\', \'黄\', \'穆\', \'萧\', \'尹\', \'姚\', \'邵\', \'湛\', \'汪\', \'祁\', \'毛\', \'狄\', \'米\', \'伏\', \'成\', \'戴\', \'谈\',\r\n            \'宋\', \'茅\', \'庞\', \'熊\', \'纪\', \'舒\', \'屈\', \'项\', \'祝\', \'董\', \'梁\', \'杜\', \'阮\', \'蓝\', \'闵\', \'季\', \'贾\',\r\n            \'路\', \'娄\', \'江\', \'童\', \'颜\', \'郭\', \'梅\', \'盛\', \'林\', \'钟\', \'徐\', \'邱\', \'骆\', \'高\', \'夏\', \'蔡\', \'田\',\r\n            \'樊\', \'胡\', \'凌\', \'霍\', \'虞\', \'万\', \'支\', \'柯\', \'管\', \'卢\', \'莫\', \'柯\', \'房\', \'裘\', \'缪\', \'解\', \'应\',\r\n            \'宗\', \'丁\', \'宣\', \'邓\', \'单\', \'杭\', \'洪\', \'包\', \'诸\', \'左\', \'石\', \'崔\', \'吉\', \'龚\', \'程\', \'嵇\', \'邢\',\r\n            \'裴\', \'陆\', \'荣\', \'翁\', \'荀\', \'于\', \'惠\', \'甄\', \'曲\', \'封\', \'储\', \'仲\', \'伊\', \'宁\', \'仇\', \'甘\', \'武\',\r\n            \'符\', \'刘\', \'景\', \'詹\', \'龙\', \'叶\', \'幸\', \'司\', \'黎\', \'溥\', \'印\', \'怀\', \'蒲\', \'邰\', \'从\', \'索\', \'赖\',\r\n            \'卓\', \'屠\', \'池\', \'乔\', \'胥\', \'闻\', \'莘\', \'党\', \'翟\', \'谭\', \'贡\', \'劳\', \'逄\', \'姬\', \'申\', \'扶\', \'堵\',\r\n            \'冉\', \'宰\', \'雍\', \'桑\', \'寿\', \'通\', \'燕\', \'浦\', \'尚\', \'农\', \'温\', \'别\', \'庄\', \'晏\', \'柴\', \'瞿\', \'阎\',\r\n            \'连\', \'习\', \'容\', \'向\', \'古\', \'易\', \'廖\', \'庾\', \'终\', \'步\', \'都\', \'耿\', \'满\', \'弘\', \'匡\', \'国\', \'文\',\r\n            \'寇\', \'广\', \'禄\', \'阙\', \'东\', \'欧\', \'利\', \'师\', \'巩\', \'聂\', \'关\', \'荆\', \'司马\', \'上官\', \'欧阳\', \'夏侯\',\r\n            \'诸葛\', \'闻人\', \'东方\', \'赫连\', \'皇甫\', \'尉迟\', \'公羊\', \'澹台\', \'公冶\', \'宗政\', \'濮阳\', \'淳于\', \'单于\',\r\n            \'太叔\', \'申屠\', \'公孙\', \'仲孙\', \'轩辕\', \'令狐\', \'徐离\', \'宇文\', \'长孙\', \'慕容\', \'司徒\', \'司空\');\r\n        //姓总数\r\n        $this-&gt;numbXing = count($this-&gt;arrXing);\r\n    }\r\n    /* 获取名列表 */\r\n    private function getMingList()\r\n    {\r\n        $this-&gt;arrMing = array(\r\n            \'伟\', \'刚\', \'勇\', \'毅\', \'俊\', \'峰\', \'强\', \'军\', \'平\', \'保\', \'东\', \'文\', \'辉\', \'力\', \'明\', \'永\', \'健\', \'世\', \'广\', \'志\', \'义\',\r\n            \'兴\', \'良\', \'海\', \'山\', \'仁\', \'波\', \'宁\', \'贵\', \'福\', \'生\', \'龙\', \'元\', \'全\', \'国\', \'胜\', \'学\', \'祥\', \'才\', \'发\', \'武\', \'新\',\r\n            \'利\', \'清\', \'飞\', \'彬\', \'富\', \'顺\', \'信\', \'子\', \'杰\', \'涛\', \'昌\', \'成\', \'康\', \'星\', \'光\', \'天\', \'达\', \'安\', \'岩\', \'中\', \'茂\',\r\n            \'进\', \'林\', \'有\', \'坚\', \'和\', \'彪\', \'博\', \'诚\', \'先\', \'敬\', \'震\', \'振\', \'壮\', \'会\', \'思\', \'群\', \'豪\', \'心\', \'邦\', \'承\', \'乐\',\r\n            \'绍\', \'功\', \'松\', \'善\', \'厚\', \'庆\', \'磊\', \'民\', \'友\', \'裕\', \'河\', \'哲\', \'江\', \'超\', \'浩\', \'亮\', \'政\', \'谦\', \'亨\', \'奇\', \'固\',\r\n            \'之\', \'轮\', \'翰\', \'朗\', \'伯\', \'宏\', \'言\', \'若\', \'鸣\', \'朋\', \'斌\', \'梁\', \'栋\', \'维\', \'启\', \'克\', \'伦\', \'翔\', \'旭\', \'鹏\', \'泽\',\r\n            \'晨\', \'辰\', \'士\', \'以\', \'建\', \'家\', \'致\', \'树\', \'炎\', \'德\', \'行\', \'时\', \'泰\', \'盛\', \'雄\', \'琛\', \'钧\', \'冠\', \'策\', \'腾\', \'楠\',\r\n            \'榕\', \'风\', \'航\', \'弘\', \'秀\', \'娟\', \'英\', \'华\', \'慧\', \'巧\', \'美\', \'娜\', \'静\', \'淑\', \'惠\', \'珠\', \'翠\', \'雅\', \'芝\', \'玉\', \'萍\',\r\n            \'红\', \'娥\', \'玲\', \'芬\', \'芳\', \'燕\', \'彩\', \'春\', \'菊\', \'兰\', \'凤\', \'洁\', \'梅\', \'琳\', \'素\', \'云\', \'莲\', \'真\', \'环\', \'雪\', \'荣\',\r\n            \'爱\', \'妹\', \'霞\', \'香\', \'月\', \'莺\', \'媛\', \'艳\', \'瑞\', \'凡\', \'佳\', \'嘉\', \'琼\', \'勤\', \'珍\', \'贞\', \'莉\', \'桂\', \'娣\', \'叶\', \'璧\',\r\n            \'璐\', \'娅\', \'琦\', \'晶\', \'妍\', \'茜\', \'秋\', \'珊\', \'莎\', \'锦\', \'黛\', \'青\', \'倩\', \'婷\', \'姣\', \'婉\', \'娴\', \'瑾\', \'颖\', \'露\', \'瑶\',\r\n            \'怡\', \'婵\', \'雁\', \'蓓\', \'纨\', \'仪\', \'荷\', \'丹\', \'蓉\', \'眉\', \'君\', \'琴\', \'蕊\', \'薇\', \'菁\', \'梦\', \'岚\', \'苑\', \'婕\', \'馨\', \'瑗\',\r\n            \'琰\', \'韵\', \'融\', \'园\', \'艺\', \'咏\', \'卿\', \'聪\', \'澜\', \'纯\', \'毓\', \'悦\', \'昭\', \'冰\', \'爽\', \'琬\', \'茗\', \'羽\', \'希\', \'欣\', \'飘\',\r\n            \'育\', \'滢\', \'馥\', \'筠\', \'柔\', \'竹\', \'霭\', \'凝\', \'晓\', \'欢\', \'霄\', \'枫\', \'芸\', \'菲\', \'寒\', \'伊\', \'亚\', \'宜\', \'可\', \'姬\', \'舒\',\r\n            \'影\', \'荔\', \'枝\', \'丽\', \'阳\', \'妮\', \'宝\', \'贝\', \'初\', \'程\', \'梵\', \'罡\', \'恒\', \'鸿\', \'桦\', \'骅\', \'剑\', \'娇\', \'纪\', \'宽\', \'苛\',\r\n            \'灵\', \'玛\', \'媚\', \'琪\', \'晴\', \'容\', \'睿\', \'烁\', \'堂\', \'唯\', \'威\', \'韦\', \'雯\', \'苇\', \'萱\', \'阅\', \'彦\', \'宇\', \'雨\', \'洋\', \'忠\',\r\n            \'宗\', \'曼\', \'紫\', \'逸\', \'贤\', \'蝶\', \'菡\', \'绿\', \'蓝\', \'儿\', \'翠\', \'烟\', \'小\');\r\n        //名总数\r\n        $this-&gt;numbMing = count($this-&gt;arrMing);\r\n    }\r\n    // 获取姓\r\n    private function getXing()\r\n    {\r\n        return $this-&gt;arrXing[mt_rand(0, $this-&gt;numbXing)];\r\n    }\r\n    // 获取名字\r\n    private function getMing()\r\n    {\r\n        return $this-&gt;arrMing[mt_rand(0, $this-&gt;numbMing)];\r\n    }\r\n    // 获取名字\r\n    public function getName($type = 0)\r\n    {\r\n        $name = \'\';\r\n        switch ($type)\r\n        {\r\n            //2字\r\n            case 1:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing();\r\n                break;\r\n            //随机2、3个字\r\n            case 2:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing();\r\n                if (mt_rand(0, 100) &gt; 50) $name .= $this-&gt;getMing();\r\n                break;\r\n            //只取姓\r\n            case 3:\r\n                $name = $this-&gt;getXing();\r\n                break;\r\n            //只取名\r\n            case 4:\r\n                $name = $this-&gt;getMing();\r\n                break;\r\n            case 0:\r\n            //默认情况 1姓+2名\r\n            default:\r\n                $name = $this-&gt;getXing() . $this-&gt;getMing() . $this-&gt;getMing();\r\n        }\r\n        return $name;\r\n    }\r\n}\r\n//调用类，随机生成名字\r\n// index.php\r\nheader(\'Content-type: text/html; charset=utf-8\');\r\n// 引入文件\r\nrequire(\'rndChinaName.class.php\');\r\n$name_obj = new rndChinaName(); \r\n$name = $name_obj-&gt;getName(2);\r\necho $name;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:03:20', '2016-07-07 03:03:20', null);
INSERT INTO `notes_copy` VALUES ('10', 'php 标准4 位验证码的实现', null, '<p>1.展示</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;form&gt;\r\n    验证码：&lt;input type=\"text\" name=\"vcode\"&gt;\r\n    &lt;script type=\"text/javascript\"&gt;\r\n        //生成一个四位数\r\n        var num1 = Math.round(Math.random()*10000000+10000);\r\n        var num = num1.toString().substr(0,4);\r\n        document.write(\"&lt;img name=\'c\' src=\'vcode.php?code=\"+num+\"\'&gt;\");\r\n        //验证码作为图片从vcode.php文件返回\r\n        function recode()\r\n        {\r\n            //看不清换一张验证码的实现函数\r\n            var num1 = Math.round(Math.random()*10000000+10000);\r\n            var num = num1.toString().substr(0,4);\r\n            document.c.src = \"vcode.php?code=\"+num;\r\n        }\r\n    &lt;/script&gt;\r\n    &lt;a href=\"javascript:recode()\" style=\"text-decoration:none;\"&gt;看不清？换一张&lt;/a&gt;\r\n&lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>2.类库</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">//用header()函数发送HTTP头信息给浏览器，告诉输出的图片类型为png\r\nheader(\"Content-type:image/png\");\r\n//创建画布\r\n$im=imagecreate(60,20);\r\n//imageallocate()用于指定分配颜色，而imagefill()用于设置画布背景颜色\r\nimagefill($im,0,0,imagecolorallocate($im,200,200,200));\r\n//从index.php接收数字\r\n$code=$_GET[\'code\'];\r\nfor($i=0;$i&lt;4;$i++)\r\n{\r\n    $color=imagecolorallocate($im,rand(0,100),rand(0,100),rand(0,100));\r\n    //绘制文字\r\n    imagestring($im, rand(3,5),60*$i/4+rand(3,6), rand(0,6), $code[$i], $color);\r\n}\r\nfor($j=0;$j&lt;200;$j++)\r\n{\r\n    //绘制200个不规则像素点\r\n    imagesetpixel($im,rand(0,60),rand(0,20),imagecolorallocate($im,rand(0,255),rand(0,255),rand(0,255)));\r\n}\r\n//输出图像\r\nimagepng($im);\r\n//销毁图像资源\r\nimagedestroy($im);</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:11:52', '2016-07-07 03:11:52', null);
INSERT INTO `notes_copy` VALUES ('11', 'php 高效导出excel csv', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 导出excel(csv)\r\n * @data 导出数据\r\n * @headlist 第一行,列名\r\n * @fileName 输出Excel文件名\r\n */\r\npublic function csv_export($data = array(), $headlist = array(), $fileName)\r\n{\r\n    header(\'Content-Type: application/vnd.ms-excel\');\r\n    header(\'Content-Disposition: attachment;filename=\"\' . $fileName . \'.csv\"\');\r\n    header(\'Cache-Control: max-age=0\');\r\n    //打开PHP文件句柄,php://output 表示直接输出到浏览器\r\n    $fp = fopen(\'php://output\', \'a\');\r\n    //输出Excel列名信息\r\n    foreach ($headlist as $key =&gt; $value)\r\n    {\r\n        //CSV的Excel支持GBK编码，一定要转换，否则乱码\r\n        $headlist[$key] = iconv(\'utf-8\', \'gbk\', $value);\r\n    }\r\n    //将数据通过fputcsv写到文件句柄\r\n    fputcsv($fp, $headlist);\r\n    //计数器\r\n    $num = 0;\r\n    //每隔$limit行，刷新一下输出buffer，不要太大，也不要太小\r\n    $limit = 100000;\r\n    //逐行取出数据，不浪费内存\r\n    $count = count($data);\r\n    for ($i = 0; $i &lt; $count; $i++)\r\n    {\r\n        $num++;\r\n        //刷新一下输出buffer，防止由于数据过多造成问题\r\n        if ($limit == $num)\r\n        {\r\n            ob_flush();\r\n            flush();\r\n            $num = 0;\r\n        }\r\n        $row = $data[$i];\r\n        foreach ($row as $key =&gt; $value)\r\n        {\r\n            $row[$key] = iconv(\'utf-8\', \'gbk\', $value);\r\n        }\r\n        fputcsv($fp, $row);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:33:19', '2016-07-07 03:33:19', null);
INSERT INTO `notes_copy` VALUES ('12', 'php mysql jquery 实现的“顶”和“踩”投票功能', null, '<pre>\r\n<code class=\"language-html\">CREATE TABLE IF NOT EXISTS `votes` ( \r\n  `id` int(10) NOT NULL AUTO_INCREMENT, \r\n  `likes` int(10) NOT NULL DEFAULT \'0\', \r\n  `unlikes` int(10) NOT NULL DEFAULT \'0\', \r\n  PRIMARY KEY (`id`) \r\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8; \r\n  \r\n  \r\nINSERT INTO `votes` (`id`, `likes`, `unlikes`) VALUES \r\n(1, 30, 10); \r\n  \r\nCREATE TABLE IF NOT EXISTS `votes_ip` ( \r\n  `id` int(10) NOT NULL, \r\n  `vid` int(10) NOT NULL, \r\n  `ip` varchar(40) NOT NULL \r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8; \r\n \r\n-------------div--------------------------------------\r\n \r\n&lt;div class=\"digg\"&gt;  \r\n    &lt;div id=\"dig_up\" class=\"digup\"&gt; \r\n        &lt;span id=\"num_up\"&gt;&lt;/span&gt; \r\n        &lt;p&gt;很好，很强大！&lt;/p&gt; \r\n        &lt;div id=\"bar_up\" class=\"bar\"&gt;&lt;span&gt;&lt;/span&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt; \r\n    &lt;/div&gt; \r\n       &lt;div id=\"dig_down\" class=\"digdown\"&gt; \r\n        &lt;span id=\"num_down\"&gt;&lt;/span&gt; \r\n        &lt;p&gt;太差劲了！&lt;/p&gt; \r\n        &lt;div id=\"bar_down\" class=\"bar\"&gt;&lt;span&gt;&lt;/span&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt; \r\n    &lt;/div&gt; \r\n    &lt;div id=\"msg\"&gt;&lt;/div&gt; \r\n&lt;/div&gt; \r\n \r\n \r\n \r\n-------------css--------------------------\r\n.digg{width:420px; height:120px; margin:80px auto 20px auto; position:relative} \r\n#dig_up,#dig_down{width:200px; height:48px; margin:10px; position:relative;  \r\nborder:1px solid #d3d3d3; padding-left:42px; cursor:pointer} \r\n.digup{background:url(diggs.png) no-repeat 4px 2px;} \r\n.digup_on{background:url(diggs.png) no-repeat 4px -49px;} \r\n.digdown{background:url(diggs.png) no-repeat 4px -102px;} \r\n.digdown_on{background:url(diggs.png) no-repeat 4px -154px;} \r\n#num_up,#num_down{position:absolute; right:6px; top:18px; font-size:20px;} \r\n#dig_up p{height:24px; line-height:24px; color:#360} \r\n#dig_down p{height:24px; line-height:24px; color:#f30} \r\n.bar{width:100px; height:12px; line-height:12px; border:1px solid #f0f0f0;  \r\nposition:relative; text-align:center} \r\n.bar span{display:block; height:12px; } \r\n.bar i{position:absolute; top:0; left:104px;} \r\n#bar_up span{background:#360} \r\n#bar_down span{background:#f60} \r\n#msg{position:absolute; right:20px; top:40px; font-size:18px; color:#f00} \r\n \r\n \r\n \r\n-------jquery-------------------------\r\n \r\n$(function(){ \r\n    //鼠标滑向和离开投票按钮时，变换背景样式 \r\n    $(\"#dig_up\").hover(function(){ \r\n        $(this).addClass(\"digup_on\"); \r\n    },function(){ \r\n        $(this).removeClass(\"digup_on\"); \r\n    }); \r\n    $(\"#dig_down\").hover(function(){ \r\n        $(this).addClass(\"digdown_on\"); \r\n    },function(){ \r\n        $(this).removeClass(\"digdown_on\"); \r\n    }); \r\n      \r\n    //初始化数据 \r\n    getdata(\"do.php\",1); \r\n      \r\n    //单击“顶”时 \r\n    $(\"#dig_up\").click(function(){ \r\n        getdata(\"do.php?action=like\",1); \r\n    }); \r\n    //单击“踩”时 \r\n    $(\"#dig_down\").click(function(){ \r\n        getdata(\"do.php?action=unlike\",1); \r\n    }); \r\n}); \r\n \r\n \r\n \r\n---------------------------------------\r\nfunction getdata(url,sid){ \r\n    $.getJSON(url,{id:sid},function(data){ \r\n        if(data.success==1){//投票成功 \r\n            $(\"#num_up\").html(data.like); \r\n            //通过控制宽度来显示百分比进度条效果 \r\n            $(\"#bar_up span\").css(\"width\",data.like_percent); \r\n            $(\"#bar_up i\").html(data.like_percent); \r\n            $(\"#num_down\").html(data.unlike); \r\n            $(\"#bar_down span\").css(\"width\",data.unlike_percent); \r\n            $(\"#bar_down i\").html(data.unlike_percent); \r\n        }else{//投票失败 \r\n            $(\"#msg\").html(data.msg).show().css({\'opacity\':1,\'top\':\'40px\'}) \r\n            .animate({top:\'-50px\',opacity:0}, \"slow\"); \r\n        } \r\n    }); \r\n} \r\n \r\n \r\n---------php--------------------------\r\n \r\ninclude_once(\"connect.php\");//连接数据库 \r\n  \r\n$action = $_GET[\'action\']; \r\n$id = 1; \r\n$ip = get_client_ip();//获取ip \r\n  \r\nif($action==\'like\'){//顶 \r\n    likes(1,$id,$ip); \r\n}elseif($action==\'unlike\'){//踩 \r\n    likes(0,$id,$ip); \r\n}else{ \r\n    echo jsons($id); \r\n} \r\n \r\n------------------------------------\r\nfunction likes($type,$id,$ip){ \r\n    $ip_sql=mysql_query(\"select ip from votes_ip where vid=\'$id\' and ip=\'$ip\'\"); \r\n    $count=mysql_num_rows($ip_sql); \r\n    if($count==0){//还没有顶过 \r\n        if($type==1){//顶 \r\n            $sql = \"update votes set likes=likes+1 where id=\".$id; \r\n        }else{//踩 \r\n            $sql = \"update votes set unlikes=unlikes+1 where id=\".$id; \r\n        } \r\n        mysql_query($sql); \r\n          \r\n        $sql_in = \"insert into votes_ip (vid,ip) values (\'$id\',\'$ip\')\"; \r\n        mysql_query($sql_in); \r\n          \r\n        if(mysql_insert_id()&gt;0){ \r\n            echo jsons($id); \r\n        }else{ \r\n            $arr[\'success\'] = 0; \r\n            $arr[\'msg\'] = \'操作失败，请重试\'; \r\n            echo json_encode($arr); \r\n        } \r\n    }else{ \r\n        $msg = $type==1?\'您已经顶过了\':\'您已经踩过了\'; \r\n        $arr[\'success\'] = 0; \r\n        $arr[\'msg\'] = $msg; \r\n        echo json_encode($arr); \r\n    } \r\n} \r\n \r\n \r\n-----------php-------------------------\r\n \r\n \r\nfunction jsons($id){ \r\n    $query = mysql_query(\"select * from votes where id=\".$id); \r\n    $row = mysql_fetch_array($query); \r\n    $like = $row[\'likes\']; \r\n    $unlike = $row[\'unlikes\']; \r\n    $arr[\'success\']=1; \r\n    $arr[\'like\'] = $like; \r\n    $arr[\'unlike\'] = $unlike; \r\n    $like_percent = round($like/($like+$unlike),3)*100; \r\n    $arr[\'like_percent\'] = $like_percent.\'%\'; \r\n    $arr[\'unlike_percent\'] = (100-$like_percent).\'%\'; \r\n      \r\n    return json_encode($arr); \r\n} </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 03:46:12', '2016-07-07 03:46:12', null);
INSERT INTO `notes_copy` VALUES ('13', 'php 压缩图片', null, '<pre>\r\n<code class=\"language-php\">public function zip_pic()\r\n{\r\n    //修改php分配的内存\r\n    ini_set(\"memory_limit\",\"256M\"); \r\n    $filename = \'./images/imgp0627.jpg\';\r\n    $percent = 1;\r\n    // 内容类型\r\n    header(\'Content-Type: image/jpeg\');\r\n    // 获取新的尺寸\r\n    list($width, $height) = getimagesize($filename);\r\n    //* $percent;\r\n    $new_width = $width ;\r\n    //* $percent;\r\n    $new_height = $height ;\r\n    // 重新取样\r\n    $image_p = imagecreatetruecolor($new_width, $new_height);\r\n    $image = imagecreatefromjpeg($filename);\r\n    imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\r\n    // 输出\r\n    imagejpeg($image_p, \'./images/imgp0627-2.jpg\', 70);\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 04:54:46', '2016-07-07 04:54:46', null);
INSERT INTO `notes_copy` VALUES ('14', 'php 身份证提取生日', null, '<pre>\r\n<code class=\"language-php\">//用php从身份证中提取生日,包括15位和18位身份证 \r\nfunction getIDCardInfo($IDCard,$format=1)\r\n{\r\n    //0：未知错误，1：身份证格式错误，2：无错误\r\n    $result[\'error\']=0;\r\n    //0标示成年，1标示未成年\r\n    $result[\'flag\']=\'\';\r\n    //生日，格式如：2012-11-15\r\n    $result[\'tdate\']=\'\';\r\n    if(!preg_match(\"/^(\\d{15}$|^\\d{18}$|^\\d{17}(\\d|X|x))$/\",$IDCard))\r\n    {\r\n        $result[\'error\']=1;\r\n        return $result;\r\n    }\r\n    else\r\n    {\r\n        if(strlen($IDCard)==18)\r\n        {\r\n            $tyear=intval(substr($IDCard,6,4));\r\n            $tmonth=intval(substr($IDCard,10,2));\r\n            $tday=intval(substr($IDCard,12,2));\r\n        }\r\n        elseif(strlen($IDCard)==15)\r\n        {\r\n            $tyear=intval(\"19\".substr($IDCard,6,2));\r\n            $tmonth=intval(substr($IDCard,8,2));\r\n            $tday=intval(substr($IDCard,10,2));\r\n        }\r\n\r\n        if($tyear&gt;date(\"Y\")||$tyear&lt;(date(\"Y\")-100))\r\n        {\r\n            $flag=0;\r\n        }\r\n        elseif($tmonth&lt;0||$tmonth&gt;12)\r\n        {\r\n            $flag=0;\r\n        }\r\n        elseif($tday&lt;0||$tday&gt;31)\r\n        {\r\n            $flag=0;\r\n        }\r\n        else\r\n        {\r\n            if($format)\r\n            {\r\n                $tdate=$tyear.\"-\".$tmonth.\"-\".$tday;\r\n            }\r\n            else\r\n            {\r\n                $tdate=$tmonth.\"-\".$tday;\r\n            }\r\n\r\n            if((time()-mktime(0,0,0,$tmonth,$tday,$tyear))&gt;18*365*24*60*60)\r\n            {\r\n                $flag=0;\r\n            }\r\n            else\r\n            {\r\n                $flag=1;\r\n            }\r\n        }\r\n    }\r\n    //0：未知错误，1：身份证格式错误，2：无错误\r\n    $result[\'error\']=2;\r\n    //0标示成年，1标示未成年\r\n    $result[\'isAdult\']=$flag;\r\n    //生日日期\r\n    $result[\'birthday\']=$tdate;\r\n    return $result;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 04:58:56', '2016-07-07 04:58:56', null);
INSERT INTO `notes_copy` VALUES ('15', 'php 无刷新上传图片', null, '<pre>\r\n<code class=\"language-php\">function upload_pic($path)\r\n{\r\n    $filename   = \'userfile\';\r\n    $pic_path   = \'\';\r\n    $picname    = $_FILES[$filename][\'name\'];\r\n    $picsize    = $_FILES[$filename][\'size\'];\r\n    if ($picname != \"\")\r\n    {\r\n        $type = strstr($picname,\'.\');\r\n        if ($type!=\'.jpg\'&amp;&amp;$type!=\'.gif\'&amp;&amp;$type!=\'.png\')\r\n        {\r\n            $array = array(\r\n                \'name\'     =&gt; \'格式错误,请上传jpg,gif,png\',\r\n                \'pic\'      =&gt; \'\',\r\n                \'size\'     =&gt; \'\',\r\n                \'pic_path\' =&gt; \'\'\r\n            );\r\n            return json_encode($array);\r\n        }\r\n        $pics        = md5(uniqid()). $type;\r\n        $path        = $this-&gt;create_dir($path);\r\n        $pic_path    = strtr($path,array(\'./\'=&gt;\'\')). $pics;\r\n        move_uploaded_file($_FILES[$filename][\'tmp_name\'], $pic_path);\r\n    }\r\n    if(file_exists($pic_path))\r\n    {\r\n        $this-&gt;process_pic($pic_path);\r\n    }\r\n    $size= round($picsize/1024,2);\r\n    $arr = array(\r\n        \'name\'     =&gt; $picname,\r\n        \'pic\'      =&gt; $pic_path,\r\n        \'size\'     =&gt; $size,\r\n        \'pic_path\' =&gt; $pic_path\r\n    );\r\n    return json_encode($arr);\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:01:32', '2016-07-07 05:01:32', null);
INSERT INTO `notes_copy` VALUES ('16', 'php 生成序列号 把12位时间数值压缩成7-8位字母+数字组合字符串', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 生成序列号\r\n * &lt;br /&gt;把12位时间数值压缩成7-8位字母+数字组合字符串,重点是加上用户编号后将永不重复哈\r\n * &lt;br /&gt;用法：$serial_no = sofn_generate_serial(\'KH\' . $this-&gt;user_login_data[\'id\']);\r\n * &lt;br /&gt;示例：160121054346(12位,date(\'ymdhis\'))压缩后QBVF4346(8位,sofn_generate_serial())\r\n * @param string $serial_no 序号前缀，如:\'KH\' . $this-&gt;user_login_data[\'id\']\r\n * @return string 如：QBVF295\r\n * @since VER:1.0; DATE:2016-1-21; AUTHOR:SoChishun; EMAIL:14507247@qq.com; DESC:Added.\r\n */\r\nfunction sofn_generate_serial($serial_no=\'\')\r\n{\r\n    $time = date(\'y-m-d-H-i-s\');\r\n    $atime = explode(\'-\', $time);\r\n    foreach ($atime as $stime)\r\n    {\r\n        $itime = $stime * 1;\r\n        if ($itime &lt; 26)\r\n        {\r\n            // 65(A)-90(Z)\r\n            $serial_no.=chr(65 + $itime);\r\n            continue;\r\n        }\r\n        // 48(0)-57(9)\r\n        if ($itime &gt;= 48 &amp;&amp; $itime &lt;= 57)\r\n        {\r\n            $serial_no.=chr($stime);\r\n            continue;\r\n        }\r\n        $serial_no.=$stime;\r\n    }\r\n    return $serial_no;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:05:52', '2016-07-07 05:05:52', null);
INSERT INTO `notes_copy` VALUES ('17', 'php 內容已数组存入文件,使用直接require即可', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 把內容以array的形式存入php檔案內,使用時直接require即可,該方式可達到高效緩存的目的\r\n * 獲取內容(1個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * 說明:\r\n * 返回php檔案內的array\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\');\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * 新增內容(2個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * [1]:未知,要新增的內容\r\n * 說明:\r\n * 把第2個參數的內容追加到$arr的尾巴上\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',$arr);\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * 刪除內容(3個參數):\r\n * 参数:\r\n * [0]:str型,PHP的路徑和檔案名的組合,如:Run.\'_tip/_\'.$uid.\'.php\'\r\n * [1]:str型,[\'del\':只刪除參數[2]對應的一行;\'delall\':全刪]\r\n * [2]:int型,要刪除的索引$key值\r\n * 說明:\r\n * 把第3個參數所屬的那一行內容刪除或全刪(要看[1]的值而定)\r\n * 用法:\r\n * $x=Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',\'del\',$key);\r\n * Fun::PHP(Run.\'_tip/_\'.$uid.\'.php\',\'delall\',\'\');\r\n * 返回:\r\n * array(\r\n * 0=&gt;bool型,是否執行成功\r\n * 1=&gt;若執行失敗則返回str型的錯誤消息,成功則返回array\r\n * )\r\n * /**/\r\npublic static function PHP()\r\n{\r\n    $o = func_get_args();\r\n    $c = count($o);\r\n    if ($c &lt; 1) \r\n    {\r\n        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 至少要傳遞一個參數!\');\r\n    }\r\n    //確保副檔名是.php\r\n    if (substr($o[0], -4) != \'.php\')\r\n    {\r\n        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 副檔名必須是.php\');\r\n    }\r\n    $t = \'&lt;?PHP\' . PHP_EOL . \'//該檔案由系統自動產出請勿手工修改\' . PHP_EOL;\r\n    //若暫存檔不存在則創建之\r\n    if (!file_exists($o[0]))\r\n    {\r\n        file_put_contents($o[0], $t . \'$arr=array();\', LOCK_EX);\r\n        chmod($o[0], 0777);\r\n    }\r\n    require($o[0]);\r\n    $arr = (!is_array($arr)) ? array() : $arr;\r\n    switch ($c) \r\n    {\r\n        //傳遞了1個參數(0=&gt;php檔案名),返回php檔案內的array\r\n        case 1:\r\n            return array(TRUE, $arr);\r\n        //傳遞了2個參數(0=&gt;php檔案名,1=&gt;要新增的內容),把第2個參數的內容追加到$arr的尾巴上\r\n        case 2:\r\n            $arr[] = $o[1];\r\n            $arr = $t . \'$arr=\' . var_export($arr, TRUE) . \';\';\r\n            file_put_contents($o[0], $arr, LOCK_EX);\r\n            chmod($o[0], 0777);\r\n            unset($o, $t);\r\n            return array(TRUE, $arr);\r\n        //傳遞了3個參數(0=&gt;php檔案名,1=&gt;\'del\',2=&gt;要刪除的索引$key值),把第3個參數所屬的那一行內容刪除\r\n        case 3:\r\n            if (!in_array($o[1], array(\'del\', \'delall\')))\r\n            {\r\n                return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數2錯誤!\');\r\n            }\r\n            switch ($o[1])\r\n            {\r\n                //把第3個參數所屬的那一行內容刪除\r\n                case \'del\':\r\n                    if (!isset($o[2]) or !is_numeric($o[2]))\r\n                    {\r\n                        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數3錯誤!\');\r\n                    }\r\n                    if (!isset($arr[$o[2]]))\r\n                    {\r\n                        return array(TRUE, $arr);\r\n                    }\r\n                    //若要刪除的項目已不存在則直接返回\r\n                    unset($arr[$o[2]]);\r\n                    $arr = $t . \'$arr=\' . var_export($arr, TRUE) . \';\';\r\n                    file_put_contents($o[0], $arr, LOCK_EX);\r\n                    chmod($o[0], 0777);\r\n                    unset($o, $t);\r\n                    return array(TRUE, $arr);\r\n                //全刪\r\n                case \'delall\':\r\n                    if (!isset($o[2])) \r\n                    {\r\n                        return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數3錯誤!\');\r\n                    }\r\n                    $arr = $t . \'$arr=array();\';\r\n                    file_put_contents($o[0], $arr, LOCK_EX);\r\n                    chmod($o[0], 0777);\r\n                    unset($o, $t);\r\n                    return array(TRUE, array());\r\n            }\r\n            throw new exception(\'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \'!\');\r\n            die();\r\n        default:\r\n            unset($o, $t);\r\n            return array(FALSE, \'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \' 參數個數錯誤!\');\r\n    }\r\n    unset($o, $t);\r\n    throw new exception(\'Error:\' . __LINE__ . \',\' . basename(__FILE__) . \'!\');\r\n    die();\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:11:19', '2016-07-07 05:11:19', null);
INSERT INTO `notes_copy` VALUES ('18', 'php 代码注释 神兽护体 代码无bug', null, '<pre>\r\n<code class=\"language-php\">/**\r\n *\r\n * ━━━━━━神兽出没━━━━━━\r\n * 　　　┏┓　　　┏┓\r\n * 　　┏┛┻━━━┛┻┓\r\n * 　　┃　　　　　　　┃\r\n * 　　┃　　　━　　　┃\r\n * 　　┃　┳┛　┗┳　┃\r\n * 　　┃　　　　　　　┃\r\n * 　　┃　　　┻　　　┃\r\n * 　　┃　　　　　　　┃\r\n * 　　┗━┓　　　┏━┛Code is far away from bug with the animal protecting\r\n * 　　　　┃　　　┃    神兽保佑,代码无bug\r\n * 　　　　┃　　　┃\r\n * 　　　　┃　　　┗━━━┓\r\n * 　　　　┃　　　　　　　┣┓\r\n * 　　　　┃　　　　　　　┏┛\r\n * 　　　　┗┓┓┏━┳┓┏┛\r\n * 　　　　　┃┫┫　┃┫┫\r\n * 　　　　　┗┻┛　┗┻┛\r\n *\r\n * ━━━━━━感觉萌萌哒━━━━━━\r\n */\r\n  \r\n/**\r\n * 　　　　　　　　┏┓　　　┏┓\r\n * 　　　　　　　┏┛┻━━━┛┻┓\r\n * 　　　　　　　┃　　　　　　　┃ 　\r\n * 　　　　　　　┃　　　━　　　┃\r\n * 　　　　　　　┃　＞　　　＜　┃\r\n * 　　　　　　　┃　　　　　　　┃\r\n * 　　　　　　　┃...　⌒　...　┃\r\n * 　　　　　　　┃　　　　　　　┃\r\n * 　　　　　　　┗━┓　　　┏━┛\r\n * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug\r\n * 　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┃  　　　　　　\r\n * 　　　　　　　　　┃　　　┃\r\n * 　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n * 　　　　　　　　　┃　　　┗━━━┓\r\n * 　　　　　　　　　┃　　　　　　　┣┓\r\n * 　　　　　　　　　┃　　　　　　　┏┛\r\n * 　　　　　　　　　┗┓┓┏━┳┓┏┛\r\n * 　　　　　　　　　　┃┫┫　┃┫┫\r\n * 　　　　　　　　　　┗┻┛　┗┻┛\r\n */\r\n  \r\n/**\r\n *　　　　　　　　┏┓　　　┏┓+ +\r\n *　　　　　　　┏┛┻━━━┛┻┓ + +\r\n *　　　　　　　┃　　　　　　　┃ 　\r\n *　　　　　　　┃　　　━　　　┃ ++ + + +\r\n *　　　　　　 ████━████ ┃+\r\n *　　　　　　　┃　　　　　　　┃ +\r\n *　　　　　　　┃　　　┻　　　┃\r\n *　　　　　　　┃　　　　　　　┃ + +\r\n *　　　　　　　┗━┓　　　┏━┛\r\n *　　　　　　　　　┃　　　┃　　　　　　　　　　　\r\n *　　　　　　　　　┃　　　┃ + + + +\r\n *　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting　　　　　　　\r\n *　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　\r\n *　　　　　　　　　┃　　　┃\r\n *　　　　　　　　　┃　　　┃　　+　　　　　　　　　\r\n *　　　　　　　　　┃　 　　┗━━━┓ + +\r\n *　　　　　　　　　┃ 　　　　　　　┣┓\r\n *　　　　　　　　　┃ 　　　　　　　┏┛\r\n *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +\r\n *　　　　　　　　　　┃┫┫　┃┫┫\r\n *　　　　　　　　　　┗┻┛　┗┻┛+ + + +\r\n */</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:16:21', '2016-07-07 05:16:21', null);
INSERT INTO `notes_copy` VALUES ('19', 'php 获取用户真实 IP  淘宝IP接口获得ip地理位置', null, '<pre>\r\n<code class=\"language-php\">/**\r\n * 获取用户真实 IP\r\n */\r\nfunction getIP()\r\n{\r\n    static $realip;\r\n    if (isset($_SERVER))\r\n    {\r\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"]))\r\n        {\r\n            $realip = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\r\n        }\r\n        else if (isset($_SERVER[\"HTTP_CLIENT_IP\"]))\r\n        {\r\n            $realip = $_SERVER[\"HTTP_CLIENT_IP\"];\r\n        }\r\n        else\r\n        {\r\n            $realip = $_SERVER[\"REMOTE_ADDR\"];\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (getenv(\"HTTP_X_FORWARDED_FOR\"))\r\n        {\r\n            $realip = getenv(\"HTTP_X_FORWARDED_FOR\");\r\n        }\r\n        else if (getenv(\"HTTP_CLIENT_IP\"))\r\n        {\r\n            $realip = getenv(\"HTTP_CLIENT_IP\");\r\n        }\r\n        else\r\n        {\r\n            $realip = getenv(\"REMOTE_ADDR\");\r\n        }\r\n    }\r\n    return $realip;\r\n}\r\n/**\r\n * 获取 IP  地理位置\r\n * 淘宝IP接口\r\n * @Return: array\r\n */\r\nfunction getCity($ip)\r\n{\r\n    $url = \"http://ip.taobao.com/service/getIpInfo.php?ip=\".$ip;\r\n    $ip = json_decode(file_get_contents($url));\r\n    if ((string)$ip-&gt;code == \'1\')\r\n    {\r\n        return false;\r\n    }\r\n    $data = (array)$ip-&gt;data;\r\n    return $data;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:20:52', '2016-07-07 05:20:52', null);
INSERT INTO `notes_copy` VALUES ('20', 'php 100%并发无误 高效文本缓存类.', null, '<pre>\r\n<code class=\"language-php\">$old = sprintf(\'%1.4f\', memory_get_peak_usage() / 1024) .\' KB\';\r\nclass caches\r\n{\r\n    public  $keep_time = 3600;\r\n    public  $file_path = \'./cache.txt\';\r\n    private $handle    = null;\r\n    private $time      = 0;\r\n    public function __construct()\r\n    {\r\n        $this-&gt;time = time();\r\n    }\r\n    public function read($key, $keep_time=0)\r\n    {\r\n        # 取得第一行. 判断过期, 不存在, 异常情况, 影响返回值即可. 返回值决定write方法的调用.\r\n        $keep_time === 0 &amp;&amp; $keep_time = $this-&gt;keep_time;\r\n        $list = $this-&gt;__get_one();\r\n        # 是否更新判断.\r\n        $check = true;\r\n        if(!$list[$key])\r\n            $check = false;\r\n        if($check &amp;&amp; (time() - $list[$key][\'t\']) &gt;= $keep_time)\r\n            $check = false;\r\n        # 取得第几行数据.\r\n        $line = $list[$key][\'l\']+0;\r\n        $i = 1;\r\n        $data = \'\';\r\n        if($this-&gt;handle)\r\n        {\r\n            while(!feof($this-&gt;handle))\r\n            {\r\n                if($i === $line)\r\n                {\r\n                    $data = fgets($this-&gt;handle);\r\n                }\r\n                else\r\n                {\r\n                    // TODO: 有没有好办法跳过这步...\r\n                    fgets($this-&gt;handle);\r\n                }\r\n                $i ++;\r\n            }\r\n        }\r\n        # 无论如何都保障数据为数组返回.\r\n        if($data)\r\n        {\r\n            $data = $this-&gt;__data_parse($data,\'DECODE\');\r\n        }\r\n        !$data &amp;&amp; $data = array();\r\n        return $data;\r\n    }\r\n    public function write($key, $val)\r\n    {\r\n        # 取得第一行. 判断key是否已经存在了..\r\n        $list = $this-&gt;__get_one();\r\n        # 什么情况下可以写入.\r\n        if($list[$key])\r\n        {\r\n            # 已经过期的情况下. write函数被调用后, 不管如何都当作过期.\r\n            $list[$key][\'t\'] = $this-&gt;time;\r\n            $list[\'end\'] = $list[$key][\'l\'];\r\n        }\r\n        else\r\n        {\r\n            $list[$key] = array(\'t\'=&gt;$this-&gt;time,\'l\'=&gt;($list[\'end\']+1));\r\n            $list[\'end\'] = $list[$key][\'l\'];\r\n        }\r\n        # 数据加密处理后再传给__write. $list[\'end\'] 表示更新哪一行.\r\n        return $this-&gt;__write($list[\'end\'], $this-&gt;__data_parse($val), serialize($list));\r\n    }\r\n    private function __get_one()\r\n    {\r\n        $this-&gt;__read_fopens();\r\n        if(!$this-&gt;handle)\r\n            return array();\r\n        $list = array();\r\n        if($seria = rtrim(fgets($this-&gt;handle)))\r\n        {\r\n            $list = unserialize($seria);\r\n            unset($seria);\r\n        }\r\n        !$list &amp;&amp; $list = array();\r\n        return $list;\r\n    }\r\n    private function __data_parse($data, $cls=\'ENCODE\')\r\n    {\r\n        # $State 参数以减少is_string, count两函数的调用.\r\n        if($cls === \'ENCODE\')\r\n        {\r\n            # 一定要返回无换行的一行. 切记\r\n            # gzcompress 非常占内存, 只是写入时执行.\r\n            $data = base64_encode(gzcompress(serialize($data),9));\r\n        }\r\n        else\r\n        {\r\n            $data = unserialize(gzuncompress(base64_decode(rtrim($data))));\r\n            if($State === false &amp;&amp; count($data) === 1 &amp;&amp; isset($data[0]) === true)\r\n            {\r\n                $data = $data[0];\r\n            }\r\n        }\r\n        return $data;\r\n    }\r\n    private function __write($line, $data, $firstline)\r\n    {\r\n        $savedata = array();\r\n        $line +=0;\r\n        $i = 1;\r\n        $savedata[0] = $firstline;\r\n        if($this-&gt;handle){\r\n            while(!feof($this-&gt;handle))\r\n            {\r\n                $savedata[$i] = rtrim(fgets($this-&gt;handle));\r\n                if($i === $line)\r\n                {\r\n                    $savedata[$i]= $data;\r\n                }\r\n                $i ++;\r\n            }\r\n        }\r\n        if(!$savedata[$line])\r\n            $savedata[$line] = $data;\r\n        if($this-&gt;handle)\r\n            $this-&gt;__closes();\r\n        # 重新写入文件.\r\n        if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n            if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                    if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                        if(!$fp = fopen($this-&gt;file_path, \'wb\'))\r\n                            return 0;\r\n        flock($fp, LOCK_EX | LOCK_NB);\r\n        $ints = 0;\r\n        //$ints = fwrite($fp, implode(PHP_EOL, $savedata));\r\n        foreach($savedata AS $key =&gt; $val)\r\n        {\r\n            if($key === 0)\r\n            {\r\n                $ints += fwrite($fp,$val);\r\n            }\r\n            else\r\n            {\r\n                $ints += fwrite($fp,PHP_EOL.$val);\r\n            }\r\n            if($key === 0 &amp;&amp; $ints &lt;= 0)\r\n                break;\r\n        }\r\n        unset($savedata);\r\n        flock($fp, LOCK_UN);\r\n        fclose($fp);\r\n        return $ints;\r\n    }\r\n    private function __read_fopens()\r\n    {\r\n        $cls = \'rb\';\r\n        if($this-&gt;handle)\r\n            $this-&gt;__closes();\r\n        if(is_file($this-&gt;file_path) === false)\r\n            return false;\r\n        if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n            if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                    if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                        if(!$this-&gt;handle = fopen($this-&gt;file_path,$cls))\r\n                            $this-&gt;handle = null;\r\n        if($this-&gt;handle)\r\n            flock($this-&gt;handle,LOCK_EX | LOCK_NB);\r\n    }\r\n    private function __closes()\r\n    {\r\n        if($this-&gt;handle)\r\n        {\r\n            flock($this-&gt;handle, LOCK_UN);\r\n            fclose($this-&gt;handle);\r\n            $this-&gt;handle = null;\r\n        }\r\n    }\r\n}\r\n########################################### 调用代码 #########################################\r\nset_time_limit(0);\r\n$atime = microtime(true);\r\n$obj = new caches();\r\n// (0 / 1) 写入或者读, 测试效果.\r\n$read = 1;\r\n// 10K\r\n$size = 10000;\r\n// 首次要快得多, 200:1秒, 1000:11秒\r\n$arr = range(1,100);\r\nforeach($arr AS $val)\r\n{\r\n    if($read == 0)\r\n    {\r\n        // 写入测试.\r\n        $ints = $obj-&gt;write(\'key\'.$val,array(\'key\'=&gt;str_repeat(\'A\',$size)));\r\n        echo \'key\'.$val.\' write size: \'. ($ints / 1000).\' KB&lt;br /&gt;\';\r\n    }\r\n    else\r\n    {\r\n        // 读缓存测试.\r\n        $ints = $obj-&gt;read(\'key\'.$val);\r\n        echo \'key\'.$val.\' read size: \'. strlen($ints[\'key\']) / 1000 .\' KB&lt;br /&gt;\';\r\n    }\r\n}\r\n#################################### 以下代码为监控作用 ####################################\r\necho \'&lt;br /&gt;执行时间: \';\r\necho sprintf(\'%1.4f\',microtime(true) - $atime).\' 秒\';\r\necho \'&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;内存监控: \';\r\necho $new = sprintf(\'%1.4f\', memory_get_peak_usage() / 1024) .\' KB\';\r\necho \'&lt;br&gt;&lt;hr&gt;原始内存: \';\r\necho $old;\r\necho \'&lt;br&gt;&lt;hr&gt;增加内存: \';\r\necho sprintf(\'%1.4f\',$new - $old) .\' KB\';\r\nexit();</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', null, null, '1', '6', null, '2016-07-07 05:29:34', '2016-07-07 05:29:34', null);
INSERT INTO `notes_copy` VALUES ('21', 'php 简单有用的PHP函数', null, '<pre>\r\n<code class=\"language-php\">1. 对象到数组转换\r\nfunction objToArr($obj)\r\n{\r\n    if(!is_object($obj) &amp;&amp; !is_array($obj))\r\n    {\r\n        return $obj;\r\n    }\r\n    $arr = array();\r\n    foreach($obj as $k =&gt; $v)\r\n    {\r\n        $arr[$k] = $this-&gt;objToArr($v);\r\n    }\r\n    return $arr;\r\n}\r\n2. json到php数组转换\r\nfunction simple_json_parser($json)\r\n{\r\n    $json = str_replace(\"{\",\"\",str_replace(\"}\",\"\", $json));\r\n    $jsonValue = explode(\",\", $json);\r\n    $arr = array();\r\n    foreach($jsonValue as $v)\r\n    {\r\n        $jValue = explode(\":\", $v);\r\n        $arr[str_replace(\'\"\',\"\", $jValue[0])] = (str_replace(\'\"\', \"\", $jValue[1]));\r\n    }\r\n    return $arr;\r\n}\r\n3. curl 实现 GET / POST\r\nfunction oauth_http($method,$header,$url,$data)\r\n{\r\n    $method = $method ? $method : \'get\';\r\n    if( $method == \'get\')\r\n    {\r\n        $ch = curl_init ();\r\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\r\n        curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_URL, $url );\r\n        $result = curl_exec ( $ch );\r\n        curl_close ( $ch );\r\n        return $result;\r\n    }\r\n    elseif ( $method == \'post\' )\r\n    {\r\n        $ch = curl_init();\r\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\r\n        curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_POST, TRUE );\r\n        curl_setopt ( $ch, CURLOPT_POSTFIELDS, $data );\r\n        curl_setopt ( $ch, CURLOPT_URL, $url );\r\n        curl_setopt ( $ch, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n        $ret = curl_exec ( $ch );\r\n        curl_close ( $ch );\r\n        return $ret;\r\n    }\r\n}\r\n4. 获取链接内容(不存在file_get_contents() 时使用curl方法)\r\nfunction get_url_contents($url)\r\n{\r\n    if (ini_get(\"allow_url_fopen\") == \"1\")\r\n        return file_get_contents($url);\r\n    $ch = curl_init();\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\r\n    curl_setopt($ch, CURLOPT_URL, $url);\r\n    $result =  curl_exec($ch);\r\n    curl_close($ch);\r\n    return $result;\r\n}</code></pre>\r\n', null, null, '1', '6', null, '2016-07-08 16:46:27', '2016-07-11 17:11:52', null);
INSERT INTO `notes_copy` VALUES ('22', 'php 加密算法', null, '<pre>\r\n<code class=\"language-php\">1. Discuz authcode\r\n/**\r\n * $string 明文或密文\r\n * $operation 加密ENCODE或解密DECODE\r\n * $key 密钥\r\n * $expiry 密钥有效期\r\n */\r\nfunction authcode($string, $operation = \'DECODE\', $key = \'\', $expiry = 0)\r\n{\r\n    // 动态密匙长度，相同的明文会生成不同密文就是依靠动态密匙 \r\n    // 加入随机密钥，可以令密文无任何规律，即便是原文和密钥完全相同，加密结果也会每次不同，增大破解难度。 \r\n    // 取值越大，密文变动规律越大，密文变化 = 16 的 $ckey_length 次方 \r\n    // 当此值为 0 时，则不产生随机密钥 \r\n    $ckey_length = 4;\r\n    // 密匙 \r\n    // $GLOBALS[\'discuz_auth_key\'] 这里可以根据自己的需要修改 \r\n    $key = md5($key ? $key : $GLOBALS [\'discuz_auth_key\']);\r\n    // 密匙a会参与加解密 \r\n    $keya = md5(substr($key, 0, 16));\r\n    // 密匙b会用来做数据完整性验证 \r\n    $keyb = md5(substr($key, 16, 16));\r\n    // 密匙c用于变化生成的密文 \r\n    $keyc = $ckey_length ? ($operation == \'DECODE\' ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : \'\';\r\n    // 参与运算的密匙 \r\n    $cryptkey = $keya . md5($keya . $keyc);\r\n    $key_length = strlen($cryptkey);\r\n    // 明文，前10位用来保存时间戳，解密时验证数据有效性，10到26位用来保存$keyb(密匙b)，解密时会通过这个密匙验证数据完整性 \r\n    // 如果是解码的话，会从第$ckey_length位开始，因为密文前$ckey_length位保存 动态密匙，以保证解密正确 \r\n    $string = $operation == \'DECODE\' ? base64_decode(substr($string, $ckey_length)) : sprintf(\'%010d\', $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string;\r\n    $string_length = strlen($string);\r\n    $result = \'\';\r\n    $box = range(0, 255);\r\n    $rndkey = array();\r\n    // 产生密匙簿 \r\n    for ($i = 0; $i &lt;= 255; $i++) \r\n    {\r\n        $rndkey [$i] = ord($cryptkey [$i % $key_length]);\r\n    }\r\n    // 用固定的算法，打乱密匙簿，增加随机性，好像很复杂，实际上并不会增加密文的强度 \r\n    for ($j = $i = 0; $i &lt; 256; $i++) \r\n    {\r\n        $j = ($j + $box [$i] + $rndkey [$i]) % 256;\r\n        $tmp = $box [$i];\r\n        $box [$i] = $box [$j];\r\n        $box [$j] = $tmp;\r\n    }\r\n    // 核心加解密部分 \r\n    for ($a = $j = $i = 0; $i &lt; $string_length; $i++) \r\n    {\r\n        $a = ($a + 1) % 256;\r\n        $j = ($j + $box [$a]) % 256;\r\n        $tmp = $box [$a];\r\n        $box [$a] = $box [$j];\r\n        $box [$j] = $tmp;\r\n        // 从密匙簿得出密匙进行异或，再转成字符 \r\n        $result .= chr(ord($string [$i]) ^ ($box [($box [$a] + $box [$j]) % 256]));\r\n    }\r\n    if ($operation == \'DECODE\') \r\n    {\r\n        // substr($result, 0, 10) == 0 验证数据有效性 \r\n        // substr($result, 0, 10) - time() &gt; 0 验证数据有效性 \r\n        // substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16) 验证数据完整性 \r\n        // 验证数据有效性，请看未加密明文的格式 \r\n        if ((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &gt; 0) &amp;&amp; substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) \r\n        {\r\n            return substr($result, 26);\r\n        } \r\n        else \r\n        {\r\n            return \'\';\r\n        }\r\n    }\r\n    else \r\n    {\r\n        // 把动态密匙保存在密文里，这也是为什么同样的明文，生产不同密文后能解密的原因 \r\n        // 因为加密后的密文可能是一些特殊字符，复制过程可能会丢失，所以用base64编码 \r\n        return $keyc . str_replace(\'=\', \'\', base64_encode($result));\r\n    }\r\n}\r\n$a = \"www.test.com\";\r\n$b = authcode($a, \"ENCODE\", \"abc123\");\r\necho $b . \"&lt;br/&gt;\";\r\necho authcode($b, \"DECODE\", \"abc123\");\r\n2. 简单对称加密算法\r\n/**\r\n * 简单对称加密算法之加密\r\n * @param String $string 需要加密的字串\r\n * @param String $skey 加密EKY\r\n * @author Anyon Zou &lt;zoujingli@qq.com&gt;\r\n * @date 2013-08-13 19:30\r\n * @update 2014-10-10 10:10\r\n * @return String\r\n */\r\nfunction encode($string = \'\', $skey = \'cxphp\')\r\n{\r\n    $strArr = str_split(base64_encode($string));\r\n    $strCount = count($strArr);\r\n    foreach (str_split($skey) as $key =&gt; $value)\r\n    $key &lt; $strCount &amp;&amp; $strArr [$key] .= $value;\r\n    return str_replace(array(\'=\', \'+\', \'/\'), array(\'O0O0O\', \'o000o\', \'oo00o\'), join(\'\', $strArr));\r\n}\r\n/**\r\n * 简单对称加密算法之解密\r\n * @param String $string 需要解密的字串\r\n * @param String $skey 解密KEY\r\n * @author Anyon Zou &lt;zoujingli@qq.com&gt;\r\n * @date 2013-08-13 19:30\r\n * @update 2014-10-10 10:10\r\n * @return String\r\n */\r\nfunction decode($string = \'\', $skey = \'cxphp\')\r\n{\r\n    $strArr = str_split(str_replace(array(\'O0O0O\', \'o000o\', \'oo00o\'), array(\'=\', \'+\', \'/\'), $string), 2);\r\n    $strCount = count($strArr);\r\n    foreach (str_split($skey) as $key =&gt; $value)\r\n    $key &lt;= $strCount &amp;&amp; isset($strArr [$key]) &amp;&amp; $strArr [$key][1] === $value &amp;&amp; $strArr [$key] = $strArr [$key][0];\r\n    return base64_decode(join(\'\', $strArr));\r\n}\r\necho \'&lt;pre&gt;\';\r\n$str = \'56,15123365247,54,四大古典风格\';\r\necho \"string : \" . $str . \" &lt;br /&gt;\";\r\necho \"encode : \" . ($enstring = encode($str)) . \'&lt;br /&gt;\';\r\necho \"decode : \" . decode($enstring);\r\n3. DES加密解密\r\nclass  DES\r\n{\r\n    public $key;\r\n    public $iv;  //偏移量\r\n    function __construct($key, $iv = 0)\r\n    {\r\n        $this-&gt;key = $key;\r\n        if ($iv == 0) \r\n        {\r\n            $this-&gt;iv = $key;\r\n        } \r\n        else \r\n        {\r\n            $this-&gt;iv = $iv;\r\n        }\r\n    }\r\n    //加密 \r\n    function encrypt($str)\r\n    {\r\n        $size = mcrypt_get_block_size(MCRYPT_DES, MCRYPT_MODE_CBC);\r\n        $str = $this-&gt;pkcs5Pad($str, $size);\r\n        $data = mcrypt_cbc(MCRYPT_DES, $this-&gt;key, $str, MCRYPT_ENCRYPT, $this-&gt;iv);\r\n        //$data=strtoupper(bin2hex($data)); //返回大写十六进制字符串 \r\n        return base64_encode($data);\r\n    }\r\n    //解密 \r\n    function decrypt($str)\r\n    {\r\n        $str = base64_decode($str);\r\n        //$strBin = $this-&gt;hex2bin( strtolower($str)); \r\n        $str = mcrypt_cbc(MCRYPT_DES, $this-&gt;key, $str, MCRYPT_DECRYPT, $this-&gt;iv);\r\n        $str = $this-&gt;pkcs5Unpad($str);\r\n        return $str;\r\n    }\r\n    function hex2bin($hexData)\r\n    {\r\n        $binData = \"\";\r\n        for ($i = 0; $i &lt; strlen($hexData); $i += 2) \r\n        {\r\n            $binData .= chr(hexdec(substr($hexData, $i, 2)));\r\n        }\r\n        return $binData;\r\n    }\r\n    function pkcs5Pad($text, $blocksize)\r\n    {\r\n        $pad = $blocksize - (strlen($text) % $blocksize);\r\n        return $text . str_repeat(chr($pad), $pad);\r\n    }\r\n    function pkcs5Unpad($text)\r\n    {\r\n        $pad = ord($text{strlen($text) - 1});\r\n        if ($pad &gt; strlen($text))\r\n            return false;\r\n        if (strspn($text, chr($pad), strlen($text) - $pad) != $pad)\r\n            return false;\r\n        return substr($text, 0, -1 * $pad);\r\n    }\r\n}\r\n$str = \'abc\';\r\n$key = \'12345678\';  //8位内 \r\n$crypt = new  DES ($key);\r\n$mstr = $crypt-&gt;encrypt($str);\r\n$str = $crypt-&gt;decrypt($mstr);\r\necho $str . \' &lt;=&gt; \' . $mstr;\r\n4. PHP hex2bin\r\nfunction hexXbin($data, $types = false)\r\n{\r\n    if (!is_string($data))\r\n        return 0;\r\n    if ($types === false) \r\n    {\r\n        $len = strlen($data);\r\n        if ($len % 2) \r\n        {\r\n            return 0;\r\n        } \r\n        else if (strspn($data, \'0123456789abcdefABCDEF\') != $len) \r\n        {\r\n            return 0;\r\n        }\r\n        return pack(\'H*\', $data);\r\n    } \r\n    else \r\n    {\r\n        return bin2hex($data);\r\n    }\r\n}\r\necho $t = hexXbin(\'XN中国人(  ADｄｗｅｒｅ)zQ4MzUwOTcy==\', true);\r\necho \'&lt;br /&gt;\';\r\necho hexXbin($t);</code></pre>\r\n', null, null, '1', '6', null, '2016-07-11 17:06:33', '2016-07-11 17:11:16', null);
INSERT INTO `notes_copy` VALUES ('23', 'php 数组转json 不转义中文字符和 \\ / 的方法', null, '<pre>\r\n<code>/**\r\n * 不转义中文字符和\\/的 json 编码方法\r\n * @param array $arr 待编码数组\r\n * @return string\r\n */\r\nfunction json_encode_no_zh($arr)\r\n{\r\n    $str = str_replace(\"\\\\/\", \"/\", json_encode($arr));\r\n    $search = \"#\\\\\\u([0-9a-f]+)#ie\";\r\n    if (strpos(strtoupper(PHP_OS), \'WIN\') === false) \r\n    {\r\n        $replace = \"iconv(\'UCS-2BE\', \'UTF-8\', pack(\'H4\', \'\\\\1\'))\";//LINUX\r\n    } \r\n    else \r\n    {\r\n        $replace = \"iconv(\'UCS-2\', \'UTF-8\', pack(\'H4\', \'\\\\1\'))\";//WINDOWS\r\n    }\r\n    return preg_replace($search, $replace, $str);\r\n}</code></pre>\r\n', null, '', '1', '6', null, '2016-07-11 17:14:07', '2016-07-14 11:58:33', null);
INSERT INTO `notes_copy` VALUES ('24', 'php 汉字转拼音处理类(支持UTF8和GBK编码)', null, '<pre>\r\n<code class=\"brush:php\">/**\r\n * PHP 汉字转拼音\r\n * @author Jerryli(hzjerry@gmail.com)\r\n * @updated by Specs(http://9iphp.com)\r\n * @example\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\'), \'\r\n\'; //结果为拼音首字母\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\', \'all\'), \'\r\n\'; //结果为全拼音\r\n *  echo Chinese_to_PY::getPY(\'这是一段测试文字， This is a string\', \'one\'), \'\r\n\'; //结果为第一个拼音\r\n */\r\nclass Chinese_to_PY\r\n{\r\n    /**\r\n     * 拼音字符转换图\r\n     * @var array\r\n    */\r\n    private static $_aMaps = array(\r\n        \'a\' =&amp;gt; -20319, \'ai\' =&amp;gt; -20317, \'an\' =&amp;gt; -20304, \'ang\' =&amp;gt; -20295, \'ao\' =&amp;gt; -20292,\r\n        \'ba\' =&amp;gt; -20283, \'bai\' =&amp;gt; -20265, \'ban\' =&amp;gt; -20257, \'bang\' =&amp;gt; -20242, \'bao\' =&amp;gt; -20230, \'bei\' =&amp;gt; -20051, \'ben\' =&amp;gt; -20036, \'beng\' =&amp;gt; -20032, \'bi\' =&amp;gt; -20026, \'bian\' =&amp;gt; -20002, \'biao\' =&amp;gt; -19990, \'bie\' =&amp;gt; -19986, \'bin\' =&amp;gt; -19982, \'bing\' =&amp;gt; -19976, \'bo\' =&amp;gt; -19805, \'bu\' =&amp;gt; -19784,\r\n        \'ca\' =&amp;gt; -19775, \'cai\' =&amp;gt; -19774, \'can\' =&amp;gt; -19763, \'cang\' =&amp;gt; -19756, \'cao\' =&amp;gt; -19751, \'ce\' =&amp;gt; -19746, \'ceng\' =&amp;gt; -19741, \'cha\' =&amp;gt; -19739, \'chai\' =&amp;gt; -19728, \'chan\' =&amp;gt; -19725, \'chang\' =&amp;gt; -19715, \'chao\' =&amp;gt; -19540, \'che\' =&amp;gt; -19531, \'chen\' =&amp;gt; -19525, \'cheng\' =&amp;gt; -19515, \'chi\' =&amp;gt; -19500, \'chong\' =&amp;gt; -19484, \'chou\' =&amp;gt; -19479, \'chu\' =&amp;gt; -19467, \'chuai\' =&amp;gt; -19289, \'chuan\' =&amp;gt; -19288, \'chuang\' =&amp;gt; -19281, \'chui\' =&amp;gt; -19275, \'chun\' =&amp;gt; -19270, \'chuo\' =&amp;gt; -19263, \'ci\' =&amp;gt; -19261, \'cong\' =&amp;gt; -19249, \'cou\' =&amp;gt; -19243, \'cu\' =&amp;gt; -19242, \'cuan\' =&amp;gt; -19238, \'cui\' =&amp;gt; -19235, \'cun\' =&amp;gt; -19227, \'cuo\' =&amp;gt; -19224,\r\n        \'da\' =&amp;gt; -19218, \'dai\' =&amp;gt; -19212, \'dan\' =&amp;gt; -19038, \'dang\' =&amp;gt; -19023, \'dao\' =&amp;gt; -19018, \'de\' =&amp;gt; -19006, \'deng\' =&amp;gt; -19003, \'di\' =&amp;gt; -18996, \'dian\' =&amp;gt; -18977, \'diao\' =&amp;gt; -18961, \'die\' =&amp;gt; -18952, \'ding\' =&amp;gt; -18783, \'diu\' =&amp;gt; -18774, \'dong\' =&amp;gt; -18773, \'dou\' =&amp;gt; -18763, \'du\' =&amp;gt; -18756, \'duan\' =&amp;gt; -18741, \'dui\' =&amp;gt; -18735, \'dun\' =&amp;gt; -18731, \'duo\' =&amp;gt; -18722,\r\n        \'e\' =&amp;gt; -18710, \'en\' =&amp;gt; -18697, \'er\' =&amp;gt; -18696,\r\n        \'fa\' =&amp;gt; -18526, \'fan\' =&amp;gt; -18518, \'fang\' =&amp;gt; -18501, \'fei\' =&amp;gt; -18490, \'fen\' =&amp;gt; -18478, \'feng\' =&amp;gt; -18463, \'fo\' =&amp;gt; -18448, \'fou\' =&amp;gt; -18447, \'fu\' =&amp;gt; -18446,\r\n        \'ga\' =&amp;gt; -18239, \'gai\' =&amp;gt; -18237, \'gan\' =&amp;gt; -18231, \'gang\' =&amp;gt; -18220, \'gao\' =&amp;gt; -18211, \'ge\' =&amp;gt; -18201, \'gei\' =&amp;gt; -18184, \'gen\' =&amp;gt; -18183, \'geng\' =&amp;gt; -18181, \'gong\' =&amp;gt; -18012, \'gou\' =&amp;gt; -17997, \'gu\' =&amp;gt; -17988, \'gua\' =&amp;gt; -17970, \'guai\' =&amp;gt; -17964, \'guan\' =&amp;gt; -17961, \'guang\' =&amp;gt; -17950, \'gui\' =&amp;gt; -17947, \'gun\' =&amp;gt; -17931, \'guo\' =&amp;gt; -17928,\r\n        \'ha\' =&amp;gt; -17922, \'hai\' =&amp;gt; -17759, \'han\' =&amp;gt; -17752, \'hang\' =&amp;gt; -17733, \'hao\' =&amp;gt; -17730, \'he\' =&amp;gt; -17721, \'hei\' =&amp;gt; -17703, \'hen\' =&amp;gt; -17701, \'heng\' =&amp;gt; -17697, \'hong\' =&amp;gt; -17692, \'hou\' =&amp;gt; -17683, \'hu\' =&amp;gt; -17676, \'hua\' =&amp;gt; -17496, \'huai\' =&amp;gt; -17487, \'huan\' =&amp;gt; -17482, \'huang\' =&amp;gt; -17468, \'hui\' =&amp;gt; -17454, \'hun\' =&amp;gt; -17433, \'huo\' =&amp;gt; -17427,\r\n        \'ji\' =&amp;gt; -17417, \'jia\' =&amp;gt; -17202, \'jian\' =&amp;gt; -17185, \'jiang\' =&amp;gt; -16983, \'jiao\' =&amp;gt; -16970, \'jie\' =&amp;gt; -16942, \'jin\' =&amp;gt; -16915, \'jing\' =&amp;gt; -16733, \'jiong\' =&amp;gt; -16708, \'jiu\' =&amp;gt; -16706, \'ju\' =&amp;gt; -16689, \'juan\' =&amp;gt; -16664, \'jue\' =&amp;gt; -16657, \'jun\' =&amp;gt; -16647,\r\n        \'ka\' =&amp;gt; -16474, \'kai\' =&amp;gt; -16470, \'kan\' =&amp;gt; -16465, \'kang\' =&amp;gt; -16459, \'kao\' =&amp;gt; -16452, \'ke\' =&amp;gt; -16448, \'ken\' =&amp;gt; -16433, \'keng\' =&amp;gt; -16429, \'kong\' =&amp;gt; -16427, \'kou\' =&amp;gt; -16423, \'ku\' =&amp;gt; -16419, \'kua\' =&amp;gt; -16412, \'kuai\' =&amp;gt; -16407, \'kuan\' =&amp;gt; -16403, \'kuang\' =&amp;gt; -16401, \'kui\' =&amp;gt; -16393, \'kun\' =&amp;gt; -16220, \'kuo\' =&amp;gt; -16216,\r\n        \'la\' =&amp;gt; -16212, \'lai\' =&amp;gt; -16205, \'lan\' =&amp;gt; -16202, \'lang\' =&amp;gt; -16187, \'lao\' =&amp;gt; -16180, \'le\' =&amp;gt; -16171, \'lei\' =&amp;gt; -16169, \'leng\' =&amp;gt; -16158, \'li\' =&amp;gt; -16155, \'lia\' =&amp;gt; -15959, \'lian\' =&amp;gt; -15958, \'liang\' =&amp;gt; -15944, \'liao\' =&amp;gt; -15933, \'lie\' =&amp;gt; -15920, \'lin\' =&amp;gt; -15915, \'ling\' =&amp;gt; -15903, \'liu\' =&amp;gt; -15889, \'long\' =&amp;gt; -15878, \'lou\' =&amp;gt; -15707, \'lu\' =&amp;gt; -15701, \'lv\' =&amp;gt; -15681, \'luan\' =&amp;gt; -15667, \'lue\' =&amp;gt; -15661, \'lun\' =&amp;gt; -15659, \'luo\' =&amp;gt; -15652,\r\n        \'ma\' =&amp;gt; -15640, \'mai\' =&amp;gt; -15631, \'man\' =&amp;gt; -15625, \'mang\' =&amp;gt; -15454, \'mao\' =&amp;gt; -15448, \'me\' =&amp;gt; -15436, \'mei\' =&amp;gt; -15435, \'men\' =&amp;gt; -15419, \'meng\' =&amp;gt; -15416, \'mi\' =&amp;gt; -15408, \'mian\' =&amp;gt; -15394, \'miao\' =&amp;gt; -15385, \'mie\' =&amp;gt; -15377, \'min\' =&amp;gt; -15375, \'ming\' =&amp;gt; -15369, \'miu\' =&amp;gt; -15363, \'mo\' =&amp;gt; -15362, \'mou\' =&amp;gt; -15183, \'mu\' =&amp;gt; -15180,\r\n        \'na\' =&amp;gt; -15165, \'nai\' =&amp;gt; -15158, \'nan\' =&amp;gt; -15153, \'nang\' =&amp;gt; -15150, \'nao\' =&amp;gt; -15149, \'ne\' =&amp;gt; -15144, \'nei\' =&amp;gt; -15143, \'nen\' =&amp;gt; -15141, \'neng\' =&amp;gt; -15140, \'ni\' =&amp;gt; -15139, \'nian\' =&amp;gt; -15128, \'niang\' =&amp;gt; -15121, \'niao\' =&amp;gt; -15119, \'nie\' =&amp;gt; -15117, \'nin\' =&amp;gt; -15110, \'ning\' =&amp;gt; -15109, \'niu\' =&amp;gt; -14941, \'nong\' =&amp;gt; -14937, \'nu\' =&amp;gt; -14933, \'nv\' =&amp;gt; -14930, \'nuan\' =&amp;gt; -14929, \'nue\' =&amp;gt; -14928, \'nuo\' =&amp;gt; -14926,\r\n        \'o\' =&amp;gt; -14922, \'ou\' =&amp;gt; -14921,\r\n        \'pa\' =&amp;gt; -14914, \'pai\' =&amp;gt; -14908, \'pan\' =&amp;gt; -14902, \'pang\' =&amp;gt; -14894, \'pao\' =&amp;gt; -14889, \'pei\' =&amp;gt; -14882, \'pen\' =&amp;gt; -14873, \'peng\' =&amp;gt; -14871, \'pi\' =&amp;gt; -14857, \'pian\' =&amp;gt; -14678, \'piao\' =&amp;gt; -14674, \'pie\' =&amp;gt; -14670, \'pin\' =&amp;gt; -14668, \'ping\' =&amp;gt; -14663, \'po\' =&amp;gt; -14654, \'pu\' =&amp;gt; -14645,\r\n        \'qi\' =&amp;gt; -14630, \'qia\' =&amp;gt; -14594, \'qian\' =&amp;gt; -14429, \'qiang\' =&amp;gt; -14407, \'qiao\' =&amp;gt; -14399, \'qie\' =&amp;gt; -14384, \'qin\' =&amp;gt; -14379, \'qing\' =&amp;gt; -14368, \'qiong\' =&amp;gt; -14355, \'qiu\' =&amp;gt; -14353, \'qu\' =&amp;gt; -14345, \'quan\' =&amp;gt; -14170, \'que\' =&amp;gt; -14159, \'qun\' =&amp;gt; -14151,\r\n        \'ran\' =&amp;gt; -14149, \'rang\' =&amp;gt; -14145, \'rao\' =&amp;gt; -14140, \'re\' =&amp;gt; -14137, \'ren\' =&amp;gt; -14135, \'reng\' =&amp;gt; -14125, \'ri\' =&amp;gt; -14123, \'rong\' =&amp;gt; -14122, \'rou\' =&amp;gt; -14112, \'ru\' =&amp;gt; -14109, \'ruan\' =&amp;gt; -14099, \'rui\' =&amp;gt; -14097, \'run\' =&amp;gt; -14094, \'ruo\' =&amp;gt; -14092,\r\n        \'sa\' =&amp;gt; -14090, \'sai\' =&amp;gt; -14087, \'san\' =&amp;gt; -14083, \'sang\' =&amp;gt; -13917, \'sao\' =&amp;gt; -13914, \'se\' =&amp;gt; -13910, \'sen\' =&amp;gt; -13907, \'seng\' =&amp;gt; -13906, \'sha\' =&amp;gt; -13905, \'shai\' =&amp;gt; -13896, \'shan\' =&amp;gt; -13894, \'shang\' =&amp;gt; -13878, \'shao\' =&amp;gt; -13870, \'she\' =&amp;gt; -13859, \'shen\' =&amp;gt; -13847, \'sheng\' =&amp;gt; -13831, \'shi\' =&amp;gt; -13658, \'shou\' =&amp;gt; -13611, \'shu\' =&amp;gt; -13601, \'shua\' =&amp;gt; -13406, \'shuai\' =&amp;gt; -13404, \'shuan\' =&amp;gt; -13400, \'shuang\' =&amp;gt; -13398, \'shui\' =&amp;gt; -13395, \'shun\' =&amp;gt; -13391, \'shuo\' =&amp;gt; -13387, \'si\' =&amp;gt; -13383, \'song\' =&amp;gt; -13367, \'sou\' =&amp;gt; -13359, \'su\' =&amp;gt; -13356, \'suan\' =&amp;gt; -13343, \'sui\' =&amp;gt; -13340, \'sun\' =&amp;gt; -13329, \'suo\' =&amp;gt; -13326,\r\n        \'ta\' =&amp;gt; -13318, \'tai\' =&amp;gt; -13147, \'tan\' =&amp;gt; -13138, \'tang\' =&amp;gt; -13120, \'tao\' =&amp;gt; -13107, \'te\' =&amp;gt; -13096, \'teng\' =&amp;gt; -13095, \'ti\' =&amp;gt; -13091, \'tian\' =&amp;gt; -13076, \'tiao\' =&amp;gt; -13068, \'tie\' =&amp;gt; -13063, \'ting\' =&amp;gt; -13060, \'tong\' =&amp;gt; -12888, \'tou\' =&amp;gt; -12875, \'tu\' =&amp;gt; -12871, \'tuan\' =&amp;gt; -12860, \'tui\' =&amp;gt; -12858, \'tun\' =&amp;gt; -12852, \'tuo\' =&amp;gt; -12849,\r\n        \'wa\' =&amp;gt; -12838, \'wai\' =&amp;gt; -12831, \'wan\' =&amp;gt; -12829, \'wang\' =&amp;gt; -12812, \'wei\' =&amp;gt; -12802, \'wen\' =&amp;gt; -12607, \'weng\' =&amp;gt; -12597, \'wo\' =&amp;gt; -12594, \'wu\' =&amp;gt; -12585,\r\n        \'xi\' =&amp;gt; -12556, \'xia\' =&amp;gt; -12359, \'xian\' =&amp;gt; -12346, \'xiang\' =&amp;gt; -12320, \'xiao\' =&amp;gt; -12300, \'xie\' =&amp;gt; -12120, \'xin\' =&amp;gt; -12099, \'xing\' =&amp;gt; -12089, \'xiong\' =&amp;gt; -12074, \'xiu\' =&amp;gt; -12067, \'xu\' =&amp;gt; -12058, \'xuan\' =&amp;gt; -12039, \'xue\' =&amp;gt; -11867, \'xun\' =&amp;gt; -11861,\r\n        \'ya\' =&amp;gt; -11847, \'yan\' =&amp;gt; -11831, \'yang\' =&amp;gt; -11798, \'yao\' =&amp;gt; -11781, \'ye\' =&amp;gt; -11604, \'yi\' =&amp;gt; -11589, \'yin\' =&amp;gt; -11536, \'ying\' =&amp;gt; -11358, \'yo\' =&amp;gt; -11340, \'yong\' =&amp;gt; -11339, \'you\' =&amp;gt; -11324, \'yu\' =&amp;gt; -11303, \'yuan\' =&amp;gt; -11097, \'yue\' =&amp;gt; -11077, \'yun\' =&amp;gt; -11067,\r\n        \'za\' =&amp;gt; -11055, \'zai\' =&amp;gt; -11052, \'zan\' =&amp;gt; -11045, \'zang\' =&amp;gt; -11041, \'zao\' =&amp;gt; -11038, \'ze\' =&amp;gt; -11024, \'zei\' =&amp;gt; -11020, \'zen\' =&amp;gt; -11019, \'zeng\' =&amp;gt; -11018, \'zha\' =&amp;gt; -11014, \'zhai\' =&amp;gt; -10838, \'zhan\' =&amp;gt; -10832, \'zhang\' =&amp;gt; -10815, \'zhao\' =&amp;gt; -10800, \'zhe\' =&amp;gt; -10790, \'zhen\' =&amp;gt; -10780, \'zheng\' =&amp;gt; -10764, \'zhi\' =&amp;gt; -10587, \'zhong\' =&amp;gt; -10544, \'zhou\' =&amp;gt; -10533, \'zhu\' =&amp;gt; -10519, \'zhua\' =&amp;gt; -10331, \'zhuai\' =&amp;gt; -10329, \'zhuan\' =&amp;gt; -10328, \'zhuang\' =&amp;gt; -10322, \'zhui\' =&amp;gt; -10315, \'zhun\' =&amp;gt; -10309, \'zhuo\' =&amp;gt; -10307, \'zi\' =&amp;gt; -10296, \'zong\' =&amp;gt; -10281, \'zou\' =&amp;gt; -10274, \'zu\' =&amp;gt; -10270, \'zuan\' =&amp;gt; -10262, \'zui\' =&amp;gt; -10260, \'zun\' =&amp;gt; -10256, \'zuo\' =&amp;gt; -10254\r\n    );\r\n    /**\r\n     * 将中文编码成拼音\r\n     * @param string $chinese 要转换为拼音的字符串\r\n     * @param string $sRetFormat 返回格式 [first:每个字的首字母|all:全拼音|one:字符串字母]\r\n     * @return string\r\n     */\r\n    public static function getPY($chinese, $sRetFormat = \'first\')\r\n    {\r\n        $sGBK = iconv(\'UTF-8\', \'GBK\', $chinese);\r\n        $sUTF8 = iconv(\'GBK\', \'UTF-8\', $sGBK);\r\n        if ($sUTF8 != $chinese) $sGBK = $chinese;\r\n        $aBuf = array();\r\n        for ($i = 0, $iLoop = strlen($sGBK); $i &amp;lt; $iLoop; $i++) \r\n        {\r\n            $iChr = ord($sGBK{$i});\r\n            if ($iChr &amp;gt; 160)\r\n                $iChr = ($iChr &amp;lt;&amp;lt; 8) + ord($sGBK{++$i}) - 65536;\r\n            if (\'first\' == $sRetFormat || \'one\' == $sRetFormat)\r\n                $aBuf[] = substr(self::zh2py($iChr), 0, 1);\r\n            else\r\n                $aBuf[] = self::zh2py($iChr);\r\n        }\r\n        if (\'first\' === $sRetFormat)\r\n            return implode(\'\', $aBuf);\r\n        elseif (\'one\' == $sRetFormat)\r\n            return $aBuf[0];\r\n        else\r\n            return implode(\' \', $aBuf);\r\n    }\r\n    /**\r\n     * 中文转换到拼音(每次处理一个字符)\r\n     * @param number $iWORD 待处理字符双字节\r\n     * @return string 拼音\r\n     */\r\n    private static function zh2py($iWORD)\r\n    {\r\n        if ($iWORD &amp;gt; 0 &amp;amp;&amp;amp; $iWORD &amp;lt; 160) \r\n        {\r\n            return chr($iWORD);\r\n        } \r\n        elseif ($iWORD &amp;lt; -20319 || $iWORD &amp;gt; -10247) \r\n        {\r\n            return \'\';\r\n        } \r\n        else \r\n        {\r\n            foreach (self::$_aMaps as $py =&amp;gt; $code) \r\n            {\r\n                if ($code &amp;gt; $iWORD) break;\r\n                $result = $py;\r\n            }\r\n            return $result;\r\n        }\r\n    }\r\n}</code></pre>\r\n', null, 'aa', '1', '6', null, '2016-07-11 17:18:25', '2016-07-14 11:55:45', null);

-- ----------------------------
-- Table structure for ones
-- ----------------------------
DROP TABLE IF EXISTS `ones`;
CREATE TABLE `ones` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `description` text,
  `datetime` datetime DEFAULT NULL,
  `created_at` varchar(255) DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `deleted_at` datetime DEFAULT NULL,
  `tag` varchar(255) DEFAULT NULL,
  `thumb` varchar(255) DEFAULT NULL,
  `file` varchar(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ones
-- ----------------------------
INSERT INTO `ones` VALUES ('45', '关于', '<p><img class=\"size-full wp-image-954 aligncenter\" src=\"http://static.9iphp.com/wp-content/uploads/2014/05/9iphp_banner_smile.jpg\" alt=\"9iphp_banner_smile\" width=\"700\" height=\"220\"></p>\r\n                <h6>关于博主</h6>\r\n                <ul>\r\n                    <li>性别：<i class=\"fa fa-male\"></i></li>\r\n                    <li>职业：PHP代码搬运工~</li>\r\n                    <li>技能：LAMP、DIV+CSS、jQuery、DedeCMS</li>\r\n                    <li>技能熟悉程序：略懂…</li>\r\n                </ul>\r\n                <h6>联系博主</h6>\r\n                <p>有事联系 发送邮件到：specs#163.com (# 换成 @)</p>\r\n                <h6>微信公众号</h6>\r\n                <h6>赞助博主</h6>\r\n                <p>如果您通过本博客解决了一些问题，并且希望本博客能更好的发展下去，欢迎使用<a href=\"http://9iphp.com/donate\" target=\"_blank\"\r\n                                                          data-original-title=\"\" title=\"\">赞助</a>功能~</p><h6>关于本博</h6>\r\n                <p>本人记性不好，建立本博只为记录学习中遇到的问题及解决办法，方便以后查询。主要涉及到LAMP、HTML5、DIV+CSS、jQuery、DedeCMS、Wordpress、微信公众号开发等方面</p>', '2016-07-11 00:00:00', '2016-07-11 17:57:39', '2016-07-13 17:23:00', null, '', '', '', '1');
INSERT INTO `ones` VALUES ('46', 'bbsdf', 'ee', '2016-07-11 00:00:00', '2016-07-11 17:58:05', '2016-07-11 17:58:05', null, '', '', '', '1');
INSERT INTO `ones` VALUES ('47', '11', null, '2016-07-12 00:00:00', '2016-07-12 14:01:21', '2016-07-12 14:01:21', null, '', '', '', '1');
INSERT INTO `ones` VALUES ('48', 'bbb', '<p>ssss<br/></p>', '0000-00-00 00:00:00', '2016-07-12 14:15:20', '2016-07-12 14:15:20', null, '', '', '', '1');

-- ----------------------------
-- Table structure for password_resets
-- ----------------------------
DROP TABLE IF EXISTS `password_resets`;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of password_resets
-- ----------------------------

-- ----------------------------
-- Table structure for permission_role
-- ----------------------------
DROP TABLE IF EXISTS `permission_role`;
CREATE TABLE `permission_role` (
  `permission_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`permission_id`,`role_id`),
  KEY `permission_role_role_id_foreign` (`role_id`),
  CONSTRAINT `permission_role_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `permission_role_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of permission_role
-- ----------------------------
INSERT INTO `permission_role` VALUES ('20', '10');
INSERT INTO `permission_role` VALUES ('21', '10');
INSERT INTO `permission_role` VALUES ('22', '10');
INSERT INTO `permission_role` VALUES ('35', '10');
INSERT INTO `permission_role` VALUES ('36', '10');
INSERT INTO `permission_role` VALUES ('37', '10');
INSERT INTO `permission_role` VALUES ('38', '10');
INSERT INTO `permission_role` VALUES ('39', '10');
INSERT INTO `permission_role` VALUES ('40', '10');
INSERT INTO `permission_role` VALUES ('42', '10');
INSERT INTO `permission_role` VALUES ('43', '10');
INSERT INTO `permission_role` VALUES ('44', '10');
INSERT INTO `permission_role` VALUES ('45', '10');
INSERT INTO `permission_role` VALUES ('46', '10');
INSERT INTO `permission_role` VALUES ('47', '10');
INSERT INTO `permission_role` VALUES ('48', '10');
INSERT INTO `permission_role` VALUES ('49', '10');
INSERT INTO `permission_role` VALUES ('50', '10');
INSERT INTO `permission_role` VALUES ('51', '10');
INSERT INTO `permission_role` VALUES ('52', '10');
INSERT INTO `permission_role` VALUES ('53', '10');
INSERT INTO `permission_role` VALUES ('54', '10');
INSERT INTO `permission_role` VALUES ('55', '10');
INSERT INTO `permission_role` VALUES ('56', '10');
INSERT INTO `permission_role` VALUES ('57', '10');
INSERT INTO `permission_role` VALUES ('58', '10');
INSERT INTO `permission_role` VALUES ('59', '10');
INSERT INTO `permission_role` VALUES ('60', '10');
INSERT INTO `permission_role` VALUES ('61', '10');
INSERT INTO `permission_role` VALUES ('62', '10');
INSERT INTO `permission_role` VALUES ('63', '10');
INSERT INTO `permission_role` VALUES ('64', '10');
INSERT INTO `permission_role` VALUES ('65', '10');
INSERT INTO `permission_role` VALUES ('66', '10');
INSERT INTO `permission_role` VALUES ('67', '10');
INSERT INTO `permission_role` VALUES ('68', '10');
INSERT INTO `permission_role` VALUES ('69', '10');
INSERT INTO `permission_role` VALUES ('70', '10');
INSERT INTO `permission_role` VALUES ('71', '10');
INSERT INTO `permission_role` VALUES ('72', '10');
INSERT INTO `permission_role` VALUES ('75', '10');
INSERT INTO `permission_role` VALUES ('77', '10');
INSERT INTO `permission_role` VALUES ('78', '10');
INSERT INTO `permission_role` VALUES ('79', '10');
INSERT INTO `permission_role` VALUES ('80', '10');
INSERT INTO `permission_role` VALUES ('81', '10');
INSERT INTO `permission_role` VALUES ('83', '10');
INSERT INTO `permission_role` VALUES ('84', '10');
INSERT INTO `permission_role` VALUES ('85', '10');
INSERT INTO `permission_role` VALUES ('86', '10');
INSERT INTO `permission_role` VALUES ('87', '10');
INSERT INTO `permission_role` VALUES ('88', '10');
INSERT INTO `permission_role` VALUES ('89', '10');
INSERT INTO `permission_role` VALUES ('90', '10');
INSERT INTO `permission_role` VALUES ('91', '10');
INSERT INTO `permission_role` VALUES ('93', '10');
INSERT INTO `permission_role` VALUES ('94', '10');
INSERT INTO `permission_role` VALUES ('95', '10');
INSERT INTO `permission_role` VALUES ('96', '10');
INSERT INTO `permission_role` VALUES ('97', '10');
INSERT INTO `permission_role` VALUES ('98', '10');
INSERT INTO `permission_role` VALUES ('99', '10');
INSERT INTO `permission_role` VALUES ('100', '10');
INSERT INTO `permission_role` VALUES ('101', '10');
INSERT INTO `permission_role` VALUES ('102', '10');
INSERT INTO `permission_role` VALUES ('103', '10');
INSERT INTO `permission_role` VALUES ('20', '12');
INSERT INTO `permission_role` VALUES ('21', '12');
INSERT INTO `permission_role` VALUES ('35', '12');
INSERT INTO `permission_role` VALUES ('59', '12');
INSERT INTO `permission_role` VALUES ('60', '12');
INSERT INTO `permission_role` VALUES ('61', '12');
INSERT INTO `permission_role` VALUES ('62', '12');
INSERT INTO `permission_role` VALUES ('78', '12');
INSERT INTO `permission_role` VALUES ('79', '12');
INSERT INTO `permission_role` VALUES ('80', '12');
INSERT INTO `permission_role` VALUES ('81', '12');
INSERT INTO `permission_role` VALUES ('83', '12');
INSERT INTO `permission_role` VALUES ('84', '12');
INSERT INTO `permission_role` VALUES ('85', '12');
INSERT INTO `permission_role` VALUES ('86', '12');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `fid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '菜单父ID',
  `icon` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '图标class',
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `is_menu` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否作为菜单显示,[1|0]',
  `sort` tinyint(4) NOT NULL DEFAULT '0' COMMENT '排序',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `permissions_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=106 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of permissions
-- ----------------------------
INSERT INTO `permissions` VALUES ('20', '0', 'edit', '#-1456129983', '系统设置', '', '1', '100', '2016-02-22 16:33:03', '2016-02-22 16:33:03');
INSERT INTO `permissions` VALUES ('21', '20', '', 'admin.admin_user.index', '用户权限', '查看后台用户列表', '1', '0', '2016-02-18 15:56:26', '2016-02-18 15:56:26');
INSERT INTO `permissions` VALUES ('22', '20', '', 'admin.admin_user.create', '创建后台用户', '页面', '0', '0', '2016-02-23 11:48:18', '2016-02-23 11:48:18');
INSERT INTO `permissions` VALUES ('35', '0', 'home', 'admin.home', 'Dashboard', '后台首页', '1', '0', '2016-02-22 16:32:40', '2016-02-22 16:32:40');
INSERT INTO `permissions` VALUES ('36', '0', 'home', '#-1456132007', '博客管理', '', '1', '0', '2016-03-11 13:27:05', '2016-02-22 17:06:47');
INSERT INTO `permissions` VALUES ('37', '36', '', 'admin.blog.index', '博客列表', '', '1', '0', '2016-02-22 17:15:48', '2016-02-22 17:15:48');
INSERT INTO `permissions` VALUES ('38', '20', '', 'admin.admin_user.store', '保存新建后台用户', '操作', '0', '0', '2016-02-23 11:48:52', '2016-02-23 11:48:52');
INSERT INTO `permissions` VALUES ('39', '20', '', 'admin.admin_user.destroy', '删除后台用户', '操作', '0', '0', '2016-02-23 11:49:09', '2016-02-23 11:49:09');
INSERT INTO `permissions` VALUES ('40', '20', '', 'admin.admin_user.destory.all', '批量后台用户删除', '操作', '0', '0', '2016-02-23 12:01:01', '2016-02-23 12:01:01');
INSERT INTO `permissions` VALUES ('42', '20', '', 'admin.admin_user.edit', '编辑后台用户', '页面', '0', '0', '2016-02-23 11:48:35', '2016-02-23 11:48:35');
INSERT INTO `permissions` VALUES ('43', '20', '', 'admin.admin_user.update', '保存编辑后台用户', '操作', '0', '0', '2016-02-23 11:50:12', '2016-02-23 11:50:12');
INSERT INTO `permissions` VALUES ('44', '20', '', 'admin.permission.index', '权限管理', '页面', '0', '0', '2016-02-23 11:51:36', '2016-02-23 11:51:36');
INSERT INTO `permissions` VALUES ('45', '20', '', 'admin.permission.create', '新建权限', '页面', '0', '0', '2016-02-23 11:52:16', '2016-02-23 11:52:16');
INSERT INTO `permissions` VALUES ('46', '20', '', 'admin.permission.store', '保存新建权限', '操作', '0', '0', '2016-02-23 11:52:38', '2016-02-23 11:52:38');
INSERT INTO `permissions` VALUES ('47', '20', '', 'admin.permission.edit', '编辑权限', '页面', '0', '0', '2016-02-23 11:53:29', '2016-02-23 11:53:29');
INSERT INTO `permissions` VALUES ('48', '20', '', 'admin.permission.update', '保存编辑权限', '操作', '0', '0', '2016-02-23 11:53:56', '2016-02-23 11:53:56');
INSERT INTO `permissions` VALUES ('49', '20', '', 'admin.permission.destroy', '删除权限', '操作', '0', '0', '2016-02-23 11:54:27', '2016-02-23 11:54:27');
INSERT INTO `permissions` VALUES ('50', '20', '', 'admin.permission.destory.all', '批量删除权限', '操作', '0', '0', '2016-02-23 11:55:17', '2016-02-23 11:55:17');
INSERT INTO `permissions` VALUES ('51', '20', '', 'admin.role.index', '角色管理', '页面', '0', '0', '2016-02-23 11:56:07', '2016-02-23 11:56:07');
INSERT INTO `permissions` VALUES ('52', '20', '', 'admin.role.create', '新建角色', '页面', '0', '0', '2016-02-23 11:56:33', '2016-02-23 11:56:33');
INSERT INTO `permissions` VALUES ('53', '20', '', 'admin.role.store', '保存新建角色', '操作', '0', '0', '2016-02-23 11:57:26', '2016-02-23 11:57:26');
INSERT INTO `permissions` VALUES ('54', '20', '', 'admin.role.edit', '编辑角色', '页面', '0', '0', '2016-02-23 11:58:25', '2016-02-23 11:58:25');
INSERT INTO `permissions` VALUES ('55', '20', '', 'admin.role.update', '保存编辑角色', '操作', '0', '0', '2016-02-23 11:58:50', '2016-02-23 11:58:50');
INSERT INTO `permissions` VALUES ('56', '20', '', 'admin.role.permissions', '角色权限设置', '', '0', '0', '2016-02-23 11:59:26', '2016-02-23 11:59:26');
INSERT INTO `permissions` VALUES ('57', '20', '', 'admin.role.destroy', '角色删除', '操作', '0', '0', '2016-02-23 11:59:49', '2016-02-23 11:59:49');
INSERT INTO `permissions` VALUES ('58', '20', '', 'admin.role.destory.all', '批量删除角色', '', '0', '0', '2016-02-23 12:01:58', '2016-02-23 12:01:58');
INSERT INTO `permissions` VALUES ('59', '0', 'home', '#-1457581321', '文章管理', '', '1', '0', '2016-03-10 11:44:41', '2016-03-10 03:42:01');
INSERT INTO `permissions` VALUES ('60', '59', '', 'admin.article.create', '写文章', '', '1', '0', '2016-03-10 03:43:18', '2016-03-10 03:43:18');
INSERT INTO `permissions` VALUES ('61', '59', '', 'admin.article.index', '文章列表', '', '1', '0', '2016-03-10 11:45:05', '2016-03-10 03:45:05');
INSERT INTO `permissions` VALUES ('62', '59', '', 'admin.article.recycle', '回收站', '', '1', '0', '2016-03-11 17:48:43', '2016-03-10 03:51:18');
INSERT INTO `permissions` VALUES ('63', '0', 'home', '#-1457581634', '分类管理', '', '1', '0', '2016-03-10 11:49:21', '2016-03-10 03:47:14');
INSERT INTO `permissions` VALUES ('64', '63', '', 'admin.category.create', '新建分类', '', '1', '0', '2016-03-10 03:48:35', '2016-03-10 03:48:35');
INSERT INTO `permissions` VALUES ('65', '63', '', 'admin.category.index', '分类列表', '', '1', '0', '2016-03-10 14:24:46', '2016-03-10 06:24:46');
INSERT INTO `permissions` VALUES ('66', '0', 'home', '#-1457594324', '标签管理', '', '1', '0', '2016-03-10 15:18:44', '2016-03-10 07:18:44');
INSERT INTO `permissions` VALUES ('67', '66', '', 'admin.tags.create', '添加标签', '', '1', '0', '2016-03-10 15:18:11', '2016-03-10 07:18:11');
INSERT INTO `permissions` VALUES ('68', '66', '', 'admin.tags.index', '标签列表', '', '1', '0', '2016-03-10 07:19:11', '2016-03-10 07:19:11');
INSERT INTO `permissions` VALUES ('69', '0', 'home', '#-1457597884', '资源管理', '', '1', '0', '2016-03-10 16:18:58', '2016-03-10 08:18:04');
INSERT INTO `permissions` VALUES ('70', '69', '', 'admin.upload', '文件管理', '', '1', '0', '2016-03-11 13:26:51', '2016-03-10 08:18:39');
INSERT INTO `permissions` VALUES ('71', '0', 'home', 'admin.log-viewer', '日志管理', '', '1', '0', '2016-07-08 13:36:55', '2016-03-10 09:22:26');
INSERT INTO `permissions` VALUES ('72', '69', '', 'admin.uploads', '文件上传', '', '1', '0', '2016-03-11 05:26:02', '2016-03-11 05:26:02');
INSERT INTO `permissions` VALUES ('73', '36', '', 'admin.blog.create', '新建博客', '', '1', '0', '2016-03-17 07:34:39', '2016-03-17 07:34:39');
INSERT INTO `permissions` VALUES ('74', '36', '', 'admin.blog.recycle', '回收站', '', '1', '0', '2016-03-17 07:41:25', '2016-03-17 07:41:25');
INSERT INTO `permissions` VALUES ('75', '0', 'home', '#-1458288946', '系统日志', '', '1', '0', '2016-03-18 16:16:45', '2016-03-18 08:15:46');
INSERT INTO `permissions` VALUES ('76', '20', '', 'admin.backup', '备份', '', '0', '0', '2016-03-17 08:36:46', '2016-03-17 08:36:46');
INSERT INTO `permissions` VALUES ('77', '0', 'home', 'admin.column.index', '栏目管理', '', '1', '0', '2016-03-18 11:54:06', '2016-03-18 03:42:28');
INSERT INTO `permissions` VALUES ('78', '0', 'home', '#-1458527948', '单页管理', '', '1', '0', '2016-03-21 02:39:08', '2016-03-21 02:39:08');
INSERT INTO `permissions` VALUES ('79', '78', '', 'admin.one.index', '列表', '', '1', '0', '2016-03-21 11:32:13', '2016-03-21 02:40:06');
INSERT INTO `permissions` VALUES ('80', '78', '', 'admin.one.create', '新建页面', '', '1', '0', '2016-03-21 11:32:08', '2016-03-21 02:53:51');
INSERT INTO `permissions` VALUES ('81', '78', '', 'admin.one.recycle', '回收站', '', '1', '0', '2016-03-21 02:41:09', '2016-03-21 02:41:09');
INSERT INTO `permissions` VALUES ('83', '78', '', 'admin.one.edit', '编辑页面', '', '0', '0', '2016-03-21 11:32:04', '2016-03-21 03:25:48');
INSERT INTO `permissions` VALUES ('84', '78', '', 'admin.one.store', '添加成功', '', '0', '0', '2016-03-21 11:31:45', '2016-03-21 03:26:48');
INSERT INTO `permissions` VALUES ('85', '78', '', 'admin.one.update', '修改成功', '', '0', '0', '2016-03-21 11:31:48', '2016-03-21 03:27:25');
INSERT INTO `permissions` VALUES ('86', '78', '', 'admin.one.delete', '删除', '', '0', '0', '2016-03-21 11:31:50', '2016-03-21 03:27:53');
INSERT INTO `permissions` VALUES ('87', '78', '', 'admin.one.destroy', '移入回收站', '', '0', '0', '2016-03-23 18:13:22', '2016-03-21 03:28:34');
INSERT INTO `permissions` VALUES ('88', '0', 'home', '#-1458722115', '友情链接', '', '1', '0', '2016-03-23 08:35:15', '2016-03-23 08:35:15');
INSERT INTO `permissions` VALUES ('89', '88', '', 'admin.link.index', '列表', '', '1', '0', '2016-03-23 08:35:45', '2016-03-23 08:35:45');
INSERT INTO `permissions` VALUES ('90', '88', '', 'admin.link.create', '新建友情链接', '', '1', '0', '2016-03-23 16:39:36', '2016-03-23 08:39:36');
INSERT INTO `permissions` VALUES ('91', '88', '', 'admin.link.recycle', '回收站', '', '1', '0', '2016-03-23 08:36:46', '2016-03-23 08:36:46');
INSERT INTO `permissions` VALUES ('93', '88', '', 'admin.link.edit', '编辑页面', '', '0', '0', '2016-03-23 10:10:36', '2016-03-23 10:10:36');
INSERT INTO `permissions` VALUES ('94', '88', '', 'admin.link.store', '添加成功', '', '0', '0', '2016-03-23 10:10:54', '2016-03-23 10:10:54');
INSERT INTO `permissions` VALUES ('95', '88', '', 'admin.link.update', '修改成功', '', '0', '0', '2016-03-23 10:11:14', '2016-03-23 10:11:14');
INSERT INTO `permissions` VALUES ('96', '88', '', 'admin.link.delete', '删除', '', '0', '0', '2016-03-23 10:11:32', '2016-03-23 10:11:32');
INSERT INTO `permissions` VALUES ('97', '88', '', 'admin.link.destroy', '移入回收站', '', '0', '0', '2016-03-23 18:13:14', '2016-03-23 10:12:01');
INSERT INTO `permissions` VALUES ('98', '88', '', 'admin.link.restore', '移除回收站', '', '0', '0', '2016-03-23 10:12:59', '2016-03-23 10:12:59');
INSERT INTO `permissions` VALUES ('99', '78', '', 'admin.one.restore', '移除回收站', '', '0', '0', '2016-03-23 10:13:52', '2016-03-23 10:13:52');
INSERT INTO `permissions` VALUES ('100', '0', 'home', '#-1467699568', '笔记管理', '', '1', '0', '2016-07-05 06:19:28', '2016-07-05 06:19:28');
INSERT INTO `permissions` VALUES ('101', '100', '', 'admin.note.create', '新建笔记', '', '1', '0', '2016-07-05 06:20:52', '2016-07-05 06:20:52');
INSERT INTO `permissions` VALUES ('102', '100', '', 'admin.note.index', '笔记列表', '', '1', '0', '2016-07-05 06:21:36', '2016-07-05 06:21:36');
INSERT INTO `permissions` VALUES ('103', '100', '', 'admin.note.recycle', '回收站', '', '1', '0', '2016-07-05 06:22:27', '2016-07-05 06:22:27');
INSERT INTO `permissions` VALUES ('104', '20', '', 'admin.logviewer.index', '系统日志', 'log', '1', '0', '2016-07-08 14:57:50', '2016-02-23 11:48:52');
INSERT INTO `permissions` VALUES ('105', '20', '', 'admin.system.base', '基本设置', '', '1', '0', '2016-07-08 17:20:19', '2016-02-23 11:48:52');

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `roles_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('10', 'administrator', '系统管理员', '', '2016-02-19 17:59:52', '2016-02-19 17:59:52');
INSERT INTO `roles` VALUES ('12', 'test', '测试狗', '', '2016-02-19 18:00:43', '2016-02-19 18:00:43');

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(80) COLLATE utf8_unicode_ci NOT NULL COMMENT '标签名',
  `addtime` datetime DEFAULT NULL,
  `edittime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=39 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='标签表';

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES ('1', 'ajax', '2016-07-08 11:47:29', null);
INSERT INTO `tags` VALUES ('4', 'javascript', null, null);
INSERT INTO `tags` VALUES ('5', 'php', null, null);
INSERT INTO `tags` VALUES ('8', 'linux', null, null);
INSERT INTO `tags` VALUES ('9', 'ubuntu', null, null);
INSERT INTO `tags` VALUES ('10', 'mysql', null, null);
INSERT INTO `tags` VALUES ('11', 'git', null, null);
INSERT INTO `tags` VALUES ('12', 'laravel', null, null);
INSERT INTO `tags` VALUES ('13', 'phpstorm', null, null);
INSERT INTO `tags` VALUES ('14', 'docker', null, null);
INSERT INTO `tags` VALUES ('15', '框架', null, null);
INSERT INTO `tags` VALUES ('16', 'nodejs', null, null);
INSERT INTO `tags` VALUES ('17', 'html', '2016-07-08 11:49:48', null);
INSERT INTO `tags` VALUES ('18', 'nginx', null, null);
INSERT INTO `tags` VALUES ('19', 'apache', null, null);
INSERT INTO `tags` VALUES ('20', 'wow', null, null);
INSERT INTO `tags` VALUES ('21', '类', null, null);
INSERT INTO `tags` VALUES ('22', '函数', null, null);
INSERT INTO `tags` VALUES ('23', '数组', null, null);
INSERT INTO `tags` VALUES ('24', '文件', null, null);
INSERT INTO `tags` VALUES ('25', '数据', null, null);
INSERT INTO `tags` VALUES ('26', '图像', null, null);
INSERT INTO `tags` VALUES ('27', '验证码', null, null);
INSERT INTO `tags` VALUES ('28', 'excel', null, null);
INSERT INTO `tags` VALUES ('29', 'csv', null, null);
INSERT INTO `tags` VALUES ('30', '注释', null, null);
INSERT INTO `tags` VALUES ('31', '接口', null, null);
INSERT INTO `tags` VALUES ('32', 'aa', null, null);
INSERT INTO `tags` VALUES ('33', 'ss', null, null);
INSERT INTO `tags` VALUES ('34', '安保部', '2016-07-08 04:03:08', '2016-07-08 12:07:38');
INSERT INTO `tags` VALUES ('35', 'json', null, null);
INSERT INTO `tags` VALUES ('36', '功能', null, null);
INSERT INTO `tags` VALUES ('37', 'session', null, null);
INSERT INTO `tags` VALUES ('38', '笔记', null, null);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of users
-- ----------------------------
